(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{329:function(t,r,a){"use strict";a.r(r);var e=a(14),s=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/catalog",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式目录"),r("OutboundLink")],1),t._v("（推荐看这个，非常详细有代码，且易懂）")]),t._v(" "),r("p",[t._v("my "),r("a",{attrs:{href:"https://gitee.com/IFANx/design-module/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitee"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"创建性模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建性模式"}},[t._v("#")]),t._v(" 创建性模式")]),t._v(" "),r("h4",{attrs:{id:"_1-工厂方法模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-工厂方法模式"}},[t._v("#")]),t._v(" 1."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"}},[t._v("工厂方法模式"),r("OutboundLink")],1)]),t._v(" "),r("h4",{attrs:{id:"简单工厂-工厂方法与抽象工厂的比较-https-refactoringguru-cn-design-patterns-factory-comparison"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂-工厂方法与抽象工厂的比较-https-refactoringguru-cn-design-patterns-factory-comparison"}},[t._v("#")]),t._v(" （"),r("a",{attrs:{href:"https://gitee.com/IFANx/design-module/blob/master/src/main/java/factory/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单工厂，工厂方法与抽象工厂的比较"),r("OutboundLink")],1),t._v("）https://refactoringguru.cn/design-patterns/factory-comparison")]),t._v(" "),r("p",[r("strong",[t._v("亦称：")]),t._v(" 虚拟构造函数、Virtual Constructor、Factory Method")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("工厂方法模式")]),t._v("是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。(工厂方法模式建议使用特殊的"),r("em",[t._v("工厂")]),t._v("方法代替对于对象构造函数的直接调用 （即使用 "),r("code",[t._v("new")]),t._v("运算符）。 不用担心， 对象仍将通过 "),r("code",[t._v("new")]),t._v("运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。)")]),t._v(" "),r("h4",{attrs:{id:"_2-抽象工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-抽象工厂模式"}},[t._v("#")]),t._v(" 2."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"}},[t._v("抽象工厂模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("strong",[t._v("意图")])]),t._v(" "),r("p",[r("strong",[t._v("抽象工厂模式")]),t._v("是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。")]),t._v(" "),r("p",[r("strong",[t._v("抽象工厂模式适合应用场景")])]),t._v(" "),r("p",[t._v("如果代码需要与多个不同系列的相关产品交互， 但是由于无法提前获取相关信息， 或者出于对未来扩展性的考虑， 你不希望代码基于产品的具体类进行构建， 在这种情况下， 你可以使用抽象工厂。")]),t._v(" "),r("p",[t._v("抽象工厂为你提供了一个接口， 可用于创建每个系列产品的对象。 只要代码通过该接口创建对象， 那么你就不会生成与应用程序已生成的产品类型不一致的产品。")]),t._v(" "),r("p",[t._v("如果你有一个基于一组"),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"}},[t._v("抽象方法"),r("OutboundLink")],1),t._v("的类， 且其主要功能因此变得不明确， 那么在这种情况下可以考虑使用抽象工厂模式。")]),t._v(" "),r("p",[t._v("在设计良好的程序中， "),r("em",[t._v("每个类仅负责一件事")]),t._v("。 如果一个类与多种类型产品交互， 就可以考虑将工厂方法抽取到独立的工厂类或具备完整功能的抽象工厂类中。")]),t._v(" "),r("p",[r("strong",[t._v("识别方法：")]),t._v(" 我们可以通过方法来识别该模式——其会返回一个工厂对象。 接下来， 工厂将被用于创建特定的子组件。")]),t._v(" "),r("h4",{attrs:{id:"_3-生成器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-生成器模式"}},[t._v("#")]),t._v(" 3."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"}},[t._v("生成器模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("亦称： 建造者模式、Builder")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("生成器模式")]),t._v("是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。")]),t._v(" "),r("h4",{attrs:{id:"_4-原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型模式"}},[t._v("#")]),t._v(" 4."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"}},[t._v("原型模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("strong",[t._v("亦称：")]),t._v(" 克隆、Clone、Prototype")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("原型模式")]),t._v("是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。")]),t._v(" "),r("h4",{attrs:{id:"_5-单例模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-单例模式"}},[t._v("#")]),t._v(" 5."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"}},[t._v("单例模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("**亦称：**单件模式、Singleton")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("单例模式")]),t._v("是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。")]),t._v(" "),r("h3",{attrs:{id:"结构性模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构性模式"}},[t._v("#")]),t._v(" 结构性模式")]),t._v(" "),r("h4",{attrs:{id:"_6-适配器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-适配器模式"}},[t._v("#")]),t._v(" 6.适配器模式")]),t._v(" "),r("h4",{attrs:{id:"_7-桥接模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-桥接模式"}},[t._v("#")]),t._v(" 7.桥接模式")]),t._v(" "),r("h4",{attrs:{id:"_8-组合模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-组合模式"}},[t._v("#")]),t._v(" 8.组合模式")]),t._v(" "),r("h4",{attrs:{id:"_9-装饰模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-装饰模式"}},[t._v("#")]),t._v(" 9.装饰模式")]),t._v(" "),r("h4",{attrs:{id:"_10-外观模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-外观模式"}},[t._v("#")]),t._v(" 10.外观模式")]),t._v(" "),r("h4",{attrs:{id:"_11-亨元模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-亨元模式"}},[t._v("#")]),t._v(" 11.亨元模式")]),t._v(" "),r("h4",{attrs:{id:"_12-代理模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-代理模式"}},[t._v("#")]),t._v(" 12.代理模式")]),t._v(" "),r("h3",{attrs:{id:"行为模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行为模式"}},[t._v("#")]),t._v(" 行为模式")]),t._v(" "),r("h4",{attrs:{id:"_13-观察者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-观察者模式"}},[t._v("#")]),t._v(" 13.观察者模式")]),t._v(" "),r("h4",{attrs:{id:"_14-模版方法模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-模版方法模式"}},[t._v("#")]),t._v(" 14.模版方法模式")]),t._v(" "),r("h4",{attrs:{id:"_15-访问者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-访问者模式"}},[t._v("#")]),t._v(" 15.访问者模式")]),t._v(" "),r("h4",{attrs:{id:"_16-命令模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-命令模式"}},[t._v("#")]),t._v(" 16.命令模式")]),t._v(" "),r("h4",{attrs:{id:"_17-责任链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17-责任链"}},[t._v("#")]),t._v(" 17.责任链")]),t._v(" "),r("h4",{attrs:{id:"_18-迭代器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18-迭代器"}},[t._v("#")]),t._v(" 18.迭代器")]),t._v(" "),r("h4",{attrs:{id:"_19-中介者"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19-中介者"}},[t._v("#")]),t._v(" 19.中介者")]),t._v(" "),r("h4",{attrs:{id:"_20-备忘录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20-备忘录"}},[t._v("#")]),t._v(" 20.备忘录")]),t._v(" "),r("h4",{attrs:{id:"_21-状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_21-状态"}},[t._v("#")]),t._v(" 21.状态")]),t._v(" "),r("h4",{attrs:{id:"_22-策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_22-策略"}},[t._v("#")]),t._v(" 22.策略")])])}),[],!1,null,null,null);r.default=s.exports}}]);