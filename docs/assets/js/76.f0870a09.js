(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{353:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redis-常见数据类型和应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-常见数据类型和应用场景"}},[t._v("#")]),t._v(" Redis 常见数据类型和应用场景")]),t._v(" "),s("p",[t._v("大家好，我是小林。")]),t._v(" "),s("p",[t._v("我们都知道 Redis 提供了丰富的数据类型，常见的有五种："),s("strong",[t._v("String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）")]),t._v("。")]),t._v(" "),s("p",[t._v("随着 Redis 版本的更新，后面又支持了四种数据类型： "),s("strong",[t._v("BitMap（2.2 版新增）、HyperLogLog（2.8 版新增）、GEO（3.2 版新增）、Stream（5.0 版新增）")]),t._v("。")]),t._v(" "),s("p",[t._v("每种数据对象都各自的应用场景，你能说出它们各自的应用场景吗？")]),t._v(" "),s("p",[t._v("面试过程中，这个问题也很常被问到，又比如会举例一个应用场景来问你，让你说使用哪种 Redis 数据类型来实现。")]),t._v(" "),s("p",[t._v("所以，这次我们就来学习 "),s("strong",[t._v("Redis 数据类型的使用以及应用场景")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("PS：你可以自己本机安装 Redis 或者通过 Redis 官网提供的"),s("a",{attrs:{href:"https://try.redis.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线 Redis 环境 (opens new window)"),s("OutboundLink")],1),t._v("来敲命令。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/redis%E5%91%BD%E4%BB%A4%E6%8F%90%E7%BA%B2.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#string",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("String")]),t._v(" "),s("h3",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("String 是最基本的 key-value 结构，key 是唯一标识，value 是具体的值，value其实不仅是字符串， 也可以是数字（整数或浮点数），value 最多可以容纳的数据长度是 "),s("code",[t._v("512M")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/string.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"内部实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。")]),t._v(" "),s("p",[t._v("SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("SDS 不仅可以保存文本数据，还可以保存二进制数据")]),t._v("。因为 "),s("code",[t._v("SDS")]),t._v(" 使用 "),s("code",[t._v("len")]),t._v(" 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 "),s("code",[t._v("buf[]")]),t._v(" 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。")]),t._v(" "),s("li",[s("strong",[t._v("SDS 获取字符串长度的时间复杂度是 O(1)")]),t._v("。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 "),s("code",[t._v("len")]),t._v(" 属性记录了字符串长度，所以复杂度为 "),s("code",[t._v("O(1)")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出")]),t._v("。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。")])]),t._v(" "),s("p",[t._v("字符串对象的内部编码（encoding）有 3 种 ："),s("strong",[t._v("int、raw和 embstr")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/string%E7%BB%93%E6%9E%84.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如果一个字符串对象保存的是整数值，并且这个整数值可以用"),s("code",[t._v("long")]),t._v("类型来表示，那么字符串对象会将整数值保存在字符串对象结构的"),s("code",[t._v("ptr")]),t._v("属性里面（将"),s("code",[t._v("void*")]),t._v("转换成 long），并将字符串对象的编码设置为"),s("code",[t._v("int")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/int.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如果字符串对象保存的是一个字符串，并且这个字符申的长度小于等于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为"),s("code",[t._v("embstr")]),t._v("， "),s("code",[t._v("embstr")]),t._v("编码是专门用于保存短字符串的一种优化编码方式：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/embstr.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如果字符串对象保存的是一个字符串，并且这个字符串的长度大于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为"),s("code",[t._v("raw")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/raw.png",alt:"img"}})]),t._v(" "),s("p",[t._v("注意，embstr 编码和 raw 编码的边界在 redis 不同版本中是不一样的：")]),t._v(" "),s("ul",[s("li",[t._v("redis 2.+ 是 32 字节")]),t._v(" "),s("li",[t._v("redis 3.0-4.0 是 39 字节")]),t._v(" "),s("li",[t._v("redis 5.0 是 44 字节")])]),t._v(" "),s("p",[t._v("可以看到"),s("code",[t._v("embstr")]),t._v("和"),s("code",[t._v("raw")]),t._v("编码都会使用"),s("code",[t._v("SDS")]),t._v("来保存值，但不同之处在于"),s("code",[t._v("embstr")]),t._v("会通过一次内存分配函数来分配一块连续的内存空间来保存"),s("code",[t._v("redisObject")]),t._v("和"),s("code",[t._v("SDS")]),t._v("，而"),s("code",[t._v("raw")]),t._v("编码会通过调用两次内存分配函数来分别分配两块空间来保存"),s("code",[t._v("redisObject")]),t._v("和"),s("code",[t._v("SDS")]),t._v("。Redis这样做会有很多好处：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("embstr")]),t._v("编码将创建字符串对象所需的内存分配次数从 "),s("code",[t._v("raw")]),t._v(" 编码的两次降低为一次；")]),t._v(" "),s("li",[t._v("释放 "),s("code",[t._v("embstr")]),t._v("编码的字符串对象同样只需要调用一次内存释放函数；")]),t._v(" "),s("li",[t._v("因为"),s("code",[t._v("embstr")]),t._v("编码的字符串对象的所有数据都保存在一块连续的内存里面可以更好的利用 CPU 缓存提升性能。")])]),t._v(" "),s("p",[t._v("但是 embstr 也有缺点的：")]),t._v(" "),s("ul",[s("li",[t._v("如果字符串的长度增加需要重新分配内存时，整个redisObject和sds都需要重新分配空间，所以"),s("strong",[t._v("embstr编码的字符串对象实际上是只读的")]),t._v("，redis没有为embstr编码的字符串对象编写任何相应的修改程序。当我们对embstr编码的字符串对象执行任何修改命令（例如append）时，程序会先将对象的编码从embstr转换成raw，然后再执行修改命令。")])]),t._v(" "),s("h3",{attrs:{id:"常用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常用指令")]),t._v(" "),s("p",[t._v("普通字符串的基本操作：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 key-value 类型的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET name lin\nOK\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据 key 获得对应的 value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET name\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lin"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 判断某个 key 是否存在")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" EXISTS name\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 key 所储存的字符串值的长度")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" STRLEN name\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除某个 key 对应的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DEL name\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("批量设置 :")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 批量设置 key-value 类型的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" MSET key1 value1 key2 value2 \nOK\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 批量获取多个 key 对应的 value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" MGET key1 key2 \n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),t._v("\n")])])]),s("p",[t._v("计数器（字符串的内容为整数的时候可以使用）：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 key-value 类型的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET number "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nOK\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 key 中储存的数字值增一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" INCR number\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将key中存储的数字值加 10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" INCRBY number "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 key 中储存的数字值减一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DECR number\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将key中存储的数字值键 10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DECRBY number "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("p",[t._v("过期（默认为永不过期）：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 key 在 60 秒后过期（该方法是针对已经存在的key设置过期时间）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" EXPIRE name  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看数据还有多久过期")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" TTL name \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("51")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置 key-value 类型的值，并设置该key的过期时间为 60 秒")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET key  value EX "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v("\nOK\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SETEX key  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" value\nOK\n")])])]),s("p",[t._v("不存在就插入：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不存在就插入（not exists）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("SETNX key value\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("h4",{attrs:{id:"缓存对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存对象"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E7%BC%93%E5%AD%98%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("缓存对象")]),t._v(" "),s("p",[t._v("使用 String 来缓存对象有两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("直接缓存整个对象的 JSON，命令例子： "),s("code",[t._v('SET user:1 \'{"name":"xiaolin", "age":18}\'')]),t._v("。")]),t._v(" "),s("li",[t._v("采用将 key 进行分离为 user:ID:属性，采用 MSET 存储，用 MGET 获取各属性值，命令例子： "),s("code",[t._v("MSET user:1:name xiaolin user:1:age 18 user:2:name xiaomei user:2:age 20")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"常规计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常规计数"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E8%A7%84%E8%AE%A1%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常规计数")]),t._v(" "),s("p",[t._v("因为 Redis 处理命令是单线程，所以执行命令的过程是原子的。因此 String 数据类型适合计数场景，比如计算访问次数、点赞、转发、库存数量等等。")]),t._v(" "),s("p",[t._v("比如计算文章的阅读量：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化文章的阅读量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET aritcle:readcount:1001 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nOK\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#阅读量+1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" INCR aritcle:readcount:1001\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#阅读量+1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" INCR aritcle:readcount:1001\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#阅读量+1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" INCR aritcle:readcount:1001\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取对应文章的阅读量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET aritcle:readcount:1001\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v("\n")])])]),s("h4",{attrs:{id:"分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("分布式锁")]),t._v(" "),s("p",[t._v("SET 命令有个 NX 参数可以实现「key不存在才插入」，可以用它来实现分布式锁：")]),t._v(" "),s("ul",[s("li",[t._v("如果 key 不存在，则显示插入成功，可以用来表示加锁成功；")]),t._v(" "),s("li",[t._v("如果 key 存在，则会显示插入失败，可以用来表示加锁失败。")])]),t._v(" "),s("p",[t._v("一般而言，还会对分布式锁加上过期时间，分布式锁的命令如下：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("SET lock_key unique_value NX PX "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\n")])])]),s("ul",[s("li",[t._v("lock_key 就是 key 键；")]),t._v(" "),s("li",[t._v("unique_value 是客户端生成的唯一的标识；")]),t._v(" "),s("li",[t._v("NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；")]),t._v(" "),s("li",[t._v("PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。")])]),t._v(" "),s("p",[t._v("而解锁的过程就是将 lock_key 键删除，但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，我们要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除。")]),t._v(" "),s("p",[t._v("可以看到，解锁是有两个操作，这时就需要 Lua 脚本来保证解锁的原子性，因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，保证了锁释放操作的原子性。")]),t._v(" "),s("div",{staticClass:"language-lua extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lua"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 释放锁时，先比较 unique_value 是否相等，避免锁的误释放\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"del"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),s("p",[t._v("这样一来，就通过使用 SET 命令和 Lua 脚本在 Redis 单节点上完成了分布式锁的加锁和解锁。")]),t._v(" "),s("h4",{attrs:{id:"共享-session-信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享-session-信息"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%85%B1%E4%BA%AB-session-%E4%BF%A1%E6%81%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("共享 Session 信息")]),t._v(" "),s("p",[t._v("通常我们在开发后台管理系统时，会使用 Session 来保存用户的会话(登录)状态，这些 Session 信息会被保存在服务器端，但这只适用于单系统应用，如果是分布式系统此模式将不再适用。")]),t._v(" "),s("p",[t._v("例如用户一的 Session 信息被存储在服务器一，但第二次访问时用户一被分配到服务器二，这个时候服务器并没有用户一的 Session 信息，就会出现需要重复登录的问题，问题在于分布式系统每次会把请求随机分配到不同的服务器。")]),t._v(" "),s("p",[t._v("分布式系统单独存储 Session 流程图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Session1.png",alt:"img"}})]),t._v(" "),s("p",[t._v("因此，我们需要借助 Redis 对这些 Session 信息进行统一的存储和管理，这样无论请求发送到那台服务器，服务器都会去同一个 Redis 获取相关的 Session 信息，这样就解决了分布式系统下 Session 存储的问题。")]),t._v(" "),s("p",[t._v("分布式系统使用同一个 Redis 存储 Session 流程图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Session2.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#list",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("List")]),t._v(" "),s("h3",{attrs:{id:"介绍-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("List 列表是简单的字符串列表，"),s("strong",[t._v("按照插入顺序排序")]),t._v("，可以从头部或尾部向 List 列表添加元素。")]),t._v(" "),s("p",[t._v("列表的最大长度为 "),s("code",[t._v("2^32 - 1")]),t._v("，也即每个列表支持超过 "),s("code",[t._v("40 亿")]),t._v("个元素。")]),t._v(" "),s("h3",{attrs:{id:"内部实现-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("List 类型的底层数据结构是由"),s("strong",[t._v("双向链表或压缩列表")]),t._v("实现的：")]),t._v(" "),s("ul",[s("li",[t._v("如果列表的元素个数小于 "),s("code",[t._v("512")]),t._v(" 个（默认值，可由 "),s("code",[t._v("list-max-ziplist-entries")]),t._v(" 配置），列表每个元素的值都小于 "),s("code",[t._v("64")]),t._v(" 字节（默认值，可由 "),s("code",[t._v("list-max-ziplist-value")]),t._v(" 配置），Redis 会使用"),s("strong",[t._v("压缩列表")]),t._v("作为 List 类型的底层数据结构；")]),t._v(" "),s("li",[t._v("如果列表的元素不满足上面的条件，Redis 会使用"),s("strong",[t._v("双向链表")]),t._v("作为 List 类型的底层数据结构；")])]),t._v(" "),s("p",[t._v("但是"),s("strong",[t._v("在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常用命令")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/list.png",alt:"img"}})]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将一个或多个值value插入到key列表的表头(最左边)，最后的值在最前面")]),t._v("\nLPUSH key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将一个或多个值value插入到key列表的表尾(最右边)")]),t._v("\nRPUSH key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除并返回key列表的头元素")]),t._v("\nLPOP key     \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除并返回key列表的尾元素")]),t._v("\nRPOP key \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回列表key中指定区间内的元素，区间以偏移量start和stop指定，从0开始")]),t._v("\nLRANGE key start stop\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从key列表表头弹出一个元素，没有就阻塞timeout秒，如果timeout=0则一直阻塞")]),t._v("\nBLPOP key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从key列表表尾弹出一个元素，没有就阻塞timeout秒，如果timeout=0则一直阻塞")]),t._v("\nBRPOP key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("h4",{attrs:{id:"消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("消息队列")]),t._v(" "),s("p",[t._v("消息队列在存取消息时，必须要满足三个需求，分别是"),s("strong",[t._v("消息保序、处理重复的消息和保证消息可靠性")]),t._v("。")]),t._v(" "),s("p",[t._v("Redis 的 List 和 Stream 两种数据类型，就可以满足消息队列的这三个需求。我们先来了解下基于 List 的消息队列实现方法，后面在介绍 Stream 数据类型时候，在详细说说 Stream。")]),t._v(" "),s("p",[s("em",[t._v("1、如何满足消息保序需求？")])]),t._v(" "),s("p",[t._v("List 本身就是按先进先出的顺序对数据进行存取的，所以，如果使用 List 作为消息队列保存消息的话，就已经能满足消息保序的需求了。")]),t._v(" "),s("p",[t._v("List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/list%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("生产者使用 "),s("code",[t._v("LPUSH key value[value...]")]),t._v(" 将消息插入到队列的头部，如果 key 不存在则会创建一个空的队列再插入消息。")]),t._v(" "),s("li",[t._v("消费者使用 "),s("code",[t._v("RPOP key")]),t._v(" 依次读取队列的消息，先进先出。")])]),t._v(" "),s("p",[t._v("不过，在消费者读取数据时，有一个潜在的性能风险点。")]),t._v(" "),s("p",[t._v("在生产者往 List 中写入数据时，List 并不会主动地通知消费者有新消息写入，如果消费者想要及时处理消息，就需要在程序中不停地调用 "),s("code",[t._v("RPOP")]),t._v(" 命令（比如使用一个while(1)循环）。如果有新消息写入，RPOP命令就会返回结果，否则，RPOP命令返回空值，再继续循环。")]),t._v(" "),s("p",[t._v("所以，即使没有新消息写入List，消费者也要不停地调用 RPOP 命令，这就会导致消费者程序的 CPU 一直消耗在执行 RPOP 命令上，带来不必要的性能损失。")]),t._v(" "),s("p",[t._v("为了解决这个问题，Redis提供了 BRPOP 命令。"),s("strong",[t._v("BRPOP命令也称为阻塞式读取，客户端在没有读到队列数据时，自动阻塞，直到有新的数据写入队列，再开始读取新数据")]),t._v("。和消费者程序自己不停地调用RPOP命令相比，这种方式能节省CPU开销。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png",alt:"img"}})]),t._v(" "),s("p",[s("em",[t._v("2、如何处理重复的消息？")])]),t._v(" "),s("p",[t._v("消费者要实现重复消息的判断，需要 2 个方面的要求：")]),t._v(" "),s("ul",[s("li",[t._v("每个消息都有一个全局的 ID。")]),t._v(" "),s("li",[t._v("消费者要记录已经处理过的消息的 ID。当收到一条消息后，消费者程序就可以对比收到的消息 ID 和记录的已处理过的消息 ID，来判断当前收到的消息有没有经过处理。如果已经处理过，那么，消费者程序就不再进行处理了。")])]),t._v(" "),s("p",[t._v("但是 "),s("strong",[t._v("List 并不会为每个消息生成 ID 号，所以我们需要自行为每个消息生成一个全局唯一ID")]),t._v("，生成之后，我们在用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID。")]),t._v(" "),s("p",[t._v("例如，我们执行以下命令，就把一条全局 ID 为 111000102、库存量为 99 的消息插入了消息队列：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH mq "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"111000102:stock:99"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[s("em",[t._v("3、如何保证消息可靠性？")])]),t._v(" "),s("p",[t._v("当消费者程序从 List 中读取一条消息后，List 就不会再留存这条消息了。所以，如果消费者程序在处理消息的过程出现了故障或宕机，就会导致消息没有处理完成，那么，消费者程序再次启动后，就没法再次从 List 中读取消息了。")]),t._v(" "),s("p",[t._v("为了留存消息，List 类型提供了 "),s("code",[t._v("BRPOPLPUSH")]),t._v(" 命令，这个命令的"),s("strong",[t._v("作用是让消费者程序从一个 List 中读取消息，同时，Redis 会把这个消息再插入到另一个 List（可以叫作备份 List）留存")]),t._v("。")]),t._v(" "),s("p",[t._v("这样一来，如果消费者程序读了消息但没能正常处理，等它重启后，就可以从备份 List 中重新读取消息并进行处理了。")]),t._v(" "),s("p",[t._v("好了，到这里可以知道基于 List 类型的消息队列，满足消息队列的三大需求（消息保序、处理重复的消息和保证消息可靠性）。")]),t._v(" "),s("ul",[s("li",[t._v("消息保序：使用 LPUSH + RPOP；")]),t._v(" "),s("li",[t._v("阻塞读取：使用 BRPOP；")]),t._v(" "),s("li",[t._v("重复消息处理：生产者自行实现全局唯一 ID；")]),t._v(" "),s("li",[t._v("消息的可靠性：使用 BRPOPLPUSH")])]),t._v(" "),s("blockquote",[s("p",[t._v("List 作为消息队列有什么缺陷？")])]),t._v(" "),s("p",[s("strong",[t._v("List 不支持多个消费者消费同一条消息")]),t._v("，因为一旦消费者拉取一条消息后，这条消息就从 List 中删除了，无法被其它消费者再次消费。")]),t._v(" "),s("p",[t._v("要实现一条消息可以被多个消费者消费，那么就要将多个消费者组成一个消费组，使得多个消费者可以消费同一条消息，但是 "),s("strong",[t._v("List 类型并不支持消费组的实现")]),t._v("。")]),t._v(" "),s("p",[t._v("这就要说起 Redis 从 5.0 版本开始提供的 Stream 数据类型了，Stream 同样能够满足消息队列的三大需求，而且它还支持「消费组」形式的消息读取。")]),t._v(" "),s("h2",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),s("h3",{attrs:{id:"介绍-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍-3"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("Hash 是一个键值对（key - value）集合，其中 value 的形式如： "),s("code",[t._v("value=[{field1，value1}，...{fieldN，valueN}]")]),t._v("。Hash 特别适合用于存储对象。")]),t._v(" "),s("p",[t._v("Hash 与 String 对象的区别如下图所示:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/hash.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"内部实现-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现-3"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("Hash 类型的底层数据结构是由"),s("strong",[t._v("压缩列表或哈希表")]),t._v("实现的：")]),t._v(" "),s("ul",[s("li",[t._v("如果哈希类型元素个数小于 "),s("code",[t._v("512")]),t._v(" 个（默认值，可由 "),s("code",[t._v("hash-max-ziplist-entries")]),t._v(" 配置），所有值小于 "),s("code",[t._v("64")]),t._v(" 字节（默认值，可由 "),s("code",[t._v("hash-max-ziplist-value")]),t._v(" 配置）的话，Redis 会使用"),s("strong",[t._v("压缩列表")]),t._v("作为 Hash 类型的底层数据结构；")]),t._v(" "),s("li",[t._v("如果哈希类型元素不满足上面条件，Redis 会使用"),s("strong",[t._v("哈希表")]),t._v("作为 Hash 类型的 底层数据结构。")])]),t._v(" "),s("p",[s("strong",[t._v("在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"常用命令-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常用命令")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储一个哈希表key的键值")]),t._v("\nHSET key field value   \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取哈希表key对应的field键值")]),t._v("\nHGET key field\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在一个哈希表key中存储多个键值对")]),t._v("\nHMSET key field value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("field value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 批量获取哈希表key中多个field键值")]),t._v("\nHMGET key field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("       \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除哈希表key中的field键值")]),t._v("\nHDEL key field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("field "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回哈希表key中field的数量")]),t._v("\nHLEN key       \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回哈希表key中所有的键值")]),t._v("\nHGETALL key \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为哈希表key中field键的值加上增量n")]),t._v("\nHINCRBY key field n                         \n")])])]),s("h3",{attrs:{id:"应用场景-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-3"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("h4",{attrs:{id:"缓存对象-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存对象-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E7%BC%93%E5%AD%98%E5%AF%B9%E8%B1%A1-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("缓存对象")]),t._v(" "),s("p",[t._v("Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象。")]),t._v(" "),s("p",[t._v("我们以用户信息为例，它在关系型数据库中的结构是这样的：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png",alt:"img"}})]),t._v(" "),s("p",[t._v("我们可以使用如下命令，将用户对象的信息存储到 Hash 类型：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储一个哈希表uid:1的键值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HMSET uid:1 name Tom age "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储一个哈希表uid:2的键值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HMSET uid:2 name Jerry age "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取哈希表用户id为1中所有的键值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HGETALL uid:1\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"15"')]),t._v("\n")])])]),s("p",[t._v("Redis Hash 存储其结构如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/hash%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png",alt:"img"}})]),t._v(" "),s("p",[t._v("在介绍 String 类型的应用场景时有所介绍，String + Json也是存储对象的一种方式，那么存储对象时，到底用 String + json 还是用 Hash 呢？")]),t._v(" "),s("p",[t._v("一般对象用 String + Json 存储，对象中某些频繁变化的属性可以考虑抽出来用 Hash 类型存储。")]),t._v(" "),s("h4",{attrs:{id:"购物车"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#购物车"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E8%B4%AD%E7%89%A9%E8%BD%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("购物车")]),t._v(" "),s("p",[t._v("以用户 id 为 key，商品 id 为 field，商品数量为 value，恰好构成了购物车的3个要素，如下图所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E8%B4%AD%E7%89%A9%E8%BD%A6.png",alt:"img"}})]),t._v(" "),s("p",[t._v("涉及的命令如下：")]),t._v(" "),s("ul",[s("li",[t._v("添加商品："),s("code",[t._v("HSET cart:{用户id} {商品id} 1")])]),t._v(" "),s("li",[t._v("添加数量："),s("code",[t._v("HINCRBY cart:{用户id} {商品id} 1")])]),t._v(" "),s("li",[t._v("商品总数："),s("code",[t._v("HLEN cart:{用户id}")])]),t._v(" "),s("li",[t._v("删除商品："),s("code",[t._v("HDEL cart:{用户id} {商品id}")])]),t._v(" "),s("li",[t._v("获取购物车所有商品："),s("code",[t._v("HGETALL cart:{用户id}")])])]),t._v(" "),s("p",[t._v("当前仅仅是将商品ID存储到了Redis 中，在回显商品具体信息的时候，还需要拿着商品 id 查询一次数据库，获取完整的商品的信息。")]),t._v(" "),s("h2",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#set",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Set")]),t._v(" "),s("h3",{attrs:{id:"介绍-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍-4"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("Set 类型是一个无序并唯一的键值集合，它的存储顺序不会按照插入的先后顺序进行存储。")]),t._v(" "),s("p",[t._v("一个集合最多可以存储 "),s("code",[t._v("2^32-1")]),t._v(" 个元素。概念和数学中个的集合基本类似，可以交集，并集，差集等等，所以 Set 类型除了支持集合内的增删改查，同时还支持多个集合取交集、并集、差集。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/set.png",alt:"img"}})]),t._v(" "),s("p",[t._v("Set 类型和 List 类型的区别如下：")]),t._v(" "),s("ul",[s("li",[t._v("List 可以存储重复元素，Set 只能存储非重复元素；")]),t._v(" "),s("li",[t._v("List 是按照元素的先后顺序存储元素的，而 Set 则是无序方式存储元素的。")])]),t._v(" "),s("h3",{attrs:{id:"内部实现-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现-4"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("Set 类型的底层数据结构是由"),s("strong",[t._v("哈希表或整数集合")]),t._v("实现的：")]),t._v(" "),s("ul",[s("li",[t._v("如果集合中的元素都是整数且元素个数小于 "),s("code",[t._v("512")]),t._v(" （默认值，"),s("code",[t._v("set-maxintset-entries")]),t._v("配置）个，Redis 会使用"),s("strong",[t._v("整数集合")]),t._v("作为 Set 类型的底层数据结构；")]),t._v(" "),s("li",[t._v("如果集合中的元素不满足上面条件，则 Redis 使用"),s("strong",[t._v("哈希表")]),t._v("作为 Set 类型的底层数据结构。")])]),t._v(" "),s("h3",{attrs:{id:"常用命令-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-3"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常用命令")]),t._v(" "),s("p",[t._v("Set常用操作：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 往集合key中存入元素，元素存在则忽略，若key不存在则新建")]),t._v("\nSADD key member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从集合key中删除元素")]),t._v("\nSREM key member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取集合key中所有元素")]),t._v("\nSMEMBERS key\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取集合key中的元素个数")]),t._v("\nSCARD key\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 判断member元素是否存在于集合key中")]),t._v("\nSISMEMBER key member\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从集合key中随机选出count个元素，元素不从key中删除")]),t._v("\nSRANDMEMBER key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从集合key中随机选出count个元素，元素从key中删除")]),t._v("\nSPOP key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("Set运算操作：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 交集运算")]),t._v("\nSINTER key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将交集结果存入新集合destination中")]),t._v("\nSINTERSTORE destination key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 并集运算")]),t._v("\nSUNION key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将并集结果存入新集合destination中")]),t._v("\nSUNIONSTORE destination key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 差集运算")]),t._v("\nSDIFF key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将差集结果存入新集合destination中")]),t._v("\nSDIFFSTORE destination key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-4"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("p",[t._v("集合的主要几个特性，无序、不可重复、支持并交差等操作。")]),t._v(" "),s("p",[t._v("因此 Set 类型比较适合用来数据去重和保障数据的唯一性，还可以用来统计多个集合的交集、错集和并集等，当我们存储的数据是无序并且需要去重的情况下，比较适合使用集合类型进行存储。")]),t._v(" "),s("p",[t._v("但是要提醒你一下，这里有一个潜在的风险。"),s("strong",[t._v("Set 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致 Redis 实例阻塞")]),t._v("。")]),t._v(" "),s("p",[t._v("在主从集群中，为了避免主库因为 Set 做聚合计算（交集、差集、并集）时导致主库被阻塞，我们可以选择一个从库完成聚合统计，或者把数据返回给客户端，由客户端来完成聚合统计。")]),t._v(" "),s("h4",{attrs:{id:"点赞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点赞"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E7%82%B9%E8%B5%9E",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("点赞")]),t._v(" "),s("p",[t._v("Set 类型可以保证一个用户只能点一个赞，这里举例子一个场景，key 是文章id，value 是用户id。")]),t._v(" "),s("p",[s("code",[t._v("uid:1")]),t._v(" 、"),s("code",[t._v("uid:2")]),t._v("、"),s("code",[t._v("uid:3")]),t._v(" 三个用户分别对 article:1 文章点赞了。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uid:1 用户对文章 article:1 点赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD article:1 uid:1\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uid:2 用户对文章 article:1 点赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD article:1 uid:2\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uid:3 用户对文章 article:1 点赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD article:1 uid:3\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[s("code",[t._v("uid:1")]),t._v(" 取消了对 article:1 文章点赞。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> SREM article:1 uid:1\n(integer) 1\n")])])]),s("p",[t._v("获取 article:1 文章所有点赞用户 :")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS article:1\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uid:3"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uid:2"')]),t._v("\n")])])]),s("p",[t._v("获取 article:1 文章的点赞用户数量：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SCARD article:1\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),s("p",[t._v("判断用户 "),s("code",[t._v("uid:1")]),t._v(" 是否对文章 article:1 点赞了：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SISMEMBER article:1 uid:1\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回0说明没点赞，返回1则说明点赞了")]),t._v("\n")])])]),s("h4",{attrs:{id:"共同关注"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共同关注"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%85%B1%E5%90%8C%E5%85%B3%E6%B3%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("共同关注")]),t._v(" "),s("p",[t._v("Set 类型支持交集运算，所以可以用来计算共同关注的好友、公众号等。")]),t._v(" "),s("p",[t._v("key 可以是用户id，value 则是已关注的公众号的id。")]),t._v(" "),s("p",[s("code",[t._v("uid:1")]),t._v(" 用户关注公众号 id 为 5、6、7、8、9，"),s("code",[t._v("uid:2")]),t._v(" 用户关注公众号 id 为 7、8、9、10、11。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uid:1 用户关注公众号 id 为 5、6、7、8、9")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD uid:1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# uid:2  用户关注公众号 id 为 7、8、9、10、11")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD uid:2 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),s("p",[s("code",[t._v("uid:1")]),t._v(" 和 "),s("code",[t._v("uid:2")]),t._v(" 共同关注的公众号：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取共同关注")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SINTER uid:1 uid:2\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"7"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9"')]),t._v("\n")])])]),s("p",[t._v("给 "),s("code",[t._v("uid:2")]),t._v(" 推荐 "),s("code",[t._v("uid:1")]),t._v(" 关注的公众号：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SDIFF uid:1 uid:2\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6"')]),t._v("\n")])])]),s("p",[t._v("验证某个公众号是否同时被 "),s("code",[t._v("uid:1")]),t._v(" 或 "),s("code",[t._v("uid:2")]),t._v(" 关注:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SISMEMBER uid:1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回0，说明关注了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SISMEMBER uid:2 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回0，说明没关注")]),t._v("\n")])])]),s("h4",{attrs:{id:"抽奖活动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽奖活动"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E6%8A%BD%E5%A5%96%E6%B4%BB%E5%8A%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("抽奖活动")]),t._v(" "),s("p",[t._v("存储某活动中中奖的用户名 ，Set 类型因为有去重功能，可以保证同一个用户不会中奖两次。")]),t._v(" "),s("p",[t._v("key为抽奖活动名，value为员工名称，把所有员工名称放入抽奖箱 ：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("SADD lucky Tom Jerry John Sean Marry Lindy Sary Mark\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),s("p",[t._v("如果允许重复中奖，可以使用 SRANDMEMBER 命令。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抽取 1 个一等奖：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SRANDMEMBER lucky "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抽取 2 个二等奖：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SRANDMEMBER lucky "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mark"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jerry"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抽取 3 个三等奖：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SRANDMEMBER lucky "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sary"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jerry"')]),t._v("\n")])])]),s("p",[t._v("如果不允许重复中奖，可以使用 SPOP 命令。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抽取一等奖1个")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SPOP lucky "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sary"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抽取二等奖2个")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SPOP lucky "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jerry"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mark"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 抽取三等奖3个")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SPOP lucky "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sean"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Lindy"')]),t._v("\n")])])]),s("h2",{attrs:{id:"zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#zset",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Zset")]),t._v(" "),s("h3",{attrs:{id:"介绍-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍-5"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("Zset 类型（有序集合类型）相比于 Set 类型多了一个排序属性 score（分值），对于有序集合 ZSet 来说，每个存储元素相当于有两个值组成的，一个是有序集合的元素值，一个是排序值。")]),t._v(" "),s("p",[t._v("有序集合保留了集合不能有重复成员的特性（分值可以重复），但不同的是，有序集合中的元素可以排序。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/zset.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"内部实现-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现-5"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("Zset 类型的底层数据结构是由"),s("strong",[t._v("压缩列表或跳表")]),t._v("实现的：")]),t._v(" "),s("ul",[s("li",[t._v("如果有序集合的元素个数小于 "),s("code",[t._v("128")]),t._v(" 个，并且每个元素的值小于 "),s("code",[t._v("64")]),t._v(" 字节时，Redis 会使用"),s("strong",[t._v("压缩列表")]),t._v("作为 Zset 类型的底层数据结构；")]),t._v(" "),s("li",[t._v("如果有序集合的元素不满足上面的条件，Redis 会使用"),s("strong",[t._v("跳表")]),t._v("作为 Zset 类型的底层数据结构；")])]),t._v(" "),s("p",[s("strong",[t._v("在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。")])]),t._v(" "),s("h3",{attrs:{id:"常用命令-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-4"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),s("p",[t._v("Zset 常用操作：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 往有序集合key中加入带分值元素")]),t._v("\nZADD key score member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("score member"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 往有序集合key中删除元素")]),t._v("\nZREM key member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("                 \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回有序集合key中元素member的分值")]),t._v("\nZSCORE key member\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回有序集合key中元素个数")]),t._v("\nZCARD key \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为有序集合key中元素member的分值加上increment")]),t._v("\nZINCRBY key increment member \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 正序获取有序集合key从start下标到stop下标的元素")]),t._v("\nZRANGE key start stop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHSCORES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 倒序获取有序集合key从start下标到stop下标的元素")]),t._v("\nZREVRANGE key start stop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHSCORES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回有序集合中指定分数区间内的成员，分数由低到高排序。")]),t._v("\nZRANGEBYSCORE key min max "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHSCORES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIMIT offset count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回指定成员区间内的成员，按字典正序排列, 分数必须相同。")]),t._v("\nZRANGEBYLEX key min max "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIMIT offset count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回指定成员区间内的成员，按字典倒序排列, 分数必须相同")]),t._v("\nZREVRANGEBYLEX key max min "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIMIT offset count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("Zset 运算操作（相比于 Set 类型，ZSet 类型没有支持差集运算）：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 并集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积")]),t._v("\nZUNIONSTORE destkey numberkeys key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 交集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积")]),t._v("\nZINTERSTORE destkey numberkeys key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-5"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("p",[t._v("Zset 类型（Sorted Set，有序集合） 可以根据元素的权重来排序，我们可以自己来决定每个元素的权重值。比如说，我们可以根据元素插入 Sorted Set 的时间确定权重值，先插入的元素权重小，后插入的元素权重大。")]),t._v(" "),s("p",[t._v("在面对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，可以优先考虑使用 Sorted Set。")]),t._v(" "),s("h4",{attrs:{id:"排行榜"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排行榜"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E6%8E%92%E8%A1%8C%E6%A6%9C",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("排行榜")]),t._v(" "),s("p",[t._v("有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。")]),t._v(" "),s("p",[t._v("我们以博文点赞排名为例，小林发表了五篇博文，分别获得赞为 200、40、100、50、150。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# arcticle:1 文章获得了200个赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" arcticle:1\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# arcticle:2 文章获得了40个赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v(" arcticle:2\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# arcticle:3 文章获得了100个赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" arcticle:3\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# arcticle:4 文章获得了50个赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" arcticle:4\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# arcticle:5 文章获得了150个赞")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),t._v(" arcticle:5\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("文章 arcticle:4 新增一个赞，可以使用 ZINCRBY 命令（为有序集合key中元素member的分值加上increment）：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZINCRBY user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" arcticle:4\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"51"')]),t._v("\n")])])]),s("p",[t._v("查看某篇文章的赞数，可以使用 ZSCORE 命令（返回有序集合key中元素个数）：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZSCORE user:xiaolin:ranking arcticle:4\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"50"')]),t._v("\n")])])]),s("p",[t._v("获取小林文章赞数最多的 3 篇文章，可以使用 ZREVRANGE 命令（倒序获取有序集合 key 从start下标到stop下标的元素）：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# WITHSCORES 表示把 score 也显示出来")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZREVRANGE user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" WITHSCORES\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arcticle:1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"200"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arcticle:5"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"150"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arcticle:3"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100"')]),t._v("\n")])])]),s("p",[t._v("获取小林 100 赞到 200 赞的文章，可以使用 ZRANGEBYSCORE 命令（返回有序集合中指定分数区间内的成员，分数由低到高排序）：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGEBYSCORE user:xiaolin:ranking "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" WITHSCORES\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arcticle:3"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arcticle:5"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"150"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arcticle:1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"200"')]),t._v("\n")])])]),s("h4",{attrs:{id:"电话、姓名排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电话、姓名排序"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E7%94%B5%E8%AF%9D%E3%80%81%E5%A7%93%E5%90%8D%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("电话、姓名排序")]),t._v(" "),s("p",[t._v("使用有序集合的 "),s("code",[t._v("ZRANGEBYLEX")]),t._v(" 或 "),s("code",[t._v("ZREVRANGEBYLEX")]),t._v(" 可以帮助我们实现电话号码或姓名的排序，我们以 "),s("code",[t._v("ZRANGEBYLEX")]),t._v(" （返回指定成员区间内的成员，按 key 正序排列，分数必须相同）为例。")]),t._v(" "),s("p",[s("strong",[t._v("注意：不要在分数不一致的 SortSet 集合中去使用 ZRANGEBYLEX和 ZREVRANGEBYLEX 指令，因为获取的结果会不准确。")])]),t._v(" "),s("p",[s("em",[t._v("1、电话排序")])]),t._v(" "),s("p",[t._v("我们可以将电话号码存储到 SortSet 中，然后根据需要来获取号段：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD phone "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13100111100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13110114300")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13132110901")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD phone "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13200111100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13210414300")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13252110901")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD phone "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13300111100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13310414300")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13352110901")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),s("p",[t._v("获取所有号码:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGEBYLEX phone - +\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13100111100"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13110114300"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13132110901"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13200111100"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13210414300"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13252110901"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13300111100"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13310414300"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13352110901"')]),t._v("\n")])])]),s("p",[t._v("获取 132 号段的号码：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGEBYLEX phone "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("132")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("133")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13200111100"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13210414300"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13252110901"')]),t._v("\n")])])]),s("p",[t._v("获取132、133号段的号码：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGEBYLEX phone "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("132")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("134")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13200111100"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13210414300"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13252110901"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13300111100"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13310414300"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13352110901"')]),t._v("\n")])])]),s("p",[s("em",[t._v("2、姓名排序")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" zadd names "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" Toumas "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" Jake "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" Bluetuo "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" Gaodeng "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" Aimini "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" Aidehua \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n")])])]),s("p",[t._v("获取所有人的名字:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGEBYLEX names - +\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Aidehua"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Aimini"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bluetuo"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gaodeng"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jake"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Toumas"')]),t._v("\n")])])]),s("p",[t._v("获取名字中大写字母A开头的所有人：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGEBYLEX names "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("A "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Aidehua"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Aimini"')]),t._v("\n")])])]),s("p",[t._v("获取名字中大写字母 C 到 Z 的所有人：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGEBYLEX names "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("C "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Z\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gaodeng"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jake"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Toumas"')]),t._v("\n")])])]),s("h2",{attrs:{id:"bitmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bitmap"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#bitmap",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("BitMap")]),t._v(" "),s("h3",{attrs:{id:"介绍-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍-6"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("Bitmap，即位图，是一串连续的二进制数组（0和1），可以通过偏移量（offset）定位元素。BitMap通过最小的单位bit来进行"),s("code",[t._v("0|1")]),t._v("的设置，表示某个元素的值或者状态，时间复杂度为O(1)。")]),t._v(" "),s("p",[t._v("由于 bit 是计算机中最小的单位，使用它进行储存将非常节省空间，特别适合一些数据量大且使用"),s("strong",[t._v("二值统计的场景")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/bitmap.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"内部实现-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现-6"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("Bitmap 本身是用 String 类型作为底层数据结构实现的一种统计二值状态的数据类型。")]),t._v(" "),s("p",[t._v("String 类型是会保存为二进制的字节数组，所以，Redis 就把字节数组的每个 bit 位利用起来，用来表示一个元素的二值状态，你可以把 Bitmap 看作是一个 bit 数组。")]),t._v(" "),s("h3",{attrs:{id:"常用命令-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-5"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常用命令")]),t._v(" "),s("p",[t._v("bitmap 基本操作：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置值，其中value只能是 0 和 1")]),t._v("\nSETBIT key offset value\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取值")]),t._v("\nGETBIT key offset\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取指定范围内值为 1 的个数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# start 和 end 以字节为单位")]),t._v("\nBITCOUNT key start end\n")])])]),s("p",[t._v("bitmap 运算操作：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BitMap间的运算")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# operations 位移操作符，枚举值")]),t._v("\n  AND 与运算 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n  OR 或运算 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  XOR 异或 ^\n  NOT 取反 ~\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# result 计算的结果，会存储在该key中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# key1 … keyn 参与运算的key，可以有多个，空格分割，not运算只能一个key")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 0。返回值是保存到 destkey 的字符串的长度（以字节byte为单位），和输入 key 中最长的字符串长度相等。")]),t._v("\nBITOP "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("operations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("keyn…"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回指定key中第一次出现指定value(0/1)的位置")]),t._v("\nBITPOS "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-6"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("p",[t._v("Bitmap 类型非常适合二值状态统计的场景，这里的二值状态就是指集合元素的取值就只有 0 和 1 两种，在记录海量数据时，Bitmap 能够有效地节省内存空间。")]),t._v(" "),s("h4",{attrs:{id:"签到统计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#签到统计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E7%AD%BE%E5%88%B0%E7%BB%9F%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("签到统计")]),t._v(" "),s("p",[t._v("在签到打卡的场景中，我们只用记录签到（1）或未签到（0），所以它就是非常典型的二值状态。")]),t._v(" "),s("p",[t._v("签到统计时，每个用户一天的签到用 1 个 bit 位就能表示，一个月（假设是 31 天）的签到情况用 31 个 bit 位就可以，而一年的签到也只需要用 365 个 bit 位，根本不用太复杂的集合类型。")]),t._v(" "),s("p",[t._v("假设我们要统计 ID 100 的用户在 2022 年 6 月份的签到情况，就可以按照下面的步骤进行操作。")]),t._v(" "),s("p",[t._v("第一步，执行下面的命令，记录该用户 6 月 3 号已签到。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("SETBIT uid:sign:100:202206 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("第二步，检查该用户 6 月 3 日是否签到。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("GETBIT uid:sign:100:202206 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n")])])]),s("p",[t._v("第三步，统计该用户在 6 月份的签到次数。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("BITCOUNT uid:sign:100:202206\n")])])]),s("p",[t._v("这样，我们就知道该用户在 6 月份的签到情况了。")]),t._v(" "),s("blockquote",[s("p",[t._v("如何统计这个月首次打卡时间呢？")])]),t._v(" "),s("p",[t._v("Redis 提供了 "),s("code",[t._v("BITPOS key bitValue [start] [end]")]),t._v("指令，返回数据表示 Bitmap 中第一个值为 "),s("code",[t._v("bitValue")]),t._v(" 的 offset 位置。")]),t._v(" "),s("p",[t._v("在默认情况下， 命令将检测整个位图， 用户可以通过可选的 "),s("code",[t._v("start")]),t._v(" 参数和 "),s("code",[t._v("end")]),t._v(" 参数指定要检测的范围。所以我们可以通过执行这条命令来获取 userID = 100 在 2022 年 6 月份"),s("strong",[t._v("首次打卡")]),t._v("日期：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("BITPOS uid:sign:100:202206 1\n")])])]),s("p",[t._v("需要注意的是，因为 offset 从 0 开始的，所以我们需要将返回的 value + 1 。")]),t._v(" "),s("h4",{attrs:{id:"判断用户登陆态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断用户登陆态"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86%E6%80%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("判断用户登陆态")]),t._v(" "),s("p",[t._v("Bitmap 提供了 "),s("code",[t._v("GETBIT、SETBIT")]),t._v(" 操作，通过一个偏移值 offset 对 bit 数组的 offset 位置的 bit 位进行读写操作，需要注意的是 offset 从 0 开始。")]),t._v(" "),s("p",[t._v("只需要一个 key = login_status 表示存储用户登陆状态集合数据， 将用户 ID 作为 offset，在线就设置为 1，下线设置 0。通过 "),s("code",[t._v("GETBIT")]),t._v("判断对应的用户是否在线。 5000 万用户只需要 6 MB 的空间。")]),t._v(" "),s("p",[t._v("假如我们要判断 ID = 10086 的用户的登陆情况：")]),t._v(" "),s("p",[t._v("第一步，执行以下指令，表示用户已登录。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("SETBIT login_status "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10086")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("第二步，检查该用户是否登陆，返回值 1 表示已登录。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("GETBIT login_status 10086\n")])])]),s("p",[t._v("第三步，登出，将 offset 对应的 value 设置成 0。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("SETBIT login_status "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10086")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("h4",{attrs:{id:"连续签到用户总数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连续签到用户总数"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E8%BF%9E%E7%BB%AD%E7%AD%BE%E5%88%B0%E7%94%A8%E6%88%B7%E6%80%BB%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("连续签到用户总数")]),t._v(" "),s("p",[t._v("如何统计出这连续 7 天连续打卡用户总数呢？")]),t._v(" "),s("p",[t._v("我们把每天的日期作为 Bitmap 的 key，userId 作为 offset，若是打卡则将 offset 位置的 bit 设置成 1。")]),t._v(" "),s("p",[t._v("key 对应的集合的每个 bit 位的数据则是一个用户在该日期的打卡记录。")]),t._v(" "),s("p",[t._v("一共有 7 个这样的 Bitmap，如果我们能对这 7 个 Bitmap 的对应的 bit 位做 『与』运算。同样的 UserID offset 都是一样的，当一个 userID 在 7 个 Bitmap 对应对应的 offset 位置的 bit = 1 就说明该用户 7 天连续打卡。")]),t._v(" "),s("p",[t._v("结果保存到一个新 Bitmap 中，我们再通过 "),s("code",[t._v("BITCOUNT")]),t._v(" 统计 bit = 1 的个数便得到了连续打卡 7 天的用户总数了。")]),t._v(" "),s("p",[t._v("Redis 提供了 "),s("code",[t._v("BITOP operation destkey key [key ...]")]),t._v("这个指令用于对一个或者多个 key 的 Bitmap 进行位元操作。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("operation")]),t._v(" 可以是 "),s("code",[t._v("and")]),t._v("、"),s("code",[t._v("OR")]),t._v("、"),s("code",[t._v("NOT")]),t._v("、"),s("code",[t._v("XOR")]),t._v("。当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 "),s("code",[t._v("0")]),t._v(" 。空的 "),s("code",[t._v("key")]),t._v(" 也被看作是包含 "),s("code",[t._v("0")]),t._v(" 的字符串序列。")])]),t._v(" "),s("p",[t._v("假设要统计 3 天连续打卡的用户数，则是将三个 bitmap 进行 AND 操作，并将结果保存到 destmap 中，接着对 destmap 执行 BITCOUNT 统计，如下命令：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 与操作")]),t._v("\nBITOP AND destmap bitmap:01 bitmap:02 bitmap:03\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 统计 bit 位 =  1 的个数")]),t._v("\nBITCOUNT destmap\n")])])]),s("p",[t._v("即使一天产生一个亿的数据，Bitmap 占用的内存也不大，大约占 12 MB 的内存（10^8/8/1024/1024），7 天的 Bitmap 的内存开销约为 84 MB。同时我们最好给 Bitmap 设置过期时间，让 Redis 删除过期的打卡数据，节省内存。")]),t._v(" "),s("h2",{attrs:{id:"hyperloglog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#hyperloglog",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("HyperLogLog")]),t._v(" "),s("h3",{attrs:{id:"介绍-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍-7"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("Redis HyperLogLog 是 Redis 2.8.9 版本新增的数据类型，是一种用于「统计基数」的数据集合类型，基数统计就是指统计一个集合中不重复的元素个数。但要注意，HyperLogLog 是统计规则是基于概率完成的，不是非常准确，标准误算率是 0.81%。")]),t._v(" "),s("p",[t._v("所以，简单来说 HyperLogLog "),s("strong",[t._v("提供不精确的去重计数")]),t._v("。")]),t._v(" "),s("p",[t._v("HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的内存空间总是固定的、并且是很小的。")]),t._v(" "),s("p",[t._v("在 Redis 里面，"),s("strong",[t._v("每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 "),s("code",[t._v("2^64")]),t._v(" 个不同元素的基数")]),t._v("，和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。")]),t._v(" "),s("p",[t._v("这什么概念？举个例子给大家对比一下。")]),t._v(" "),s("p",[t._v("用 Java 语言来说，一般 long 类型占用 8 字节，而 1 字节有 8 位，即：1 byte = 8 bit，即 long 数据类型最大可以表示的数是："),s("code",[t._v("2^63-1")]),t._v("。对应上面的"),s("code",[t._v("2^64")]),t._v("个数，假设此时有"),s("code",[t._v("2^63-1")]),t._v("这么多个数，从 "),s("code",[t._v("0 ~ 2^63-1")]),t._v("，按照"),s("code",[t._v("long")]),t._v("以及"),s("code",[t._v("1k = 1024 字节")]),t._v("的规则来计算内存总数，就是："),s("code",[t._v("((2^63-1) * 8/1024)K")]),t._v("，这是很庞大的一个数，存储空间远远超过"),s("code",[t._v("12K")]),t._v("，而 "),s("code",[t._v("HyperLogLog")]),t._v(" 却可以用 "),s("code",[t._v("12K")]),t._v(" 就能统计完。")]),t._v(" "),s("h3",{attrs:{id:"内部实现-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现-7"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("HyperLogLog 的实现涉及到很多数学问题，太费脑子了，我也没有搞懂，如果你想了解一下，课下可以看看这个："),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/HyperLogLog",target:"_blank",rel:"noopener noreferrer"}},[t._v("HyperLogLog (opens new window)"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"常见命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见命令"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常见命令")]),t._v(" "),s("p",[t._v("HyperLogLog 命令很少，就三个。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加指定元素到 HyperLogLog 中")]),t._v("\nPFADD key element "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("element "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回给定 HyperLogLog 的基数估算值。")]),t._v("\nPFCOUNT key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将多个 HyperLogLog 合并为一个 HyperLogLog")]),t._v("\nPFMERGE destkey sourcekey "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sourcekey "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-7"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("h4",{attrs:{id:"百万级网页-uv-计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#百万级网页-uv-计数"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E7%99%BE%E4%B8%87%E7%BA%A7%E7%BD%91%E9%A1%B5-uv-%E8%AE%A1%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("百万级网页 UV 计数")]),t._v(" "),s("p",[t._v("Redis HyperLogLog 优势在于只需要花费 12 KB 内存，就可以计算接近 2^64 个元素的基数，和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。")]),t._v(" "),s("p",[t._v("所以，非常适合统计百万级以上的网页 UV 的场景。")]),t._v(" "),s("p",[t._v("在统计 UV 时，你可以用 PFADD 命令（用于向 HyperLogLog 中添加新元素）把访问页面的每个用户都添加到 HyperLogLog 中。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("PFADD page1:uv user1 user2 user3 user4 user5\n")])])]),s("p",[t._v("接下来，就可以用 PFCOUNT 命令直接获得 page1 的 UV 值了，这个命令的作用就是返回 HyperLogLog 的统计结果。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("PFCOUNT page1:uv\n")])])]),s("p",[t._v("不过，有一点需要你注意一下，HyperLogLog 的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误算率是 0.81%。")]),t._v(" "),s("p",[t._v("这也就意味着，你使用 HyperLogLog 统计的 UV 是 100 万，但实际的 UV 可能是 101 万。虽然误差率不算大，但是，如果你需要精确统计结果的话，最好还是继续用 Set 或 Hash 类型。")]),t._v(" "),s("h2",{attrs:{id:"geo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#geo"}},[t._v("#")]),t._v(" GEO")]),t._v(" "),s("p",[t._v("Redis GEO 是 Redis 3.2 版本新增的数据类型，主要用于存储地理位置信息，并对存储的信息进行操作。")]),t._v(" "),s("p",[t._v("在日常生活中，我们越来越依赖搜索“附近的餐馆”、在打车软件上叫车，这些都离不开基于位置信息服务（Location-Based Service，LBS）的应用。LBS 应用访问的数据是和人或物关联的一组经纬度信息，而且要能查询相邻的经纬度范围，GEO 就非常适合应用在 LBS 服务的场景中。")]),t._v(" "),s("h3",{attrs:{id:"内部实现-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部实现-8"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("内部实现")]),t._v(" "),s("p",[t._v("GEO 本身并没有设计新的底层数据结构，而是直接使用了 Sorted Set 集合类型。")]),t._v(" "),s("p",[t._v("GEO 类型使用 GeoHash 编码方法实现了经纬度到 Sorted Set 中元素权重分数的转换，这其中的两个关键机制就是「对二维地图做区间划分」和「对区间进行编码」。一组经纬度落在某个区间后，就用区间的编码值来表示，并把编码值作为 Sorted Set 元素的权重分数。")]),t._v(" "),s("p",[t._v("这样一来，我们就可以把经纬度保存到 Sorted Set 中，利用 Sorted Set 提供的“按权重进行有序范围查找”的特性，实现 LBS 服务中频繁使用的“搜索附近”的需求。")]),t._v(" "),s("h3",{attrs:{id:"常用命令-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-6"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常用命令")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中。")]),t._v("\nGEOADD key longitude latitude member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("longitude latitude member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。")]),t._v("\nGEOPOS key member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回两个给定位置之间的距离。")]),t._v("\nGEODIST key member1 member2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("km"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ft"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("mi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。")]),t._v("\nGEORADIUS key longitude latitude radius m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("km"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ft"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("mi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHCOORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHDIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHHASH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COUNT count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ASC"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("DESC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("STORE key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("STOREDIST key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"应用场景-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-8"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("h4",{attrs:{id:"滴滴叫车"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#滴滴叫车"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E6%BB%B4%E6%BB%B4%E5%8F%AB%E8%BD%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("滴滴叫车")]),t._v(" "),s("p",[t._v("这里以滴滴叫车的场景为例，介绍下具体如何使用 GEO 命令：GEOADD 和 GEORADIUS 这两个命令。")]),t._v(" "),s("p",[t._v("假设车辆 ID 是 33，经纬度位置是（116.034579，39.030452），我们可以用一个 GEO 集合保存所有车辆的经纬度，集合 key 是 cars:locations。")]),t._v(" "),s("p",[t._v("执行下面的这个命令，就可以把 ID 号为 33 的车辆的当前经纬度位置存入 GEO 集合中：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("GEOADD cars:locations "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("116.034579")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39.030452")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),t._v("\n")])])]),s("p",[t._v("当用户想要寻找自己附近的网约车时，LBS 应用就可以使用 GEORADIUS 命令。")]),t._v(" "),s("p",[t._v("例如，LBS 应用执行下面的命令时，Redis 会根据输入的用户的经纬度信息（116.054579，39.030452 ），查找以这个经纬度为中心的 5 公里内的车辆信息，并返回给 LBS 应用。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("GEORADIUS cars:locations "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("116.054579")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39.030452")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" km ASC COUNT "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])]),s("h2",{attrs:{id:"stream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stream"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#stream",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Stream")]),t._v(" "),s("h3",{attrs:{id:"介绍-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍-8"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E4%BB%8B%E7%BB%8D-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("介绍")]),t._v(" "),s("p",[t._v("Redis Stream 是 Redis 5.0 版本新增加的数据类型，Redis 专门为消息队列设计的数据类型。")]),t._v(" "),s("p",[t._v("在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如：")]),t._v(" "),s("ul",[s("li",[t._v("发布订阅模式，不能持久化也就无法可靠的保存消息，并且对于离线重连的客户端不能读取历史消息的缺陷；")]),t._v(" "),s("li",[t._v("List 实现消息队列的方式不能重复消费，一个消息消费完就会被删除，而且生产者需要自行实现全局唯一 ID。")])]),t._v(" "),s("p",[t._v("基于以上问题，Redis 5.0 便推出了 Stream 类型也是此版本最重要的功能，用于完美地实现消息队列，它支持消息的持久化、支持自动生成全局唯一 ID、支持 ack 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠。")]),t._v(" "),s("h3",{attrs:{id:"常见命令-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见命令-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("常见命令")]),t._v(" "),s("p",[t._v("Stream 消息队列操作命令：")]),t._v(" "),s("ul",[s("li",[t._v("XADD：插入消息，保证有序，可以自动生成全局唯一 ID；")]),t._v(" "),s("li",[t._v("XLEN ：查询消息长度；")]),t._v(" "),s("li",[t._v("XREAD：用于读取消息，可以按 ID 读取数据；")]),t._v(" "),s("li",[t._v("XDEL ： 根据消息 ID 删除消息；")]),t._v(" "),s("li",[t._v("DEL ：删除整个 Stream；")]),t._v(" "),s("li",[t._v("XRANGE ：读取区间消息")]),t._v(" "),s("li",[t._v("XREADGROUP：按消费组形式读取消息；")]),t._v(" "),s("li",[t._v("XPENDING 和 XACK：\n"),s("ul",[s("li",[t._v("XPENDING 命令可以用来查询每个消费组内所有消费者「已读取、但尚未确认」的消息；")]),t._v(" "),s("li",[t._v("XACK 命令用于向消息队列确认消息处理已完成；")])])])]),t._v(" "),s("h3",{attrs:{id:"应用场景-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-9"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-9",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("应用场景")]),t._v(" "),s("h4",{attrs:{id:"消息队列-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息队列-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("消息队列")]),t._v(" "),s("p",[t._v("生产者通过 XADD 命令插入一条消息：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# * 表示让 Redis 为插入的数据自动生成一个全局唯一的 ID")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 往名称为 mymq 的消息队列中插入一条消息，消息的键是 name，值是 xiaolin")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XADD mymq * name xiaolin\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654254953808-0"')]),t._v("\n")])])]),s("p",[t._v('插入成功后会返回全局唯一的 ID："1654254953808-0"。消息的全局唯一 ID 由两部分组成：')]),t._v(" "),s("ul",[s("li",[t._v("第一部分“1654254953808”是数据插入时，以毫秒为单位计算的当前服务器时间；")]),t._v(" "),s("li",[t._v("第二部分表示插入消息在当前毫秒内的消息序号，这是从 0 开始编号的。例如，“1654254953808-0”就表示在“1654254953808”毫秒内的第 1 条消息。")])]),t._v(" "),s("p",[t._v("消费者通过 XREAD 命令从消息队列中读取消息时，可以指定一个消息 ID，并从这个消息 ID 的下一条消息开始进行读取（注意是输入消息 ID 的下一条信息开始读取，不是查询输入ID的消息）。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从 ID 号为 1654254953807-0 的消息开始，读取后续的所有消息（示例中一共 1 条）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREAD STREAMS mymq "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1654254953807")]),t._v("-0\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymq"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654254953808-0"')]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiaolin"')]),t._v("\n")])])]),s("p",[t._v("如果"),s("strong",[t._v("想要实现阻塞读（当没有数据时，阻塞住），可以调用 XRAED 时设定 BLOCK 配置项")]),t._v("，实现类似于 BRPOP 的阻塞读取操作。")]),t._v(" "),s("p",[t._v("比如，下面这命令，设置了 BLOCK 10000 的配置项，10000 的单位是毫秒，表明 XREAD 在读取最新消息时，如果没有消息到来，XREAD 将阻塞 10000 毫秒（即 10 秒），然后再返回。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令最后的“$”符号表示读取最新的消息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREAD BLOCK "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" STREAMS mymq $\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(".00s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Stream 的基础方法，使用 xadd 存入消息和 xread 循环阻塞读取消息的方式可以实现简易版的消息队列，交互流程如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/Stream%E7%AE%80%E6%98%93.png",alt:"img"}})]),t._v(" "),s("blockquote",[s("p",[t._v("前面介绍的这些操作 List 也支持的，接下来看看 Stream 特有的功能。")])]),t._v(" "),s("p",[t._v("Stream 可以以使用 "),s("strong",[t._v("XGROUP 创建消费组")]),t._v("，创建消费组之后，Stream 可以使用 XREADGROUP 命令让消费组内的消费者读取消息。")]),t._v(" "),s("p",[t._v("创建两个消费组，这两个消费组消费的消息队列是 mymq，都指定从第一条消息开始读取：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个名为 group1 的消费组，0-0 表示从第一条消息开始读取。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XGROUP CREATE mymq group1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-0\nOK\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个名为 group2 的消费组，0-0 表示从第一条消息开始读取。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XGROUP CREATE mymq group2 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("-0\nOK\n")])])]),s("p",[t._v("消费组 group1 内的消费者 consumer1 从 mymq 消息队列中读取所有消息的命令如下：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令最后的参数“>”，表示从第一条尚未被消费的消息开始读取。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREADGROUP GROUP group1 consumer1 STREAMS mymq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymq"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654254953808-0"')]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiaolin"')]),t._v("\n")])])]),s("p",[s("strong",[t._v("消息队列中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取了，即同一个消费组里的消费者不能消费同一条消息")]),t._v("。")]),t._v(" "),s("p",[t._v("比如说，我们执行完刚才的 XREADGROUP 命令后，再执行一次同样的命令，此时读到的就是空值了：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREADGROUP GROUP group1 consumer1 STREAMS mymq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("但是，"),s("strong",[t._v("不同消费组的消费者可以消费同一条消息（但是有前提条件，创建消息组的时候，不同消费组指定了相同位置开始读取消息）")]),t._v("。")]),t._v(" "),s("p",[t._v("比如说，刚才 group1 消费组里的 consumer1 消费者消费了一条 id 为 1654254953808-0 的消息，现在用 group2 消费组里的 consumer1 消费者消费消息：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREADGROUP GROUP group2 consumer1 STREAMS mymq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymq"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654254953808-0"')]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiaolin"')]),t._v("\n")])])]),s("p",[t._v("因为我创建两组的消费组都是从第一条消息开始读取，所以可以看到第二组的消费者依然可以消费 id 为 1654254953808-0 的这一条消息。因此，不同的消费组的消费者可以消费同一条消息。")]),t._v(" "),s("p",[t._v("使用消费组的目的是让组内的多个消费者共同分担读取消息，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。")]),t._v(" "),s("p",[t._v("例如，我们执行下列命令，让 group2 中的 consumer1、2、3 各自读取一条消息。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 group2 中的 consumer1 从 mymq 消息队列中消费一条消息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREADGROUP GROUP group2 consumer1 COUNT "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" STREAMS mymq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymq"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654254953808-0"')]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiaolin"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 group2 中的 consumer2 从 mymq 消息队列中消费一条消息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREADGROUP GROUP group2 consumer2 COUNT "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" STREAMS mymq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymq"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654256265584-0"')]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiaolincoding"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 group2 中的 consumer3 从 mymq 消息队列中消费一条消息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XREADGROUP GROUP group2 consumer3 COUNT "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" STREAMS mymq "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mymq"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654256271337-0"')]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom"')]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息？")])]),t._v(" "),s("p",[t._v("Streams 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，直到消费者使用 XACK 命令通知 Streams“消息已经处理完成”。")]),t._v(" "),s("p",[t._v("消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成，整个流程的执行如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如果消费者没有成功处理消息，它就不会给 Streams 发送 XACK 命令，消息仍然会留存。此时，"),s("strong",[t._v("消费者可以在重启后，用 XPENDING 命令查看已读取、但尚未确认处理完成的消息")]),t._v("。")]),t._v(" "),s("p",[t._v("例如，我们来查看一下 group2 中各个消费者已读取、但尚未确认的消息个数，命令如下：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:637"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("9")]),t._v(">")]),t._v(" XPENDING mymq group2\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654254953808-0"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示 group2 中所有消费者读取的消息最小 ID")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654256271337-0"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示 group2 中所有消费者读取的消息最大 ID")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"consumer1"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"consumer2"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"consumer3"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n")])])]),s("p",[t._v("如果想查看某个消费者具体读取了哪些数据，可以执行下面的命令：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 group2 里 consumer2 已从 mymq 消息队列中读取了哪些消息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XPENDING mymq group2 - + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" consumer2\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1654256265584-0"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"consumer2"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("410700")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("可以看到，consumer2 已读取的消息的 ID 是 1654256265584-0。")]),t._v(" "),s("p",[s("strong",[t._v("一旦消息 1654256265584-0 被 consumer2 处理了，consumer2 就可以使用 XACK 命令通知 Streams，然后这条消息就会被删除")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XACK mymq group2 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1654256265584")]),t._v("-0\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("当我们再使用 XPENDING 命令查看时，就可以看到，consumer2 已经没有已读取、但尚未确认处理的消息了。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XPENDING mymq group2 - + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" consumer2\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("好了，基于 Stream 实现的消息队列就说到这里了，小结一下：")]),t._v(" "),s("ul",[s("li",[t._v("消息保序：XADD/XREAD")]),t._v(" "),s("li",[t._v("阻塞读取：XREAD block")]),t._v(" "),s("li",[t._v("重复消息处理：Stream 在使用 XADD 命令，会自动生成全局唯一 ID；")]),t._v(" "),s("li",[t._v("消息可靠性：内部使用 PENDING List 自动保存消息，使用 XPENDING 命令查看消费组已经读取但是未被确认的消息，消费者使用 XACK 确认消息；")]),t._v(" "),s("li",[t._v("支持消费组形式消费数据")])]),t._v(" "),s("blockquote",[s("p",[t._v("Redis 基于 Stream 消息队列与专业的消息队列有哪些差距？")])]),t._v(" "),s("p",[t._v("一个专业的消息队列，必须要做到两大块：")]),t._v(" "),s("ul",[s("li",[t._v("消息不丢。")]),t._v(" "),s("li",[t._v("消息可堆积。")])]),t._v(" "),s("p",[s("em",[t._v("1、Redis Stream 消息会丢失吗？")])]),t._v(" "),s("p",[t._v("使用一个消息队列，其实就分为三大块："),s("strong",[t._v("生产者、队列中间件、消费者")]),t._v("，所以要保证消息就是保证三个环节都不能丢失数据。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.png",alt:"img"}})]),t._v(" "),s("p",[t._v("Redis Stream 消息队列能不能保证三个环节都不丢失数据？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Redis 生产者会不会丢消息？生产者会不会丢消息，取决于生产者对于异常情况的处理是否合理。 从消息被生产出来，然后提交给 MQ 的过程中，只要能正常收到 （ MQ 中间件） 的 ack 确认响应，就表示发送成功，所以只要处理好返回值和异常，如果返回异常则进行消息重发，那么这个阶段是不会出现消息丢失的。")])]),t._v(" "),s("li",[s("p",[t._v("Redis 消费者会不会丢消息？不会，因为 Stream （ MQ 中间件）会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，但是未被确认的消息。消费者可以在重启后，用 XPENDING 命令查看已读取、但尚未确认处理完成的消息。等到消费者执行完业务逻辑后，再发送消费确认 XACK 命令，也能保证消息的不丢失。")])]),t._v(" "),s("li",[s("p",[t._v("Redis 消息中间件会不会丢消息？")]),t._v(" "),s("p",[t._v("会")]),t._v(" "),s("p",[t._v("，Redis 在以下 2 个场景下，都会导致数据丢失：")]),t._v(" "),s("ul",[s("li",[t._v("AOF 持久化配置为每秒写盘，但这个写盘过程是异步的，Redis 宕机时会存在数据丢失的可能")]),t._v(" "),s("li",[t._v("主从复制也是异步的，"),s("a",{attrs:{href:"https://xiaolincoding.com/redis/cluster/master_slave_replication.html#redis-%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1",target:"_blank",rel:"noopener noreferrer"}},[t._v("主从切换时，也存在丢失数据的可能 (opens new window)"),s("OutboundLink")],1),t._v("。")])])])]),t._v(" "),s("p",[t._v("可以看到，Redis 在队列中间件环节无法保证消息不丢。像 RabbitMQ 或 Kafka 这类专业的队列中间件，在使用时是部署一个集群，生产者在发布消息时，队列中间件通常会写「多个节点」，也就是有多个副本，这样一来，即便其中一个节点挂了，也能保证集群的数据不丢失。")]),t._v(" "),s("p",[s("em",[t._v("2、Redis Stream 消息可堆积吗？")])]),t._v(" "),s("p",[t._v("Redis 的数据都存储在内存中，这就意味着一旦发生消息积压，则会导致 Redis 的内存持续增长，如果超过机器内存上限，就会面临被 OOM 的风险。")]),t._v(" "),s("p",[t._v("所以 Redis 的 Stream 提供了可以指定队列最大长度的功能，就是为了避免这种情况发生。")]),t._v(" "),s("p",[t._v("当指定队列最大长度时，队列长度超过上限后，旧消息会被删除，只保留固定长度的新消息。这么来看，Stream 在消息积压时，如果指定了最大长度，还是有可能丢失消息的。")]),t._v(" "),s("p",[t._v("但 Kafka、RabbitMQ 专业的消息队列它们的数据都是存储在磁盘上，当消息积压时，无非就是多占用一些磁盘空间。")]),t._v(" "),s("p",[t._v("因此，把 Redis 当作队列来使用时，会面临的 2 个问题：")]),t._v(" "),s("ul",[s("li",[t._v("Redis 本身可能会丢数据；")]),t._v(" "),s("li",[t._v("面对消息挤压，内存资源会紧张；")])]),t._v(" "),s("p",[t._v("所以，能不能将 Redis 作为消息队列来使用，关键看你的业务场景：")]),t._v(" "),s("ul",[s("li",[t._v("如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。")]),t._v(" "),s("li",[t._v("如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。")])]),t._v(" "),s("blockquote",[s("p",[t._v("补充：Redis 发布/订阅机制为什么不可以作为消息队列？")])]),t._v(" "),s("p",[t._v("发布订阅机制存在以下缺点，都是跟丢失数据有关：")]),t._v(" "),s("ol",[s("li",[t._v("发布/订阅机制没有基于任何数据类型实现，所以不具备「数据持久化」的能力，也就是发布/订阅机制的相关操作，不会写入到 RDB 和 AOF 中，当 Redis 宕机重启，发布/订阅机制的数据也会全部丢失。")]),t._v(" "),s("li",[t._v("发布订阅模式是“发后既忘”的工作模式，如果有订阅者离线重连之后不能消费之前的历史消息。")]),t._v(" "),s("li",[t._v("当消费端有一定的消息积压时，也就是生产者发送的消息，消费者消费不过来时，如果超过 32M 或者是 60s 内持续保持在 8M 以上，消费端会被强行断开，这个参数是在配置文件中设置的，默认值是 "),s("code",[t._v("client-output-buffer-limit pubsub 32mb 8mb 60")]),t._v("。")])]),t._v(" "),s("p",[t._v("所以，发布/订阅机制只适合即时通讯的场景，比如"),s("a",{attrs:{href:"https://xiaolincoding.com/redis/cluster/sentinel.html#%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E6%88%90%E7%9A%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("构建哨兵集群 (opens new window)"),s("OutboundLink")],1),t._v("的场景采用了发布/订阅机制。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/command.html#%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("总结")]),t._v(" "),s("p",[t._v("Redis 常见的五种数据类型："),s("strong",[t._v("String（字符串），Hash（哈希），List（列表），Set（集合）及 Zset(sorted set：有序集合)")]),t._v("。")]),t._v(" "),s("p",[t._v("这五种数据类型都由多种数据结构实现的，主要是出于时间和空间的考虑，当数据量小的时候使用更简单的数据结构，有利于节省内存，提高性能。")]),t._v(" "),s("p",[t._v("这五种数据类型与底层数据结构对应关系图如下，左边是 Redis 3.0版本的，也就是《Redis 设计与实现》这本书讲解的版本，现在看还是有点过时了，右边是现在 Github 最新的 Redis 代码的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/9fa26a74965efbf0f56b707a03bb9b7f-20230309232459468.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，Redis 数据类型的底层数据结构随着版本的更新也有所不同，比如：")]),t._v(" "),s("ul",[s("li",[t._v("在 Redis 3.0 版本中 List 对象的底层数据结构由「双向链表」或「压缩表列表」实现，但是在 3.2 版本之后，List 数据类型底层数据结构是由 quicklist 实现的；")]),t._v(" "),s("li",[t._v("在最新的 Redis 代码中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。")])]),t._v(" "),s("p",[t._v("Redis 五种数据类型的应用场景：")]),t._v(" "),s("ul",[s("li",[t._v("String 类型的应用场景：缓存对象、常规计数、分布式锁、共享session信息等。")]),t._v(" "),s("li",[t._v("List 类型的应用场景：消息队列（有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。")]),t._v(" "),s("li",[t._v("Hash 类型：缓存对象、购物车等。")]),t._v(" "),s("li",[t._v("Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。")]),t._v(" "),s("li",[t._v("Zset 类型：排序场景，比如排行榜、电话和姓名排序等。")])]),t._v(" "),s("p",[t._v("Redis 后续版本又支持四种数据类型，它们的应用场景如下：")]),t._v(" "),s("ul",[s("li",[t._v("BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；")]),t._v(" "),s("li",[t._v("HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；")]),t._v(" "),s("li",[t._v("GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；")]),t._v(" "),s("li",[t._v("Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据。")])]),t._v(" "),s("p",[t._v("针对 Redis 是否适合做消息队列，关键看你的业务场景：")]),t._v(" "),s("ul",[s("li",[t._v("如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。")]),t._v(" "),s("li",[t._v("如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。")])]),t._v(" "),s("h1",{attrs:{id:"redis-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-数据结构"}},[t._v("#")]),t._v(" Redis 数据结构")]),t._v(" "),s("p",[t._v("大家好，我是小林。")]),t._v(" "),s("p",[s("strong",[t._v("Redis 为什么那么快？")])]),t._v(" "),s("p",[t._v("除了它是内存数据库，使得所有的操作都在内存上进行之外，还有一个重要因素，它实现的数据结构，使得我们对数据进行增删查改操作时，Redis 能高效的处理。")]),t._v(" "),s("p",[t._v("因此，这次我们就来好好聊一下 Redis 数据结构，这个在面试中太常问了。")]),t._v(" "),s("p",[t._v("注意，"),s("strong",[t._v("Redis 数据结构并不是指 String（字符串）对象、List（列表）对象、Hash（哈希）对象、Set（集合）对象和 Zset（有序集合）对象，因为这些是 Redis 键值对中值的数据类型，也就是数据的保存形式，这些对象的底层实现的方式就用到了数据结构")]),t._v("。")]),t._v(" "),s("p",[t._v("我画了一张 Redis 数据类型（也叫 Redis 对象）和底层数据结构的对应关图，左边是 Redis 3.0版本的，也就是《Redis 设计与实现》这本书讲解的版本，现在看还是有点过时了，右边是现在 Github 最新的 Redis 代码的（还未发布正式版本）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/9fa26a74965efbf0f56b707a03bb9b7f-20230309232518487.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，Redis 数据类型的底层数据结构随着版本的更新也有所不同，比如：")]),t._v(" "),s("ul",[s("li",[t._v("在 Redis 3.0 版本中 List 对象的底层数据结构由「双向链表」或「压缩表列表」实现，但是在 3.2 版本之后，List 数据类型底层数据结构是由 quicklist 实现的；")]),t._v(" "),s("li",[t._v("在最新的 Redis 代码（还未发布正式版本）中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。")])]),t._v(" "),s("p",[s("strong",[t._v("这次，小林把新旧版本的数据结构说图解一遍，共有 9 种数据结构：SDS、双向链表、压缩列表、哈希表、跳表、整数集合、quicklist、listpack。")])]),t._v(" "),s("p",[t._v("不多 BB 了，直接发车！")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/a9c3e7dc4ac79363d8eb8eb2290a58e6.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"键值对数据库是怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#键值对数据库是怎么实现的"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E9%94%AE%E5%80%BC%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("键值对数据库是怎么实现的？")]),t._v(" "),s("p",[t._v("在开始讲数据结构之前，先给介绍下 Redis 是怎样实现键值对（key-value）数据库的。")]),t._v(" "),s("p",[t._v("Redis 的键值对中的 key 就是字符串对象，而 "),s("strong",[t._v("value 可以是字符串对象，也可以是集合数据类型的对象")]),t._v("，比如 List 对象、Hash 对象、Set 对象和 Zset 对象。")]),t._v(" "),s("p",[t._v("举个例子，我这里列出几种 Redis 新增键值对的命令：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('> SET name "xiaolincoding"\nOK\n\n> HSET person name "xiaolincoding" age 18\n0\n\n> RPUSH stu "xiaolin" "xiaomei"\n(integer) 4\n')])])]),s("p",[t._v("这些命令代表着：")]),t._v(" "),s("ul",[s("li",[t._v("第一条命令：name 是一个"),s("strong",[t._v("字符串键")]),t._v("，因为键的"),s("strong",[t._v("值是一个字符串对象")]),t._v("；")]),t._v(" "),s("li",[t._v("第二条命令：person 是一个"),s("strong",[t._v("哈希表键")]),t._v("，因为键的"),s("strong",[t._v("值是一个包含两个键值对的哈希表对象")]),t._v("；")]),t._v(" "),s("li",[t._v("第三条命令：stu 是一个"),s("strong",[t._v("列表键")]),t._v("，因为键的"),s("strong",[t._v("值是一个包含两个元素的列表对象")]),t._v("；")])]),t._v(" "),s("p",[t._v("这些键值对是如何保存在 Redis 中的呢？")]),t._v(" "),s("p",[t._v("Redis 是使用了一个「哈希表」保存所有键值对，哈希表的最大好处就是让我们可以用 O(1) 的时间复杂度来快速查找到键值对。哈希表其实就是一个数组，数组中的元素叫做哈希桶。")]),t._v(" "),s("p",[t._v("Redis 的哈希桶是怎么保存键值对数据的呢？")]),t._v(" "),s("p",[t._v("哈希桶存放的是指向键值对数据的指针（dictEntry*），这样通过指针就能找到键值对数据，然后因为键值对的值可以保存字符串对象和集合数据类型的对象，所以键值对的数据结构中并不是直接保存值本身，而是保存了 void * key 和 void * value 指针，分别指向了实际的键对象和值对象，这样一来，即使值是集合数据，也可以通过 void * value 指针找到。")]),t._v(" "),s("p",[t._v("我这里画了一张 Redis 保存键值对所涉及到的数据结构。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/f302fce6c92c0682024f47bf7579b44c.png",alt:"img"}})]),t._v(" "),s("p",[t._v("这些数据结构的内部细节，我先不展开讲，后面在讲哈希表数据结构的时候，在详细的说说，因为用到的数据结构是一样的。这里先大概说下图中涉及到的数据结构的名字和用途：")]),t._v(" "),s("ul",[s("li",[t._v("redisDb 结构，表示 Redis 数据库的结构，结构体里存放了指向了 dict 结构的指针；")]),t._v(" "),s("li",[t._v("dict 结构，结构体里存放了 2 个哈希表，正常情况下都是用「哈希表1」，「哈希表2」只有在 rehash 的时候才用，具体什么是 rehash，我在本文的哈希表数据结构会讲；")]),t._v(" "),s("li",[t._v("ditctht 结构，表示哈希表的结构，结构里存放了哈希表数组，数组中的每个元素都是指向一个哈希表节点结构（dictEntry）的指针；")]),t._v(" "),s("li",[t._v("dictEntry 结构，表示哈希表节点的结构，结构里存放了 *"),s("em",[t._v("void * key 和 void * value 指针， "),s("em",[t._v("key 指向的是 String 对象，而 *value 则可以指向 String 对象，也可以指向集合类型的对象，比如 List 对象、Hash 对象、Set 对象和 Zset 对象")])]),t._v("。")])]),t._v(" "),s("p",[t._v("特别说明下，void * key 和 void * value 指针指向的是 "),s("strong",[t._v("Redis 对象")]),t._v("，Redis 中的每个对象都由 redisObject 结构表示，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/58d3987af2af868dca965193fb27c464.png",alt:"img"}})]),t._v(" "),s("p",[t._v("对象结构里包含的成员变量：")]),t._v(" "),s("ul",[s("li",[t._v("type，标识该对象是什么类型的对象（String 对象、 List 对象、Hash 对象、Set 对象和 Zset 对象）；")]),t._v(" "),s("li",[t._v("encoding，标识该对象使用了哪种底层的数据结构；")]),t._v(" "),s("li",[s("strong",[t._v("ptr，指向底层数据结构的指针")]),t._v("。")])]),t._v(" "),s("p",[t._v("我画了一张 Redis 键值对数据库的全景图，你就能清晰知道 Redis 对象和数据结构的关系了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/3c386666e4e7638a07b230ba14b400fe.png",alt:"img"}})]),t._v(" "),s("p",[t._v("接下里，就好好聊一下底层数据结构！")]),t._v(" "),s("h2",{attrs:{id:"sds"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sds"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#sds",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("SDS")]),t._v(" "),s("p",[t._v("字符串在 Redis 中是很常用的，键值对中的键是字符串类型，值有时也是字符串类型。")]),t._v(" "),s("p",[t._v("Redis 是用 C 语言实现的，但是它没有直接使用 C 语言的 char* 字符数组来实现字符串，而是自己封装了一个名为简单动态字符串（simple dynamic string，SDS） 的数据结构来表示字符串，也就是 Redis 的 String 数据类型的底层数据结构是 SDS。")]),t._v(" "),s("p",[t._v("既然 Redis 设计了 SDS 结构来表示字符串，肯定是 C 语言的 char* 字符数组存在一些缺陷。")]),t._v(" "),s("p",[t._v("要了解这一点，得先来看看 char* 字符数组的结构。")]),t._v(" "),s("h3",{attrs:{id:"c-语言字符串的缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-语言字符串的缺陷"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#c-%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%BC%BA%E9%99%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("C 语言字符串的缺陷")]),t._v(" "),s("p",[t._v("C 语言的字符串其实就是一个字符数组，即数组中每个元素是字符串中的一个字符。")]),t._v(" "),s("p",[t._v("比如，下图就是字符串“xiaolin”的 char* 字符数组的结构：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/376128646c75a893ad47914858fa2131.png",alt:"img"}})]),t._v(" "),s("p",[t._v("没学过 C 语言的同学，可能会好奇为什么最后一个字符是“\\0”？")]),t._v(" "),s("p",[t._v("在 C 语言里，对字符串操作时，char * 指针只是指向字符数组的起始位置，而"),s("strong",[t._v("字符数组的结尾位置就用“\\0”表示，意思是指字符串的结束")]),t._v("。")]),t._v(" "),s("p",[t._v("因此，C 语言标准库中的字符串操作函数就通过判断字符是不是 “\\0” 来决定要不要停止操作，如果当前字符不是 “\\0” ，说明字符串还没结束，可以继续操作，如果当前字符是 “\\0” 是则说明字符串结束了，就要停止操作。")]),t._v(" "),s("p",[t._v("举个例子，C 语言获取字符串长度的函数 "),s("code",[t._v("strlen")]),t._v("，就是通过字符数组中的每一个字符，并进行计数，等遇到字符为 “\\0” 后，就会停止遍历，然后返回已经统计到的字符个数，即为字符串长度。下图显示了 strlen 函数的执行流程：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/bcf6bde3b647bdc343efcbc1a8f10579.png",alt:"img"}})]),t._v(" "),s("p",[t._v("很明显，"),s("strong",[t._v("C 语言获取字符串长度的时间复杂度是 O（N）（*这是一个可以改进的地方*")]),t._v("）")]),t._v(" "),s("p",[t._v("C 语言字符串用 “\\0” 字符作为结尾标记有个缺陷。假设有个字符串中有个 “\\0” 字符，这时在操作这个字符串时就会"),s("strong",[t._v("提早结束")]),t._v("，比如 “xiao\\0lin” 字符串，计算字符串长度的时候则会是 4，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/6286480eb1840a8930e18fd215d82565.png",alt:"img"}})]),t._v(" "),s("p",[t._v("因此，除了字符串的末尾之外，"),s("strong",[t._v("字符串里面不能含有 “\\0” 字符")]),t._v("，否则最先被程序读入的 “\\0” 字符将被误认为是字符串结尾，这个限制使得 C 语言的字符串只能保存文本数据，"),s("strong",[t._v("不能保存像图片、音频、视频文化这样的二进制数据（*这也是一个可以改进的地方*）")])]),t._v(" "),s("p",[t._v("另外， C 语言标准库中字符串的操作函数是很不安全的，对程序员很不友好，稍微一不注意，就会导致缓冲区溢出。")]),t._v(" "),s("p",[t._v("举个例子，strcat 函数是可以将两个字符串拼接在一起。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将 src 字符串拼接到 dest 字符串后面")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("C 语言的字符串是不会记录自身的缓冲区大小的")]),t._v("，所以 strcat 函数假定程序员在执行这个函数时，已经为 dest 分配了足够多的内存，可以容纳 src 字符串中的所有内容，而"),s("strong",[t._v("一旦这个假定不成立，就会发生缓冲区溢出将可能会造成程序运行终止，（*这是一个可以改进的地方*")]),t._v("）。")]),t._v(" "),s("p",[t._v("而且，strcat 函数和 strlen 函数类似，时间复杂度也很高，也都需要先通过遍历字符串才能得到目标字符串的末尾。然后对于 strcat 函数来说，还要再遍历源字符串才能完成追加，"),s("strong",[t._v("对字符串的操作效率不高")]),t._v("。")]),t._v(" "),s("p",[t._v("好了， 通过以上的分析，我们可以得知 C 语言的字符串不足之处以及可以改进的地方：")]),t._v(" "),s("ul",[s("li",[t._v("获取字符串长度的时间复杂度为 O（N）；")]),t._v(" "),s("li",[t._v("字符串的结尾是以 “\\0” 字符标识，字符串里面不能包含有 “\\0” 字符，因此不能保存二进制数据；")]),t._v(" "),s("li",[t._v("字符串操作函数不高效且不安全，比如有缓冲区溢出的风险，有可能会造成程序运行终止；")])]),t._v(" "),s("p",[t._v("Redis 实现的 SDS 的结构就把上面这些问题解决了，接下来我们一起看看 Redis 是如何解决的。")]),t._v(" "),s("h3",{attrs:{id:"sds-结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sds-结构设计"}},[t._v("#")]),t._v(" SDS 结构设计")]),t._v(" "),s("p",[t._v("下图就是 Redis 5.0 的 SDS 的数据结构：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/516738c4058cdf9109e40a7812ef4239.png",alt:"img"}})]),t._v(" "),s("p",[t._v("结构中的每个成员变量分别介绍下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("len，记录了字符串长度")]),t._v("。这样获取字符串长度的时候，只需要返回这个成员变量值就行，时间复杂度只需要 O（1）。")]),t._v(" "),s("li",[s("strong",[t._v("alloc，分配给字符数组的空间长度")]),t._v("。这样在修改字符串的时候，可以通过 "),s("code",[t._v("alloc - len")]),t._v(" 计算出剩余的空间大小，可以用来判断空间是否满足修改需求，如果不满足的话，就会自动将 SDS 的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用 SDS 既不需要手动修改 SDS 的空间大小，也不会出现前面所说的缓冲区溢出的问题。")]),t._v(" "),s("li",[s("strong",[t._v("flags，用来表示不同类型的 SDS")]),t._v("。一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64，后面在说明区别之处。")]),t._v(" "),s("li",[s("strong",[t._v("buf[]，字符数组，用来保存实际数据")]),t._v("。不仅可以保存字符串，也可以保存二进制数据。")])]),t._v(" "),s("p",[t._v("总的来说，Redis 的 SDS 结构在原本字符数组之上，增加了三个元数据：len、alloc、flags，用来解决 C 语言字符串的缺陷。")]),t._v(" "),s("h4",{attrs:{id:"o-1-复杂度获取字符串长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#o-1-复杂度获取字符串长度"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#o-1-%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("O（1）复杂度获取字符串长度")]),t._v(" "),s("p",[t._v("C 语言的字符串长度获取 strlen 函数，需要通过遍历的方式来统计字符串长度，时间复杂度是 O（N）。")]),t._v(" "),s("p",[t._v("而 Redis 的 SDS 结构因为加入了 len 成员变量，那么"),s("strong",[t._v("获取字符串长度的时候，直接返回这个成员变量的值就行，所以复杂度只有 O（1）")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"二进制安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制安全"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("二进制安全")]),t._v(" "),s("p",[t._v("因为 SDS 不需要用 “\\0” 字符来标识字符串结尾了，而是"),s("strong",[t._v("有个专门的 len 成员变量来记录长度，所以可存储包含 “\\0” 的数据")]),t._v("。但是 SDS 为了兼容部分 C 语言标准库的函数， SDS 字符串结尾还是会加上 “\\0” 字符。")]),t._v(" "),s("p",[t._v("因此， SDS 的 API 都是以处理二进制的方式来处理 SDS 存放在 buf[] 里的数据，程序不会对其中的数据做任何限制，数据写入的时候时什么样的，它被读取时就是什么样的。")]),t._v(" "),s("p",[t._v("通过使用二进制安全的 SDS，而不是 C 字符串，使得 Redis 不仅可以保存文本数据，也可以保存任意格式的二进制数据。")]),t._v(" "),s("h4",{attrs:{id:"不会发生缓冲区溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不会发生缓冲区溢出"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E4%B8%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("不会发生缓冲区溢出")]),t._v(" "),s("p",[t._v("C 语言的字符串标准库提供的字符串操作函数，大多数（比如 strcat 追加字符串函数）都是不安全的，因为这些函数把缓冲区大小是否满足操作需求的工作交由开发者来保证，程序内部并不会判断缓冲区大小是否足够用，当发生了缓冲区溢出就有可能造成程序异常结束。")]),t._v(" "),s("p",[t._v("所以，Redis 的 SDS 结构里引入了 alloc 和 len 成员变量，这样 SDS API 通过 "),s("code",[t._v("alloc - len")]),t._v(" 计算，可以算出剩余可用的空间大小，这样在对字符串做修改操作的时候，就可以由程序内部判断缓冲区大小是否足够用。")]),t._v(" "),s("p",[t._v("而且，"),s("strong",[t._v("当判断出缓冲区大小不够用时，Redis 会自动将扩大 SDS 的空间大小")]),t._v("，以满足修改所需的大小。")]),t._v(" "),s("p",[t._v("SDS 扩容的规则代码如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("hisds "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hi_sdsMakeRoomFor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hisds s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" addlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s目前的剩余空间已足够，无需扩展，直接返回")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("avail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" addlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取目前s的长度")]),t._v("\n    len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hi_sdslen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hi_sdsHdrSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldtype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩展之后 s 至少需要的长度")]),t._v("\n    newlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" addlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//根据新长度，为s分配新空间所需要的大小")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" HI_SDS_MAX_PREALLOC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新长度<HI_SDS_MAX_PREALLOC 则分配所需空间*2的空间")]),t._v("\n        newlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//否则，分配长度为目前长度+1MB")]),t._v("\n        newlen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" HI_SDS_MAX_PREALLOC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("如果所需的 sds 长度"),s("strong",[t._v("小于 1 MB")]),t._v("，那么最后的扩容是按照"),s("strong",[t._v("翻倍扩容")]),t._v("来执行的，即 2 倍的newlen")]),t._v(" "),s("li",[t._v("如果所需的 sds 长度"),s("strong",[t._v("超过 1 MB")]),t._v("，那么最后的扩容长度应该是 newlen "),s("strong",[t._v("+ 1MB")]),t._v("。")])]),t._v(" "),s("p",[t._v("在扩容 SDS 空间之前，SDS API 会优先检查未使用空间是否足够，如果不够的话，API 不仅会为 SDS 分配修改所必须要的空间，还会给 SDS 分配额外的「未使用空间」。")]),t._v(" "),s("p",[t._v("这样的好处是，下次在操作 SDS 时，如果 SDS 空间够的话，API 就会直接使用「未使用空间」，而无须执行内存分配，"),s("strong",[t._v("有效的减少内存分配次数")]),t._v("。")]),t._v(" "),s("p",[t._v("所以，使用 SDS 即不需要手动修改 SDS 的空间大小，也不会出现缓冲区溢出的问题。")]),t._v(" "),s("h4",{attrs:{id:"节省内存空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节省内存空间"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E8%8A%82%E7%9C%81%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("节省内存空间")]),t._v(" "),s("p",[t._v("SDS 结构中有个 flags 成员变量，表示的是 SDS 类型。")]),t._v(" "),s("p",[t._v("Redis 一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64。")]),t._v(" "),s("p",[t._v("这 5 种类型的主要"),s("strong",[t._v("区别就在于，它们数据结构中的 len 和 alloc 成员变量的数据类型不同")]),t._v("。")]),t._v(" "),s("p",[t._v("比如 sdshdr16 和 sdshdr32 这两个类型，它们的定义分别如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以看到：")]),t._v(" "),s("ul",[s("li",[t._v("sdshdr16 类型的 len 和 alloc 的数据类型都是 uint16_t，表示字符数组长度和分配空间大小不能超过 2 的 16 次方。")]),t._v(" "),s("li",[t._v("sdshdr32 则都是 uint32_t，表示表示字符数组长度和分配空间大小不能超过 2 的 32 次方。")])]),t._v(" "),s("p",[s("strong",[t._v("之所以 SDS 设计不同类型的结构体，是为了能灵活保存不同大小的字符串，从而有效节省内存空间")]),t._v("。比如，在保存小字符串时，结构头占用空间也比较少。")]),t._v(" "),s("p",[t._v("除了设计不同类型的结构体，Redis 在编程上还"),s("strong",[t._v("使用了专门的编译优化来节省内存空间")]),t._v("，即在 struct 声明了 "),s("code",[t._v("__attribute__ ((packed))")]),t._v(" ，它的作用是："),s("strong",[t._v("告诉编译器取消结构体在编译过程中的优化对齐，按照实际占用字节数进行对齐")]),t._v("。")]),t._v(" "),s("p",[t._v("比如，sdshdr16 类型的 SDS，默认情况下，编译器会按照 2 字节对齐的方式给变量分配内存，这意味着，即使一个变量的大小不到 2 个字节，编译器也会给它分配 2 个字节。")]),t._v(" "),s("p",[t._v("举个例子，假设下面这个结构体，它有两个成员变量，类型分别是 char 和 int，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("test1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" test1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%lu\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("大家猜猜这个结构体大小是多少？我先直接说答案，这个结构体大小计算出来是 8。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/35820959e8cf4376391c427ed7f81495.png",alt:"img"}})]),t._v(" "),s("p",[t._v("这是因为默认情况下，编译器是使用「字节对齐」的方式分配内存，虽然 char 类型只占一个字节，但是由于成员变量里有 int 类型，它占用了 4 个字节，所以在成员变量为 char 类型分配内存时，会分配 4 个字节，其中这多余的 3 个字节是为了字节对齐而分配的，相当于有 3 个字节被浪费掉了。")]),t._v(" "),s("p",[t._v("如果不想编译器使用字节对齐的方式进行分配内存，可以采用了 "),s("code",[t._v("__attribute__ ((packed))")]),t._v(" 属性定义结构体，这样一来，结构体实际占用多少内存空间，编译器就分配多少空间。")]),t._v(" "),s("p",[t._v("比如，我用 "),s("code",[t._v("__attribute__ ((packed))")]),t._v(" 属性定义下面的结构体 ，同样包含 char 和 int 两个类型的成员变量，代码如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("packed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("test2")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" test2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%lu\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这时打印的结果是 5（1 个字节 char + 4 字节 int）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/47e6c8fbc17fd6c89bdfcb5eedaaacff.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看得出，这是按照实际占用字节数进行分配内存的，这样可以节省内存空间。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E9%93%BE%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("链表")]),t._v(" "),s("p",[t._v("大家最熟悉的数据结构除了数组之外，我相信就是链表了。")]),t._v(" "),s("p",[t._v("Redis 的 List 对象的底层实现之一就是链表。C 语言本身没有链表这个数据结构的，所以 Redis 自己设计了一个链表数据结构。")]),t._v(" "),s("h3",{attrs:{id:"链表节点结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表节点结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("链表节点结构设计")]),t._v(" "),s("p",[t._v("先来看看「链表节点」结构的样子：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//前置节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//后置节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("listNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点的值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" listNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("有前置节点和后置节点，可以看的出，这个是一个双向链表。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/4fecbf7f63c73ec284a4821e0bfe2843.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"链表结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("链表结构设计")]),t._v(" "),s("p",[t._v("不过，Redis 在 listNode 结构体基础上又封装了 list 这个数据结构，这样操作起来会更方便，链表结构如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("list")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//链表头节点")]),t._v("\n    listNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//链表尾节点")]),t._v("\n    listNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点值复制函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点值释放函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("free"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点值比较函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//链表节点数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("list 结构为链表提供了链表头指针 head、链表尾节点 tail、链表节点数量 len、以及可以自定义实现的 dup、free、match 函数。")]),t._v(" "),s("p",[t._v("举个例子，下面是由 list 结构和 3 个 listNode 结构组成的链表。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/cadf797496816eb343a19c2451437f1e.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"链表的优势与缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表的优势与缺陷"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E5%8A%BF%E4%B8%8E%E7%BC%BA%E9%99%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("链表的优势与缺陷")]),t._v(" "),s("p",[t._v("Redis 的链表实现优点如下：")]),t._v(" "),s("ul",[s("li",[t._v("listNode 链表节点的结构里带有 prev 和 next 指针，"),s("strong",[t._v("获取某个节点的前置节点或后置节点的时间复杂度只需O(1)，而且这两个指针都可以指向 NULL，所以链表是无环链表")]),t._v("；")]),t._v(" "),s("li",[t._v("list 结构因为提供了表头指针 head 和表尾节点 tail，所以"),s("strong",[t._v("获取链表的表头节点和表尾节点的时间复杂度只需O(1)")]),t._v("；")]),t._v(" "),s("li",[t._v("list 结构因为提供了链表节点数量 len，所以"),s("strong",[t._v("获取链表中的节点数量的时间复杂度只需O(1)")]),t._v("；")]),t._v(" "),s("li",[t._v("listNode 链表节使用 void* 指针保存节点值，并且可以通过 list 结构的 dup、free、match 函数指针为节点设置该节点类型特定的函数，因此"),s("strong",[t._v("链表节点可以保存各种不同类型的值")]),t._v("；")])]),t._v(" "),s("p",[t._v("链表的缺陷也是有的：")]),t._v(" "),s("ul",[s("li",[t._v("链表每个节点之间的内存都是不连续的，意味着"),s("strong",[t._v("无法很好利用 CPU 缓存")]),t._v("。能很好利用 CPU 缓存的数据结构就是数组，因为数组的内存是连续的，这样就可以充分利用 CPU 缓存来加速访问。")]),t._v(" "),s("li",[t._v("还有一点，保存一个链表节点的值都需要一个链表节点结构头的分配，"),s("strong",[t._v("内存开销较大")]),t._v("。")])]),t._v(" "),s("p",[t._v("因此，Redis 3.0 的 List 对象在数据量比较少的情况下，会采用「压缩列表」作为底层数据结构的实现，它的优势是节省内存空间，并且是内存紧凑型的数据结构。")]),t._v(" "),s("p",[t._v("不过，压缩列表存在性能问题（具体什么问题，下面会说），所以 Redis 在 3.2 版本设计了新的数据结构 quicklist，并将 List 对象的底层数据结构改由 quicklist 实现。")]),t._v(" "),s("p",[t._v("然后在 Redis 5.0 设计了新的数据结构 listpack，沿用了压缩列表紧凑型的内存布局，最终在最新的 Redis 版本，将 Hash 对象和 Zset 对象的底层数据结构实现之一的压缩列表，替换成由 listpack 实现。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"压缩列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩列表"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("压缩列表")]),t._v(" "),s("p",[t._v("压缩列表的最大特点，就是它被设计成一种内存紧凑型的数据结构，占用一块连续的内存空间，不仅可以利用 CPU 缓存，而且会针对不同长度的数据，进行相应编码，这种方法可以有效地节省内存开销。")]),t._v(" "),s("p",[t._v("但是，压缩列表的缺陷也是有的：")]),t._v(" "),s("ul",[s("li",[t._v("不能保存过多的元素，否则查询效率就会降低；")]),t._v(" "),s("li",[t._v("新增或修改某个元素时，压缩列表占用的内存空间需要重新分配，甚至可能引发连锁更新的问题。")])]),t._v(" "),s("p",[t._v("因此，Redis 对象（List 对象、Hash 对象、Zset 对象）包含的元素数量较少，或者元素值不大的情况才会使用压缩列表作为底层数据结构。")]),t._v(" "),s("p",[t._v("接下来，就跟大家详细聊下压缩列表。")]),t._v(" "),s("h3",{attrs:{id:"压缩列表结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩列表结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("压缩列表结构设计")]),t._v(" "),s("p",[t._v("压缩列表是 Redis 为了节约内存而开发的，它是"),s("strong",[t._v("由连续内存块组成的顺序型数据结构")]),t._v("，有点类似于数组。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/ab0b44f557f8b5bc7acb3a53d43ebfcb.png",alt:"img"}})]),t._v(" "),s("p",[t._v("压缩列表在表头有三个字段：")]),t._v(" "),s("ul",[s("li",[s("em",[s("strong",[t._v("zlbytes")])]),t._v("，记录整个压缩列表占用对内存字节数；")]),t._v(" "),s("li",[s("em",[s("strong",[t._v("zltail")])]),t._v("，记录压缩列表「尾部」节点距离起始地址由多少字节，也就是列表尾的偏移量；")]),t._v(" "),s("li",[s("em",[s("strong",[t._v("zllen")])]),t._v("，记录压缩列表包含的节点数量；")]),t._v(" "),s("li",[s("em",[s("strong",[t._v("zlend")])]),t._v("，标记压缩列表的结束点，固定值 0xFF（十进制255）。")])]),t._v(" "),s("p",[t._v("在压缩列表中，如果我们要查找定位第一个元素和最后一个元素，可以通过表头三个字段（zllen）的长度直接定位，复杂度是 O(1)。而"),s("strong",[t._v("查找其他元素时，就没有这么高效了，只能逐个查找，此时的复杂度就是 O(N) 了，因此压缩列表不适合保存过多的元素")]),t._v("。")]),t._v(" "),s("p",[t._v("另外，压缩列表节点（entry）的构成如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/a3b1f6235cf0587115b21312fe60289c.png",alt:"img"}})]),t._v(" "),s("p",[t._v("压缩列表节点包含三部分内容：")]),t._v(" "),s("ul",[s("li",[s("em",[s("strong",[t._v("prevlen")])]),t._v("，记录了「前一个节点」的长度，目的是为了实现从后向前遍历；")]),t._v(" "),s("li",[s("em",[s("strong",[t._v("encoding")])]),t._v("，记录了当前节点实际数据的「类型和长度」，类型主要有两种：字符串和整数。")]),t._v(" "),s("li",[s("em",[s("strong",[t._v("data")])]),t._v("，记录了当前节点的实际数据，类型和长度都由 "),s("code",[t._v("encoding")]),t._v(" 决定；")])]),t._v(" "),s("p",[t._v("当我们往压缩列表中插入数据时，压缩列表就会根据数据类型是字符串还是整数，以及数据的大小，会使用不同空间大小的 prevlen 和 encoding 这两个元素里保存的信息，"),s("strong",[t._v("这种根据数据大小和类型进行不同的空间大小分配的设计思想，正是 Redis 为了节省内存而采用的")]),t._v("。")]),t._v(" "),s("p",[t._v("分别说下，prevlen 和 encoding 是如何根据数据的大小和类型来进行不同的空间大小分配。")]),t._v(" "),s("p",[t._v("压缩列表里的每个节点中的 prevlen 属性都记录了「前一个节点的长度」，而且 prevlen 属性的空间大小跟前一个节点长度值有关，比如：")]),t._v(" "),s("ul",[s("li",[t._v("如果"),s("strong",[t._v("前一个节点的长度小于 254 字节")]),t._v("，那么 prevlen 属性需要用 "),s("strong",[t._v("1 字节的空间")]),t._v("来保存这个长度值；")]),t._v(" "),s("li",[t._v("如果"),s("strong",[t._v("前一个节点的长度大于等于 254 字节")]),t._v("，那么 prevlen 属性需要用 "),s("strong",[t._v("5 字节的空间")]),t._v("来保存这个长度值；")])]),t._v(" "),s("p",[t._v("encoding 属性的空间大小跟数据是字符串还是整数，以及字符串的长度有关，如下图（下图中的 content 表示的是实际数据，即本文的 data 字段）：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E7%BC%96%E7%A0%81.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("如果"),s("strong",[t._v("当前节点的数据是整数")]),t._v("，则 encoding 会使用 "),s("strong",[t._v("1 字节的空间")]),t._v("进行编码，也就是 encoding 长度为 1 字节。通过 encoding 确认了整数类型，就可以确认整数数据的实际大小了，比如如果 encoding 编码确认了数据是 int16 整数，那么 data 的长度就是 int16 的大小。")]),t._v(" "),s("li",[t._v("如果"),s("strong",[t._v("当前节点的数据是字符串，根据字符串的长度大小")]),t._v("，encoding 会使用 "),s("strong",[t._v("1 字节/2字节/5字节的空间")]),t._v("进行编码，encoding 编码的前两个 bit 表示数据的类型，后续的其他 bit 标识字符串数据的实际长度，即 data 的长度。")])]),t._v(" "),s("h3",{attrs:{id:"连锁更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连锁更新"}},[t._v("#")]),t._v(" 连锁更新")]),t._v(" "),s("p",[t._v("压缩列表除了查找复杂度高的问题，还有一个问题。")]),t._v(" "),s("p",[s("strong",[t._v("压缩列表新增某个元素或修改某个元素时，如果空间不不够，压缩列表占用的内存空间就需要重新分配。而当新插入的元素较大时，可能会导致后续元素的 prevlen 占用空间都发生变化，从而引起「连锁更新」问题，导致每个元素的空间都要重新分配，造成访问压缩列表性能的下降")]),t._v("。")]),t._v(" "),s("p",[t._v("前面提到，压缩列表节点的 prevlen 属性会根据前一个节点的长度进行不同的空间大小分配：")]),t._v(" "),s("ul",[s("li",[t._v("如果前一个"),s("strong",[t._v("节点的长度小于 254 字节")]),t._v("，那么 prevlen 属性需要用 "),s("strong",[t._v("1 字节的空间")]),t._v("来保存这个长度值；")]),t._v(" "),s("li",[t._v("如果前一个"),s("strong",[t._v("节点的长度大于等于 254 字节")]),t._v("，那么 prevlen 属性需要用 "),s("strong",[t._v("5 字节的空间")]),t._v("来保存这个长度值；")])]),t._v(" "),s("p",[t._v("现在假设一个压缩列表中有多个连续的、长度在 250～253 之间的节点，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/462c6a65531667f2bcf420953b0aded9.png",alt:"img"}})]),t._v(" "),s("p",[t._v("因为这些节点长度值小于 254 字节，所以 prevlen 属性需要用 1 字节的空间来保存这个长度值。")]),t._v(" "),s("p",[t._v("这时，如果将一个长度大于等于 254 字节的新节点加入到压缩列表的表头节点，即新节点将成为 e1 的前置节点，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/d1a6deff4672580609c99a5b06bf3429.png",alt:"img"}})]),t._v(" "),s("p",[t._v("因为 e1 节点的 prevlen 属性只有 1 个字节大小，无法保存新节点的长度，此时就需要对压缩列表的空间重分配操作，并将 e1 节点的 prevlen 属性从原来的 1 字节大小扩展为 5 字节大小。")]),t._v(" "),s("p",[t._v("多米诺牌的效应就此开始。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/1f0e5ae7ab749078cadda5ba0ed98eac.png",alt:"img"}})]),t._v(" "),s("p",[t._v("e1 原本的长度在 250～253 之间，因为刚才的扩展空间，此时 e1 的长度就大于等于 254 了，因此原本 e2 保存 e1 的 prevlen 属性也必须从 1 字节扩展至 5 字节大小。")]),t._v(" "),s("p",[t._v("正如扩展 e1 引发了对 e2 扩展一样，扩展 e2 也会引发对 e3 的扩展，而扩展 e3 又会引发对 e4 的扩展.... 一直持续到结尾。")]),t._v(" "),s("p",[s("strong",[t._v("这种在特殊情况下产生的连续多次空间扩展操作就叫做「连锁更新」")]),t._v("，就像多米诺牌的效应一样，第一张牌倒下了，推动了第二张牌倒下；第二张牌倒下，又推动了第三张牌倒下....，")]),t._v(" "),s("h3",{attrs:{id:"压缩列表的缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩列表的缺陷"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E7%9A%84%E7%BC%BA%E9%99%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("压缩列表的缺陷")]),t._v(" "),s("p",[t._v("空间扩展操作也就是重新分配内存，因此"),s("strong",[t._v("连锁更新一旦发生，就会导致压缩列表占用的内存空间要多次重新分配，这就会直接影响到压缩列表的访问性能")]),t._v("。")]),t._v(" "),s("p",[t._v("所以说，"),s("strong",[t._v("虽然压缩列表紧凑型的内存布局能节省内存开销，但是如果保存的元素数量增加了，或是元素变大了，会导致内存重新分配，最糟糕的是会有「连锁更新」的问题")]),t._v("。")]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("压缩列表只会用于保存的节点数量不多的场景")]),t._v("，只要节点数量足够小，即使发生连锁更新，也是能接受的。")]),t._v(" "),s("p",[t._v("虽说如此，Redis 针对压缩列表在设计上的不足，在后来的版本中，新增设计了两种数据结构：quicklist（Redis 3.2 引入） 和 listpack（Redis 5.0 引入）。这两种数据结构的设计目标，就是尽可能地保持压缩列表节省内存的优势，同时解决压缩列表的「连锁更新」的问题。")]),t._v(" "),s("h2",{attrs:{id:"哈希表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E5%93%88%E5%B8%8C%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("哈希表")]),t._v(" "),s("p",[t._v("哈希表是一种保存键值对（key-value）的数据结构。")]),t._v(" "),s("p",[t._v("哈希表中的每一个 key 都是独一无二的，程序可以根据 key 查找到与之关联的 value，或者通过 key 来更新 value，又或者根据 key 来删除整个 key-value等等。")]),t._v(" "),s("p",[t._v("在讲压缩列表的时候，提到过 Redis 的 Hash 对象的底层实现之一是压缩列表（最新 Redis 代码已将压缩列表替换成 listpack）。Hash 对象的另外一个底层实现就是哈希表。")]),t._v(" "),s("p",[t._v("哈希表优点在于，它"),s("strong",[t._v("能以 O(1) 的复杂度快速查询数据")]),t._v("。怎么做到的呢？将 key 通过 Hash 函数的计算，就能定位数据在表中的位置，因为哈希表实际上是数组，所以可以通过索引值快速查询到数据。")]),t._v(" "),s("p",[t._v("但是存在的风险也是有，在哈希表大小固定的情况下，随着数据不断增多，那么"),s("strong",[t._v("哈希冲突")]),t._v("的可能性也会越高。")]),t._v(" "),s("p",[t._v("解决哈希冲突的方式，有很多种。")]),t._v(" "),s("p",[s("strong",[t._v("Redis 采用了「链式哈希」来解决哈希冲突")]),t._v("，在不扩容哈希表的前提下，将具有相同哈希值的数据串起来，形成链接起，以便这些数据在表中仍然可以被查询到。")]),t._v(" "),s("p",[t._v("接下来，详细说说哈希表。")]),t._v(" "),s("h3",{attrs:{id:"哈希表结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E5%93%88%E5%B8%8C%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("哈希表结构设计")]),t._v(" "),s("p",[t._v("Redis 的哈希表结构如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//哈希表数组")]),t._v("\n    dictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//哈希表大小")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//哈希表大小掩码，用于计算索引值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//该哈希表已有的节点数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以看到，哈希表是一个数组（dictEntry **table），数组的每个元素是一个指向「哈希表节点（dictEntry）」的指针。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/dc495ffeaa3c3d8cb2e12129b3423118.png",alt:"img"}})]),t._v(" "),s("p",[t._v("哈希表节点的结构如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//键值对中的键")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//键值对中的值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向下一个哈希表节点，形成链表")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("dictEntry 结构里不仅包含指向键和值的指针，还包含了指向下一个哈希表节点的指针，这个指针可以将多个哈希值相同的键值对链接起来，以此来解决哈希冲突的问题，这就是链式哈希。")]),t._v(" "),s("p",[t._v("另外，这里还跟你提一下，dictEntry 结构里键值对中的值是一个「联合体 v」定义的，因此，键值对中的值可以是一个指向实际值的指针，或者是一个无符号的 64 位整数或有符号的 64 位整数或double 类的值。这么做的好处是可以节省内存空间，因为当「值」是整数或浮点数时，就可以将值的数据内嵌在 dictEntry 结构里，无需再用一个指针指向实际的值，从而节省了内存空间。")]),t._v(" "),s("h3",{attrs:{id:"哈希冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希冲突"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("哈希冲突")]),t._v(" "),s("p",[t._v("哈希表实际上是一个数组，数组里多每一个元素就是一个哈希桶。")]),t._v(" "),s("p",[t._v("当一个键值对的键经过 Hash 函数计算后得到哈希值，再将(哈希值 % 哈希表大小)取模计算，得到的结果值就是该 key-value 对应的数组元素位置，也就是第几个哈希桶。")]),t._v(" "),s("blockquote",[s("p",[t._v("什么是哈希冲突呢？")])]),t._v(" "),s("p",[t._v("举个例子，有一个可以存放 8 个哈希桶的哈希表。key1 经过哈希函数计算后，再将「哈希值 % 8 」进行取模计算，结果值为 1，那么就对应哈希桶 1，类似的，key9 和 key10 分别对应哈希桶 1 和桶 6。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/753724a072e77d139c926ecf1f049b29.png",alt:"img"}})]),t._v(" "),s("p",[t._v("此时，key1 和 key9 对应到了相同的哈希桶中，这就发生了哈希冲突。")]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("当有两个以上数量的 kay 被分配到了哈希表中同一个哈希桶上时，此时称这些 key 发生了冲突。")])]),t._v(" "),s("h3",{attrs:{id:"链式哈希"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链式哈希"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E9%93%BE%E5%BC%8F%E5%93%88%E5%B8%8C",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("链式哈希")]),t._v(" "),s("p",[t._v("Redis 采用了「"),s("strong",[t._v("链式哈希")]),t._v("」的方法来解决哈希冲突。")]),t._v(" "),s("blockquote",[s("p",[t._v("链式哈希是怎么实现的？")])]),t._v(" "),s("p",[t._v("实现的方式就是每个哈希表节点都有一个 next 指针，用于指向下一个哈希表节点，因此多个哈希表节点可以用 next 指针构成一个单项链表，"),s("strong",[t._v("被分配到同一个哈希桶上的多个节点可以用这个单项链表连接起来")]),t._v("，这样就解决了哈希冲突。")]),t._v(" "),s("p",[t._v("还是用前面的哈希冲突例子，key1 和 key9 经过哈希计算后，都落在同一个哈希桶，链式哈希的话，key1 就会通过 next 指针指向 key9，形成一个单向链表。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/675c23857a36b2dab26ed2e6a7b94b5d.png",alt:"img"}})]),t._v(" "),s("p",[t._v("不过，链式哈希局限性也很明显，随着链表长度的增加，在查询这一位置上的数据的耗时就会增加，毕竟链表的查询的时间复杂度是 O(n)。")]),t._v(" "),s("p",[t._v("要想解决这一问题，就需要进行 rehash，也就是对哈希表的大小进行扩展。")]),t._v(" "),s("p",[t._v("接下来，看看 Redis 是如何实现的 rehash 的。")]),t._v(" "),s("h3",{attrs:{id:"rehash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rehash"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#rehash",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("rehash")]),t._v(" "),s("p",[t._v("哈希表结构设计的这一小节，我给大家介绍了 Redis 使用 dictht 结构体表示哈希表。不过，在实际使用哈希表时，Redis 定义一个 dict 结构体，这个结构体里定义了"),s("strong",[t._v("两个哈希表（ht[2]）")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    …\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//两个Hash表，交替使用，用于rehash操作")]),t._v("\n    dictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    …\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("之所以定义了 2 个哈希表，是因为进行 rehash 的时候，需要用上 2 个哈希表了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/2fedbc9cd4cb7236c302d695686dd478.png",alt:"img"}})]),t._v(" "),s("p",[t._v("在正常服务请求阶段，插入的数据，都会写入到「哈希表 1」，此时的「哈希表 2 」 并没有被分配空间。")]),t._v(" "),s("p",[t._v("随着数据逐步增多，触发了 rehash 操作，这个过程分为三步：")]),t._v(" "),s("ul",[s("li",[t._v("给「哈希表 2」 分配空间，一般会比「哈希表 1」 大 2 倍；")]),t._v(" "),s("li",[t._v("将「哈希表 1 」的数据迁移到「哈希表 2」 中；")]),t._v(" "),s("li",[t._v("迁移完成后，「哈希表 1 」的空间会被释放，并把「哈希表 2」 设置为「哈希表 1」，然后在「哈希表 2」 新创建一个空白的哈希表，为下次 rehash 做准备。")])]),t._v(" "),s("p",[t._v("为了方便你理解，我把 rehash 这三个过程画在了下面这张图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/cabce0ce7e320bc9d9b5bde947b6811b.png",alt:"img"}})]),t._v(" "),s("p",[t._v("这个过程看起来简单，但是其实第二步很有问题，"),s("strong",[t._v("如果「哈希表 1 」的数据量非常大，那么在迁移至「哈希表 2 」的时候，因为会涉及大量的数据拷贝，此时可能会对 Redis 造成阻塞，无法服务其他请求")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"渐进式-rehash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渐进式-rehash"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E6%B8%90%E8%BF%9B%E5%BC%8F-rehash",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("渐进式 rehash")]),t._v(" "),s("p",[t._v("为了避免 rehash 在数据迁移过程中，因拷贝数据的耗时，影响 Redis 性能的情况，所以 Redis 采用了"),s("strong",[t._v("渐进式 rehash")]),t._v("，也就是将数据的迁移的工作不再是一次性迁移完成，而是分多次迁移。")]),t._v(" "),s("p",[t._v("渐进式 rehash 步骤如下：")]),t._v(" "),s("ul",[s("li",[t._v("给「哈希表 2」 分配空间；")]),t._v(" "),s("li",[s("strong",[t._v("在 rehash 进行期间，每次哈希表元素进行新增、删除、查找或者更新操作时，Redis 除了会执行对应的操作之外，还会顺序将「哈希表 1 」中索引位置上的所有 key-value 迁移到「哈希表 2」 上")]),t._v("；")]),t._v(" "),s("li",[t._v("随着处理客户端发起的哈希表操作请求数量越多，最终在某个时间点会把「哈希表 1 」的所有 key-value 迁移到「哈希表 2」，从而完成 rehash 操作。")])]),t._v(" "),s("p",[t._v("这样就巧妙地把一次性大量数据迁移工作的开销，分摊到了多次处理请求的过程中，避免了一次性 rehash 的耗时操作。")]),t._v(" "),s("p",[t._v("在进行渐进式 rehash 的过程中，会有两个哈希表，所以在渐进式 rehash 进行期间，哈希表元素的删除、查找、更新等操作都会在这两个哈希表进行。")]),t._v(" "),s("p",[t._v("比如，查找一个 key 的值的话，先会在「哈希表 1」 里面进行查找，如果没找到，就会继续到哈希表 2 里面进行找到。")]),t._v(" "),s("p",[t._v("另外，在渐进式 rehash 进行期间，新增一个 key-value 时，会被保存到「哈希表 2 」里面，而「哈希表 1」 则不再进行任何添加操作，这样保证了「哈希表 1 」的 key-value 数量只会减少，随着 rehash 操作的完成，最终「哈希表 1 」就会变成空表。")]),t._v(" "),s("h3",{attrs:{id:"rehash-触发条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rehash-触发条件"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#rehash-%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("rehash 触发条件")]),t._v(" "),s("p",[t._v("介绍了 rehash 那么多，还没说什么时情况下会触发 rehash 操作呢？")]),t._v(" "),s("p",[t._v("rehash 的触发条件跟**负载因子（load factor）**有关系。")]),t._v(" "),s("p",[t._v("负载因子可以通过下面这个公式计算：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/85f597f7851b90d6c78bb0d8e39690fc.png",alt:"img"}})]),t._v(" "),s("p",[t._v("触发 rehash 操作的条件，主要有两个：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("当负载因子大于等于 1 ，并且 Redis 没有在执行 bgsave 命令或者 bgrewiteaof 命令，也就是没有执行 RDB 快照或没有进行 AOF 重写的时候，就会进行 rehash 操作。")])]),t._v(" "),s("li",[s("strong",[t._v("当负载因子大于等于 5 时，此时说明哈希冲突非常严重了，不管有没有有在执行 RDB 快照或 AOF 重写，都会强制进行 rehash 操作。")])])]),t._v(" "),s("h2",{attrs:{id:"整数集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数集合"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("整数集合")]),t._v(" "),s("p",[t._v("整数集合是 Set 对象的底层实现之一。当一个 Set 对象只包含整数值元素，并且元素数量不大时，就会使用整数集这个数据结构作为底层实现。")]),t._v(" "),s("h3",{attrs:{id:"整数集合结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数集合结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("整数集合结构设计")]),t._v(" "),s("p",[t._v("整数集合本质上是一块连续内存空间，它的结构定义如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编码方式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//集合包含的元素数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存元素的数组")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int8_t")]),t._v(" contents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" intset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以看到，保存元素的容器是一个 contents 数组，虽然 contents 被声明为 int8_t 类型的数组，但是实际上 contents 数组并不保存任何 int8_t 类型的元素，contents 数组的真正类型取决于 intset 结构体里的 encoding 属性的值。比如：")]),t._v(" "),s("ul",[s("li",[t._v("如果 encoding 属性值为 INTSET_ENC_INT16，那么 contents 就是一个 int16_t 类型的数组，数组中每一个元素的类型都是 int16_t；")]),t._v(" "),s("li",[t._v("如果 encoding 属性值为 INTSET_ENC_INT32，那么 contents 就是一个 int32_t 类型的数组，数组中每一个元素的类型都是 int32_t；")]),t._v(" "),s("li",[t._v("如果 encoding 属性值为 INTSET_ENC_INT64，那么 contents 就是一个 int64_t 类型的数组，数组中每一个元素的类型都是 int64_t；")])]),t._v(" "),s("p",[t._v("不同类型的 contents 数组，意味着数组的大小也会不同。")]),t._v(" "),s("h3",{attrs:{id:"整数集合的升级操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数集合的升级操作"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88%E7%9A%84%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("整数集合的升级操作")]),t._v(" "),s("p",[t._v("整数集合会有一个升级规则，就是当我们将一个新元素加入到整数集合里面，如果新元素的类型（int32_t）比整数集合现有所有元素的类型（int16_t）都要长时，整数集合需要先进行升级，也就是按新元素的类型（int32_t）扩展 contents 数组的空间大小，然后才能将新元素加入到整数集合里，当然升级的过程中，也要维持整数集合的有序性。")]),t._v(" "),s("p",[t._v("整数集合升级的过程不会重新分配一个新类型的数组，而是在原本的数组上扩展空间，然后在将每个元素按间隔类型大小分割，如果 encoding 属性值为 INTSET_ENC_INT16，则每个元素的间隔就是 16 位。")]),t._v(" "),s("p",[t._v("举个例子，假设有一个整数集合里有 3 个类型为 int16_t 的元素。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/5dbdfa7cfbdd1d12a4d9458c6c90d472.png",alt:"img"}})]),t._v(" "),s("p",[t._v("现在，往这个整数集合中加入一个新元素 65535，这个新元素需要用 int32_t 类型来保存，所以整数集合要进行升级操作，首先需要为 contents 数组扩容，"),s("strong",[t._v("在原本空间的大小之上再扩容多 80 位（4x32-3x16=80），这样就能保存下 4 个类型为 int32_t 的元素")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/e2e3e19fc934e70563fbdfde2af39a2b.png",alt:"img"}})]),t._v(" "),s("p",[t._v("扩容完 contents 数组空间大小后，需要将之前的三个元素转换为 int32_t 类型，并将转换后的元素放置到正确的位上面，并且需要维持底层数组的有序性不变，整个转换过程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/e84b052381e240eeb8cc97d6b729968b.png",alt:"img"}})]),t._v(" "),s("blockquote",[s("p",[t._v("整数集合升级有什么好处呢？")])]),t._v(" "),s("p",[t._v("如果要让一个数组同时保存 int16_t、int32_t、int64_t 类型的元素，最简单做法就是直接使用 int64_t 类型的数组。不过这样的话，当如果元素都是 int16_t 类型的，就会造成内存浪费的情况。")]),t._v(" "),s("p",[t._v("整数集合升级就能避免这种情况，如果一直向整数集合添加 int16_t 类型的元素，那么整数集合的底层实现就一直是用 int16_t 类型的数组，只有在我们要将 int32_t 类型或 int64_t 类型的元素添加到集合时，才会对数组进行升级操作。")]),t._v(" "),s("p",[t._v("因此，整数集合升级的好处是"),s("strong",[t._v("节省内存资源")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("整数集合支持降级操作吗？")])]),t._v(" "),s("p",[s("strong",[t._v("不支持降级操作")]),t._v("，一旦对数组进行了升级，就会一直保持升级后的状态。比如前面的升级操作的例子，如果删除了 65535 元素，整数集合的数组还是 int32_t 类型的，并不会因此降级为 int16_t 类型。")]),t._v(" "),s("h2",{attrs:{id:"跳表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳表"}},[t._v("#")]),t._v(" 跳表")]),t._v(" "),s("p",[t._v("Redis 只有 Zset 对象的底层实现用到了跳表，跳表的优势是能支持平均 O(logN) 复杂度的节点查找。")]),t._v(" "),s("p",[t._v("zset 结构体里有两个数据结构：一个是跳表，一个是哈希表。这样的好处是既能进行高效的范围查询，也能进行高效单点查询。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zskiplist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zsl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Zset 对象在执行数据插入或是数据更新的过程中，会依次在跳表和哈希表中插入或更新相应的数据，从而保证了跳表和哈希表中记录的信息一致。")]),t._v(" "),s("p",[t._v("Zset 对象能支持范围查询（如 ZRANGEBYSCORE 操作），这是因为它的数据结构设计采用了跳表，而又能以常数复杂度获取元素权重（如 ZSCORE 操作），这是因为它同时采用了哈希表进行索引。")]),t._v(" "),s("p",[t._v("可能很多人会奇怪，为什么我开头说 Zset 对象的底层数据结构是「压缩列表」或者「跳表」，而没有说哈希表呢？")]),t._v(" "),s("p",[t._v("Zset 对象在使用跳表作为数据结构的时候，是使用由「哈希表+跳表」组成的 struct zset，但是我们讨论的时候，都会说跳表是 Zset 对象的底层数据结构，而不会提及哈希表，是因为 struct zset 中的哈希表只是用于以常数复杂度获取元素权重，大部分操作都是跳表实现的。")]),t._v(" "),s("p",[t._v("接下来，详细的说下跳表。")]),t._v(" "),s("h3",{attrs:{id:"跳表结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳表结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E8%B7%B3%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("跳表结构设计")]),t._v(" "),s("p",[t._v("链表在查找元素的时候，因为需要逐一查找，所以查询效率非常低，时间复杂度是O(N)，于是就出现了跳表。"),s("strong",[t._v("跳表是在链表基础上改进过来的，实现了一种「多层」的有序链表")]),t._v("，这样的好处是能快读定位数据。")]),t._v(" "),s("p",[t._v("那跳表长什么样呢？我这里举个例子，下图展示了一个层级为 3 的跳表。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/2ae0ed790c7e7403f215acb2bd82e884.png",alt:"img"}})]),t._v(" "),s("p",[t._v("图中头节点有 L0~L2 三个头指针，分别指向了不同层级的节点，然后每个层级的节点都通过指针连接起来：")]),t._v(" "),s("ul",[s("li",[t._v("L0 层级共有 5 个节点，分别是节点1、2、3、4、5；")]),t._v(" "),s("li",[t._v("L1 层级共有 3 个节点，分别是节点 2、3、5；")]),t._v(" "),s("li",[t._v("L2 层级只有 1 个节点，也就是节点 3 。")])]),t._v(" "),s("p",[t._v("如果我们要在链表中查找节点 4 这个元素，只能从头开始遍历链表，需要查找 4 次，而使用了跳表后，只需要查找 2 次就能定位到节点 4，因为可以在头节点直接从 L2 层级跳到节点 3，然后再往前遍历找到节点 4。")]),t._v(" "),s("p",[t._v("可以看到，这个查找过程就是在多个层级上跳来跳去，最后定位到元素。当数据量很大时，跳表的查找复杂度就是 O(logN)。")]),t._v(" "),s("p",[t._v("那跳表节点是怎么实现多层级的呢？这就需要看「跳表节点」的数据结构了，如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Zset 对象的元素值")]),t._v("\n    sds ele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//元素权重值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//后向指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点的level数组，保存每层上的前向指针和跨度")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistLevel")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" span"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zskiplistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Zset 对象要同时保存「元素」和「元素的权重」，对应到跳表节点结构里就是 sds 类型的 ele 变量和 double 类型的 score 变量。每个跳表节点都有一个后向指针（struct zskiplistNode *backward），指向前一个节点，目的是为了方便从跳表的尾节点开始访问节点，这样倒序查找时很方便。")]),t._v(" "),s("p",[t._v("跳表是一个带有层级关系的链表，而且每一层级可以包含多个节点，每一个节点通过指针连接起来，实现这一特性就是靠跳表节点结构体中的"),s("strong",[t._v("zskiplistLevel 结构体类型的 level 数组")]),t._v("。")]),t._v(" "),s("p",[t._v("level 数组中的每一个元素代表跳表的一层，也就是由 zskiplistLevel 结构体表示，比如 leve[0] 就表示第一层，leve[1] 就表示第二层。zskiplistLevel 结构体里定义了「指向下一个跳表节点的指针」和「跨度」，跨度时用来记录两个节点之间的距离。")]),t._v(" "),s("p",[t._v("比如，下面这张图，展示了各个节点的跨度。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/3%E5%B1%82%E8%B7%B3%E8%A1%A8-%E8%B7%A8%E5%BA%A6.png",alt:"img"}})]),t._v(" "),s("p",[t._v("第一眼看到跨度的时候，以为是遍历操作有关，实际上并没有任何关系，遍历操作只需要用前向指针（struct zskiplistNode *forward）就可以完成了。")]),t._v(" "),s("p",[s("strong",[t._v("跨度实际上是为了计算这个节点在跳表中的排位")]),t._v("。具体怎么做的呢？因为跳表中的节点都是按序排列的，那么计算某个节点排位的时候，从头节点点到该结点的查询路径上，将沿途访问过的所有层的跨度累加起来，得到的结果就是目标节点在跳表中的排位。")]),t._v(" "),s("p",[t._v("举个例子，查找图中节点 3 在跳表中的排位，从头节点开始查找节点 3，查找的过程只经过了一个层（L2），并且层的跨度是 3，所以节点 3 在跳表中的排位是 3。")]),t._v(" "),s("p",[t._v("另外，图中的头节点其实也是 zskiplistNode 跳表节点，只不过头节点的后向指针、权重、元素值都没有用到，所以图中省略了这部分。")]),t._v(" "),s("p",[t._v("问题来了，由谁定义哪个跳表节点是头节点呢？这就介绍「跳表」结构体了，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" zskiplist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("跳表结构里包含了：")]),t._v(" "),s("ul",[s("li",[t._v("跳表的头尾节点，便于在O(1)时间复杂度内访问跳表的头节点和尾节点；")]),t._v(" "),s("li",[t._v("跳表的长度，便于在O(1)时间复杂度获取跳表节点的数量；")]),t._v(" "),s("li",[t._v("跳表的最大层数，便于在O(1)时间复杂度获取跳表中层高最大的那个节点的层数量；")])]),t._v(" "),s("h3",{attrs:{id:"跳表节点查询过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳表节点查询过程"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E8%B7%B3%E8%A1%A8%E8%8A%82%E7%82%B9%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("跳表节点查询过程")]),t._v(" "),s("p",[t._v("查找一个跳表节点的过程时，跳表会从头节点的最高层开始，逐一遍历每一层。在遍历某一层的跳表节点时，会用跳表节点中的 SDS 类型的元素和元素的权重来进行判断，共有两个判断条件：")]),t._v(" "),s("ul",[s("li",[t._v("如果当前节点的权重「小于」要查找的权重时，跳表就会访问该层上的下一个节点。")]),t._v(" "),s("li",[t._v("如果当前节点的权重「等于」要查找的权重时，并且当前节点的 SDS 类型数据「小于」要查找的数据时，跳表就会访问该层上的下一个节点。")])]),t._v(" "),s("p",[t._v("如果上面两个条件都不满足，或者下一个节点为空时，跳表就会使用目前遍历到的节点的 level 数组里的下一层指针，然后沿着下一层指针继续查找，这就相当于跳到了下一层接着查找。")]),t._v(" "),s("p",[t._v("举个例子，下图有个 3 层级的跳表。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/3%E5%B1%82%E8%B7%B3%E8%A1%A8-%E8%B7%A8%E5%BA%A6.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如果要查找「元素：abcd，权重：4」的节点，查找的过程是这样的：")]),t._v(" "),s("ul",[s("li",[t._v("先从头节点的最高层开始，L2 指向了「元素：abc，权重：3」节点，这个节点的权重比要查找节点的小，所以要访问该层上的下一个节点；")]),t._v(" "),s("li",[t._v("但是该层的下一个节点是空节点（ leve[2]指向的是空节点），于是就会跳到「元素：abc，权重：3」节点的下一层去找，也就是 leve[1];")]),t._v(" "),s("li",[t._v("「元素：abc，权重：3」节点的 leve[1] 的下一个指针指向了「元素：abcde，权重：4」的节点，然后将其和要查找的节点比较。虽然「元素：abcde，权重：4」的节点的权重和要查找的权重相同，但是当前节点的 SDS 类型数据「大于」要查找的数据，所以会继续跳到「元素：abc，权重：3」节点的下一层去找，也就是 leve[0]；")]),t._v(" "),s("li",[t._v("「元素：abc，权重：3」节点的 leve[0] 的下一个指针指向了「元素：abcd，权重：4」的节点，该节点正是要查找的节点，查询结束。")])]),t._v(" "),s("h3",{attrs:{id:"跳表节点层数设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳表节点层数设置"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E8%B7%B3%E8%A1%A8%E8%8A%82%E7%82%B9%E5%B1%82%E6%95%B0%E8%AE%BE%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("跳表节点层数设置")]),t._v(" "),s("p",[t._v("跳表的相邻两层的节点数量的比例会影响跳表的查询性能。")]),t._v(" "),s("p",[t._v("举个例子，下图的跳表，第二层的节点数量只有 1 个，而第一层的节点数量有 6 个。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/2802786ab4f52c1e248904e5cef33a74.png",alt:"img"}})]),t._v(" "),s("p",[t._v("这时，如果想要查询节点 6，那基本就跟链表的查询复杂度一样，就需要在第一层的节点中依次顺序查找，复杂度就是 O(N) 了。所以，为了降低查询复杂度，我们就需要维持相邻层结点数间的关系。")]),t._v(" "),s("p",[s("strong",[t._v("跳表的相邻两层的节点数量最理想的比例是 2:1，查找复杂度可以降低到 O(logN)")]),t._v("。")]),t._v(" "),s("p",[t._v("下图的跳表就是，相邻两层的节点数量的比例是 2 : 1。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/cdc14698f629c74bf5a239cc8a611aeb.png",alt:"img"}})]),t._v(" "),s("blockquote",[s("p",[t._v("那怎样才能维持相邻两层的节点数量的比例为 2 : 1 呢？")])]),t._v(" "),s("p",[t._v("如果采用新增节点或者删除节点时，来调整跳表节点以维持比例的方法的话，会带来额外的开销。")]),t._v(" "),s("p",[t._v("Redis 则采用一种巧妙的方法是，"),s("strong",[t._v("跳表在创建节点的时候，随机生成每个节点的层数")]),t._v("，并没有严格维持相邻两层的节点数量比例为 2 : 1 的情况。")]),t._v(" "),s("p",[t._v("具体的做法是，"),s("strong",[t._v("跳表在创建节点时候，会生成范围为[0-1]的一个随机数，如果这个随机数小于 0.25（相当于概率 25%），那么层数就增加 1 层，然后继续生成下一个随机数，直到随机数的结果大于 0.25 结束，最终确定该节点的层数")]),t._v("。")]),t._v(" "),s("p",[t._v("这样的做法，相当于每增加一层的概率不超过 25%，层数越高，概率越低，层高最大限制是 64。")]),t._v(" "),s("p",[t._v("虽然我前面讲解跳表的时候，图中的跳表的「头节点」都是 3 层高，但是其实"),s("strong",[t._v("如果层高最大限制是 64，那么在创建跳表「头节点」的时候，就会直接创建 64 层高的头节点")]),t._v("。")]),t._v(" "),s("p",[t._v("如下代码，创建跳表时，头节点的 level 数组有 ZSKIPLIST_MAXLEVEL个元素（层），节点不存储任何 member 和 score 值，level 数组元素的 forward 都指向NULL， span值都为0。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Create a new skiplist. */")]),t._v("\nzskiplist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zslCreate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zskiplist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zsl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    zsl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zsl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zsl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("level "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zsl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zsl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("header "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zslCreateNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ZSKIPLIST_MAXLEVEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" ZSKIPLIST_MAXLEVEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        zsl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forward "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        zsl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("span "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    zsl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("backward "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    zsl"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("tail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" zsl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("其中，ZSKIPLIST_MAXLEVEL 定义的是最高的层数，Redis 7.0 定义为 32，Redis 5.0 定义为 64，Redis 3.0 定义为 32。")]),t._v(" "),s("h3",{attrs:{id:"为什么用跳表而不用平衡树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么用跳表而不用平衡树"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E8%B7%B3%E8%A1%A8%E8%80%8C%E4%B8%8D%E7%94%A8%E5%B9%B3%E8%A1%A1%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("为什么用跳表而不用平衡树？")]),t._v(" "),s("p",[t._v("这里插一个常见的面试题：为什么 Zset 的实现用跳表而不用平衡树（如 AVL树、红黑树等）？")]),t._v(" "),s("p",[t._v("对于"),s("a",{attrs:{href:"https://news.ycombinator.com/item?id=1171423",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个问题 (opens new window)"),s("OutboundLink")],1),t._v("，Redis的作者 @antirez 是怎么说的：")]),t._v(" "),s("blockquote",[s("p",[t._v("There are a few reasons:")]),t._v(" "),s("ol",[s("li",[t._v("They are not very memory intensive. It's up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.")]),t._v(" "),s("li",[t._v("A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.")]),t._v(" "),s("li",[t._v("They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.")])])]),t._v(" "),s("p",[t._v("简单翻译一下，主要是从内存占用、对范围查找的支持、实现难易程度这三方面总结的原因：")]),t._v(" "),s("ul",[s("li",[t._v("它们不是非常内存密集型的。基本上由你决定。改变关于节点具有给定级别数的概率的参数将使其比 btree 占用更少的内存。")]),t._v(" "),s("li",[t._v("Zset 经常需要执行 ZRANGE 或 ZREVRANGE 的命令，即作为链表遍历跳表。通过此操作，跳表的缓存局部性至少与其他类型的平衡树一样好。")]),t._v(" "),s("li",[t._v("它们更易于实现、调试等。例如，由于跳表的简单性，我收到了一个补丁（已经在Redis master中），其中扩展了跳表，在 O(log(N) 中实现了 ZRANK。它只需要对代码进行少量修改。")])]),t._v(" "),s("p",[t._v("我再详细补充点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("从内存占用上来比较，跳表比平衡树更灵活一些")]),t._v("。平衡树每个节点包含 2 个指针（分别指向左右子树），而跳表每个节点包含的指针数目平均为 1/(1-p)，具体取决于参数 p 的大小。如果像 Redis里的实现一样，取 p=1/4，那么平均每个节点包含 1.33 个指针，比平衡树更有优势。")]),t._v(" "),s("li",[s("strong",[t._v("在做范围查找的时候，跳表比平衡树操作要简单")]),t._v("。在平衡树上，我们找到指定范围的小值之后，还需要以中序遍历的顺序继续寻找其它不超过大值的节点。如果不对平衡树进行一定的改造，这里的中序遍历并不容易实现。而在跳表上进行范围查找就非常简单，只需要在找到小值之后，对第 1 层链表进行若干步的遍历就可以实现。")]),t._v(" "),s("li",[s("strong",[t._v("从算法实现难度上来比较，跳表比平衡树要简单得多")]),t._v("。平衡树的插入和删除操作可能引发子树的调整，逻辑复杂，而跳表的插入和删除只需要修改相邻节点的指针，操作简单又快速。")])]),t._v(" "),s("h2",{attrs:{id:"quicklist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quicklist"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#quicklist",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("quicklist")]),t._v(" "),s("p",[t._v("在 Redis 3.0 之前，List 对象的底层数据结构是双向链表或者压缩列表。然后在 Redis 3.2 的时候，List 对象的底层改由 quicklist 数据结构实现。")]),t._v(" "),s("p",[t._v("其实 quicklist 就是「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表。")]),t._v(" "),s("p",[t._v("在前面讲压缩列表的时候，我也提到了压缩列表的不足，虽然压缩列表是通过紧凑型的内存布局节省了内存开销，但是因为它的结构设计，如果保存的元素数量增加，或者元素变大了，压缩列表会有「连锁更新」的风险，一旦发生，会造成性能下降。")]),t._v(" "),s("p",[t._v("quicklist 解决办法，"),s("strong",[t._v("通过控制每个链表节点中的压缩列表的大小或者元素个数，来规避连锁更新的问题。因为压缩列表元素越少或越小，连锁更新带来的影响就越小，从而提供了更好的访问性能。")])]),t._v(" "),s("h3",{attrs:{id:"quicklist-结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quicklist-结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#quicklist-%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("quicklist 结构设计")]),t._v(" "),s("p",[t._v("quicklist 的结构体跟链表的结构体类似，都包含了表头和表尾，区别在于 quicklist 的节点是 quicklistNode。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//quicklist的链表头")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//quicklist的链表头")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//quicklist的链表尾")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所有压缩列表中的总元素个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//quicklistNodes的个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" quicklist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("接下来看看，quicklistNode 的结构定义：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//前一个quicklistNode")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//前一个quicklistNode")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下一个quicklistNode")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//后一个quicklistNode")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//quicklistNode指向的压缩列表")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//压缩列表的的字节大小")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//压缩列表的元素个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ziplist中的元素个数 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" quicklistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以看到，quicklistNode 结构体里包含了前一个节点和下一个节点指针，这样每个 quicklistNode 形成了一个双向链表。但是链表节点的元素不再是单纯保存元素值，而是保存了一个压缩列表，所以 quicklistNode 结构体里有个指向压缩列表的指针 *zl。")]),t._v(" "),s("p",[t._v("我画了一张图，方便你理解 quicklist 数据结构。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/f46cbe347f65ded522f1cc3fd8dba549.png",alt:"img"}})]),t._v(" "),s("p",[t._v("在向 quicklist 添加一个元素的时候，不会像普通的链表那样，直接新建一个链表节点。而是会检查插入位置的压缩列表是否能容纳该元素，如果能容纳就直接保存到 quicklistNode 结构里的压缩列表，如果不能容纳，才会新建一个新的 quicklistNode 结构。")]),t._v(" "),s("p",[t._v("quicklist 会控制 quicklistNode 结构里的压缩列表的大小或者元素个数，来规避潜在的连锁更新的风险，但是这并没有完全解决连锁更新的问题。")]),t._v(" "),s("h2",{attrs:{id:"listpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#listpack"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#listpack",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("listpack")]),t._v(" "),s("p",[t._v("quicklist 虽然通过控制 quicklistNode 结构里的压缩列表的大小或者元素个数，来减少连锁更新带来的性能影响，但是并没有完全解决连锁更新的问题。")]),t._v(" "),s("p",[t._v("因为 quicklistNode 还是用了压缩列表来保存元素，压缩列表连锁更新的问题，来源于它的结构设计，所以要想彻底解决这个问题，需要设计一个新的数据结构。")]),t._v(" "),s("p",[t._v("于是，Redis 在 5.0 新设计一个数据结构叫 listpack，目的是替代压缩列表，它最大特点是 listpack 中每个节点不再包含前一个节点的长度了，压缩列表每个节点正因为需要保存前一个节点的长度字段，就会有连锁更新的隐患。")]),t._v(" "),s("p",[s("strong",[t._v("我看了 Redis 的 Github，在最新 6.2 发行版本中，Redis Hash 对象、ZSet 对象的底层数据结构的压缩列表还未被替换成 listpack，而 Redis 的最新代码（还未发布版本）已经将所有用到压缩列表底层数据结构的 Redis 对象替换成 listpack 数据结构来实现，估计不久将来，Redis 就会发布一个将压缩列表为 listpack 的发行版本")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"listpack-结构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#listpack-结构设计"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#listpack-%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("listpack 结构设计")]),t._v(" "),s("p",[t._v("listpack 采用了压缩列表的很多优秀的设计，比如还是用一块连续的内存空间来紧凑地保存数据，并且为了节省内存的开销，listpack 节点会采用不同的编码方式保存不同大小的数据。")]),t._v(" "),s("p",[t._v("我们先看看 listpack 结构：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/4d2dc376b5fd68dae70d9284ae82b73a.png",alt:"img"}})]),t._v(" "),s("p",[t._v("listpack 头包含两个属性，分别记录了 listpack 总字节数和元素数量，然后 listpack 末尾也有个结尾标识。图中的 listpack entry 就是 listpack 的节点了。")]),t._v(" "),s("p",[t._v("每个 listpack 节点结构如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/c5fb0a602d4caaca37ff0357f05b0abf.png",alt:"img"}})]),t._v(" "),s("p",[t._v("主要包含三个方面内容：")]),t._v(" "),s("ul",[s("li",[t._v("encoding，定义该元素的编码类型，会对不同长度的整数和字符串进行编码；")]),t._v(" "),s("li",[t._v("data，实际存放的数据；")]),t._v(" "),s("li",[t._v("len，encoding+data的总长度；")])]),t._v(" "),s("p",[t._v("可以看到，"),s("strong",[t._v("listpack 没有压缩列表中记录前一个节点长度的字段了，listpack 只记录当前节点的长度，当我们向 listpack 加入一个新元素的时候，不会影响其他节点的长度字段的变化，从而避免了压缩列表的连锁更新问题")]),t._v("。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("参考资料：")]),t._v(" "),s("ul",[s("li",[t._v("《Redis设计与实现》")]),t._v(" "),s("li",[t._v("《Redis 源码剖析与实战》")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("总结")]),t._v(" "),s("p",[t._v("终于完工了，松一口气。")]),t._v(" "),s("p",[t._v("好久没写那么长的图解技术文啦，这次潇潇洒洒写了 1.5 万字 + 画了 40 多张图，花费了不少时间，又是看书，又是看源码。")]),t._v(" "),s("p",[t._v("希望这篇文章，能帮你破除 Redis 数据结构的迷雾！")]),t._v(" "),s("h2",{attrs:{id:"读者问答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读者问答"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://www.xiaolincoding.com/redis/data_struct/data_struct.html#%E8%AF%BB%E8%80%85%E9%97%AE%E7%AD%94",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("读者问答")]),t._v(" "),s("blockquote",[s("p",[t._v("压缩列表的entry为什么要保存prevlen呢？listpack改成len之后不会影响功能吗？")])]),t._v(" "),s("p",[t._v("压缩列表的 entry 保存 prevlen 是为了实现节点从后往前遍历，知道前一个节点的长度，就可以计算前一个节点的偏移量。")]),t._v(" "),s("p",[t._v("listpack 一样可以支持从后往前遍历的。详细的算法可以看：https://github.com/antirez/listpack/blob/master/listpack.c 里的lpDecodeBacklen函数，lpDecodeBacklen 函数就可以从当前列表项起始位置的指针开始，向左逐个字节解析，得到前一项的 entry-len 值。")])])}),[],!1,null,null,null);s.default=e.exports}}]);