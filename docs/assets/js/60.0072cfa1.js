(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{333:function(t,r,_){"use strict";_.r(r);var a=_(14),v=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/catalog",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式目录"),r("OutboundLink")],1),t._v("（推荐看这个，非常详细有代码，且易懂）")]),t._v(" "),r("p",[t._v("my "),r("a",{attrs:{href:"https://gitee.com/IFANx/design-module/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitee"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"创建性模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建性模式"}},[t._v("#")]),t._v(" 创建性模式")]),t._v(" "),r("h4",{attrs:{id:"_1-工厂方法模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-工厂方法模式"}},[t._v("#")]),t._v(" 1."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/factory-method",target:"_blank",rel:"noopener noreferrer"}},[t._v("工厂方法模式"),r("OutboundLink")],1)]),t._v(" "),r("h4",{attrs:{id:"简单工厂-工厂方法与抽象工厂的比较-https-refactoringguru-cn-design-patterns-factory-comparison"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂-工厂方法与抽象工厂的比较-https-refactoringguru-cn-design-patterns-factory-comparison"}},[t._v("#")]),t._v(" （"),r("a",{attrs:{href:"https://gitee.com/IFANx/design-module/blob/master/src/main/java/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/factory/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单工厂，工厂方法与抽象工厂的比较"),r("OutboundLink")],1),t._v("）https://refactoringguru.cn/design-patterns/factory-comparison")]),t._v(" "),r("p",[r("strong",[t._v("亦称：")]),t._v(" 虚拟构造函数、Virtual Constructor、Factory Method")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("工厂方法模式")]),t._v("是一种创建型设计模式， "),r("strong",[t._v("其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。")]),t._v("(工厂方法模式建议使用特殊的"),r("em",[t._v("工厂")]),t._v("方法代替对于对象构造函数的直接调用 （即使用 "),r("code",[t._v("new")]),t._v("运算符）。 不用担心， 对象仍将通过 "),r("code",[t._v("new")]),t._v("运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。)")]),t._v(" "),r("p",[t._v("工厂方法："),r("strong",[t._v("定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。")])]),t._v(" "),r("p",[t._v("定义一个公共的工厂接口，子类工厂实现这个工厂接口，具体创建对象由这些实际的子类对象来创建，每次创建具体对象之前，先要创建子类工厂对象，通过这个子类工厂对象创建具体需要的哪个对象。")]),t._v(" "),r("h4",{attrs:{id:"_2-抽象工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-抽象工厂模式"}},[t._v("#")]),t._v(" 2."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/abstract-factory",target:"_blank",rel:"noopener noreferrer"}},[t._v("抽象工厂模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("strong",[t._v("意图")])]),t._v(" "),r("p",[r("strong",[t._v("抽象工厂模式")]),t._v("是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。")]),t._v(" "),r("p",[t._v("工厂方法模式通过引入工厂等级结构，解决了简单工厂模式中工厂类职责太重的问题，但由于工厂方法模式中的每个工厂只生产一类产品，可能会导致系统中存在大量的工厂类，势必会增加系统的开销。此时，我们可以考虑将一些相关的产品组成一个“产品族”，由同一个工厂来统一生产，这就是抽象工厂模式的基本思想。")]),t._v(" "),r("p",[r("strong",[t._v("抽象工厂模式适合应用场景")])]),t._v(" "),r("p",[t._v("抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。他与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的多个产品等级结构。在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说，工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类。")]),t._v(" "),r("p",[t._v("在抽象工厂模式中，有一个"),r("strong",[t._v("产品族")]),t._v("的概念：所谓的产品族，是指**位于不同产品等级结构中功能相关联的产品组成的家族。**抽象工厂模式所提供的一系列产品就组成一个产品族；而工厂方法提供的一系列产品称为一个等级结构。")]),t._v(" "),r("p",[t._v("抽象工厂模式包含的角色（要素）：")]),t._v(" "),r("ul",[r("li",[t._v("AbstractFactory：抽象工厂，用于声明生成抽象产品的方法")]),t._v(" "),r("li",[t._v("ConcreteFactory：具体工厂，实现抽象工厂定义的方法，具体实现一系列产品对象的创建")]),t._v(" "),r("li",[t._v("AbstractProduct：抽象产品，定义一类产品对象的接口")]),t._v(" "),r("li",[t._v("ConcreteProduct：具体产品，通常在具体工厂里，会选择具体的产品实现，来创建符合抽象工厂定义的方法返回的产品类型的对象。")]),t._v(" "),r("li",[t._v("Client：客户端，使用抽象工厂来获取一系列所需要的产品对象")])]),t._v(" "),r("p",[t._v("抽象工厂模式和工厂方法模式一样，都符合开闭原则。但是不同的是，工厂方法模式在增加一个具体产品的时候，都要增加对应的工厂。但是抽象工厂模式只有在新增一个类型的具体产品时才需要新增工厂。也就是说，工厂方法模式的一个工厂只能创建一个具体产品。而抽象工厂模式的一个工厂可以创建属于一类类型的多种具体产品。工厂创建产品的个数介于简单工厂模式和工厂方法模式之间。")]),t._v(" "),r("p",[t._v("在以下情况下可以使用抽象工厂模式：")]),t._v(" "),r("ul",[r("li",[t._v("一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。")]),t._v(" "),r("li",[t._v("系统中有多于一个的产品族，而每次只使用其中某一产品族。")]),t._v(" "),r("li",[t._v("属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。")]),t._v(" "),r("li",[t._v("系统结构稳定，不会频繁的增加对象。")])]),t._v(" "),r("h4",{attrs:{id:"_3-生成器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-生成器模式"}},[t._v("#")]),t._v(" 3."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/builder",target:"_blank",rel:"noopener noreferrer"}},[t._v("生成器模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("亦称： 建造者模式、Builder")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("生成器模式")]),t._v("是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。")]),t._v(" "),r("p",[t._v("问题：")]),t._v(" "),r("h4",{attrs:{id:"_4-原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型模式"}},[t._v("#")]),t._v(" 4."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"}},[t._v("原型模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("strong",[t._v("亦称：")]),t._v(" 克隆、Clone、Prototype")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("原型模式")]),t._v("是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。")]),t._v(" "),r("p",[t._v("问题：")]),t._v(" "),r("p",[t._v("如果你有一个对象， 并希望生成与其完全相同的一个复制品， 你该如何实现呢？ 首先， 你必须新建一个属于相同类的对象。 然后， 你必须遍历原始对象的所有成员变量， 并将成员变量值复制到新对象中。")]),t._v(" "),r("p",[t._v("不错！ 但有个小问题。 并非所有对象都能通过这种方式进行复制， 因为有些对象可能拥有私有成员变量， 它们在对象本身以外是不可见的。直接复制还有另外一个问题。 因为你必须知道对象所属的类才能创建复制品， 所以代码必须依赖该类。 即使你可以接受额外的依赖性， 那还有另外一个问题： 有时你只知道对象所实现的接口， 而不知道其所属的具体类， 比如可向方法的某个参数传入实现了某个接口的任何对象。")]),t._v(" "),r("h4",{attrs:{id:"_5-单例模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-单例模式"}},[t._v("#")]),t._v(" 5."),r("a",{attrs:{href:"https://refactoringguru.cn/design-patterns/singleton",target:"_blank",rel:"noopener noreferrer"}},[t._v("单例模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("**亦称：**单件模式、Singleton")]),t._v(" "),r("p",[t._v("意图")]),t._v(" "),r("p",[r("strong",[t._v("单例模式")]),t._v("是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。")]),t._v(" "),r("h3",{attrs:{id:"结构性模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构性模式"}},[t._v("#")]),t._v(" 结构性模式")]),t._v(" "),r("h4",{attrs:{id:"_6-适配器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-适配器模式"}},[t._v("#")]),t._v(" 6.适配器模式")]),t._v(" "),r("p",[r("strong",[t._v("适配器模式")]),t._v("是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。")]),t._v(" "),r("p",[t._v("适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 例如， 你可以使用一个将所有数据转换为英制单位 （如英尺和英里） 的适配器封装运行于米和千米单位制中的对象。")]),t._v(" "),r("p",[t._v("适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：")]),t._v(" "),r("ol",[r("li",[t._v("适配器实现与其中一个现有对象兼容的接口。")]),t._v(" "),r("li",[t._v("现有对象可以使用该接口安全地调用适配器方法。")]),t._v(" "),r("li",[t._v("适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。")])]),t._v(" "),r("p",[t._v("有时你甚至可以创建一个双向适配器来实现双向转换调用。")]),t._v(" "),r("h4",{attrs:{id:"_7-桥接模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-桥接模式"}},[t._v("#")]),t._v(" 7.桥接模式")]),t._v(" "),r("h4",{attrs:{id:"_8-组合模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-组合模式"}},[t._v("#")]),t._v(" 8.组合模式")]),t._v(" "),r("h4",{attrs:{id:"_9-装饰模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-装饰模式"}},[t._v("#")]),t._v(" 9.装饰模式")]),t._v(" "),r("h4",{attrs:{id:"_10-外观模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-外观模式"}},[t._v("#")]),t._v(" 10.外观模式")]),t._v(" "),r("h4",{attrs:{id:"_11-亨元模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-亨元模式"}},[t._v("#")]),t._v(" 11.亨元模式")]),t._v(" "),r("p",[r("strong",[t._v("享元模式")]),t._v("是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。")]),t._v(" "),r("h4",{attrs:{id:"_12-代理模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-代理模式"}},[t._v("#")]),t._v(" 12.代理模式")]),t._v(" "),r("p",[t._v("代理模式是一种使用代理对象来执行目标对象的方法并在代理对象中增强目标对象方法的一种设计模式。")]),t._v(" "),r("p",[t._v("使用代理模式的原因有：")]),t._v(" "),r("ul",[r("li",[t._v("中介隔离作用：在某些情况下，一个客户类"),r("strong",[t._v("不想或者不能直接引用")]),t._v("一个委托对象，而代理对象可以在客户类和委托对象之间起到"),r("strong",[t._v("中介")]),t._v("的作用(代理类和委托类实现相同的接口)。以现实生活为例，经纪人就是明星的代理，外界可以通过联系经纪人来间接与明星沟通。")]),t._v(" "),r("li",[t._v("开放封闭原则：可以通过给代理类增加额外的功能来扩展委托类的功能，这样只需要修改代理类而不需要再修改委托类，符合开闭原则。代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服务。使用代理模式，可以在调用委托类业务功能的前后加入一些公共的服务(例如鉴权、计时、缓存、日志、事务处理等)，甚至修改委托类的业务功能。")])]),t._v(" "),r("p",[t._v("代理可以分为静态代理和动态代理，前者更接近代理模式的本质。")]),t._v(" "),r("ul",[r("li",[t._v("静态代理是由程序员编写代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就已确定。")]),t._v(" "),r("li",[t._v("动态代理是代理类的源码是在程序运行期间由编译器动态的生成(如JVM根据"),r("strong",[t._v("反射")]),t._v("等机制生成代理类)。代理类和委托类的关系在程序运行时确定。")])]),t._v(" "),r("h3",{attrs:{id:"行为模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行为模式"}},[t._v("#")]),t._v(" 行为模式")]),t._v(" "),r("h4",{attrs:{id:"_13-观察者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-观察者模式"}},[t._v("#")]),t._v(" 13.观察者模式")]),t._v(" "),r("h4",{attrs:{id:"_14-模版方法模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-模版方法模式"}},[t._v("#")]),t._v(" 14.模版方法模式")]),t._v(" "),r("h4",{attrs:{id:"_15-访问者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-访问者模式"}},[t._v("#")]),t._v(" 15.访问者模式")]),t._v(" "),r("h4",{attrs:{id:"_16-命令模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-命令模式"}},[t._v("#")]),t._v(" 16.命令模式")]),t._v(" "),r("h4",{attrs:{id:"_17-责任链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17-责任链"}},[t._v("#")]),t._v(" 17.责任链")]),t._v(" "),r("h4",{attrs:{id:"_18-迭代器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18-迭代器"}},[t._v("#")]),t._v(" 18.迭代器")]),t._v(" "),r("h4",{attrs:{id:"_19-中介者"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19-中介者"}},[t._v("#")]),t._v(" 19.中介者")]),t._v(" "),r("h4",{attrs:{id:"_20-备忘录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20-备忘录"}},[t._v("#")]),t._v(" 20.备忘录")]),t._v(" "),r("h4",{attrs:{id:"_21-状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_21-状态"}},[t._v("#")]),t._v(" 21.状态")]),t._v(" "),r("h4",{attrs:{id:"_22-策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_22-策略"}},[t._v("#")]),t._v(" 22.策略")])])}),[],!1,null,null,null);r.default=v.exports}}]);