(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{294:function(t,e,n){"use strict";n.r(e);var a=n(14),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"aop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),e("p",[t._v("https://javadoop.com/post/spring-aop-intro")]),t._v(" "),e("p",[t._v("AOP 要实现的是在我们原来写的代码的基础上，进行一定的包装，如在方法执行前、方法返回后、方法抛出异常后等地方进行一定的拦截处理或者叫增强处理。")]),t._v(" "),e("p",[t._v("AOP 的实现并不是因为 Java 提供了什么神奇的钩子，可以把方法的几个生命周期告诉我们，而是我们要实现一个代理，实际运行的实例其实是生成的代理类的实例。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("如果你是 web 开发者，有些时候，你可能需要的是一个 "),e("strong",[t._v("Filter 或一个 Interceptor")]),t._v("，而不一定是 AOP。")])]),t._v(" "),e("li",[e("p",[t._v("Spring AOP 只能作用于 Spring 容器中的 Bean，它是使用纯粹的 Java 代码实现的，只能作用于 bean 的方法。")])]),t._v(" "),e("li",[e("p",[t._v("Spring 提供了 AspectJ 的支持，后面我们会单独介绍怎么使用，一般来说我们用"),e("strong",[t._v("纯的")]),t._v(" Spring AOP 就够了。")])]),t._v(" "),e("li",[e("p",[t._v("很多人会对比 Spring AOP 和 AspectJ 的性能，Spring AOP 是基于代理实现的，在容器启动的时候需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 那么好。")])])]),t._v(" "),e("h1",{attrs:{id:"一、-pointcut"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、-pointcut"}},[t._v("#")]),t._v(" 一、@Pointcut")]),t._v(" "),e("p",[t._v("@Pointcut切点表达式非常丰富，可以将 "),e("strong",[t._v("方法(method)、类(class)、接口(interface)、包(package)")]),t._v("  等作为切入点，非常灵活，常用的有@annotation、@within、execution等方式，由于篇幅原因，本文先只介绍"),e("code",[t._v("@annotation")]),t._v("方式。")]),t._v(" "),e("h2",{attrs:{id:"annotation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#annotation"}},[t._v("#")]),t._v(" @annotation")]),t._v(" "),e("p",[t._v("@annotation方式是指：切入点 是指定作用于"),e("code",[t._v("方法上的注解")]),t._v("，即被Spring扫描到方法上带有该注解 就会执行切面通知。")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("java\n复制代码"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Pointcut")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@annotation(com.tiangang.aop.MethodLog)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("pointCut")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v("\n")])])]),e("p",[t._v("案例给出的@Pointcut说明：\n"),e("strong",[t._v('语法：@Pointcut(value = "@annotation(')]),t._v(" "),e("code",[t._v("注解类名")]),t._v(" "),e("strong",[t._v(')")')])]),t._v(" "),e("p",[t._v("使用Piontcut可以在使用Before之类的时候更简短（不用每一个切面方法都写切面注解类的全限定名）")]),t._v(" "),e("h1",{attrs:{id:"二、五种通知advice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、五种通知advice"}},[t._v("#")]),t._v(" 二、五种通知Advice")]),t._v(" "),e("p",[t._v("通过@Pointcut定义的切点，共有五种通知Advice方式：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("注解")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("@Before")]),t._v(" "),e("td",[t._v("前置通知，在被切的方法执行前执行")])]),t._v(" "),e("tr",[e("td",[t._v("@After")]),t._v(" "),e("td",[t._v("后置通知，在被切的方法执行后执行，比return更后")])]),t._v(" "),e("tr",[e("td",[t._v("@AfterRunning")]),t._v(" "),e("td",[t._v("返回通知，在被切的方法return后执行")])]),t._v(" "),e("tr",[e("td",[t._v("@AfterThrowing")]),t._v(" "),e("td",[t._v("异常通知，在被切的方法抛异常时执行")])]),t._v(" "),e("tr",[e("td",[t._v("@Around")]),t._v(" "),e("td",[t._v("环绕通知，这是功能最强大的Advice，可以自定义执行顺序")])])])]),t._v(" "),e("h2",{attrs:{id:"_1-before前置通知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-before前置通知"}},[t._v("#")]),t._v(" 1. @Before前置通知")]),t._v(" "),e("p",[e("strong",[t._v("前置通知在被切的方法执行之前执行!")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("java\n复制代码"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Before")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pointCut()"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("before")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinPoint")]),t._v(" joinPoint"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NoSuchMethodException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printMethod")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("joinPoint"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[前置通知before]"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v("\n")])])]),e("p",[e("strong",[t._v("注解语法")]),t._v("： "),e("strong",[t._v('@Before("')]),t._v(" "),e("code",[t._v("切点方法名")]),t._v(" "),e("strong",[t._v('()")')])]),t._v(" "),e("blockquote",[e("p",[t._v("注：只有《切点方法名》是动态的，其它是"),e("strong",[t._v("固定写法")]),t._v(".")])]),t._v(" "),e("p",[e("strong",[t._v("方法语法：")]),t._v(" "),e("code",[t._v("public void 方法名(JoinPoint joinPoint)")])]),t._v(" "),e("p",[t._v("这里有个非常重要参数"),e("strong",[t._v("JoinPoint")]),t._v("：连接点 。因为Spring"),e("strong",[t._v("只支持"),e("code",[t._v("方法")]),t._v("类型")]),t._v("的连接点，所以在Spring中连接点指的就是被拦截到的"),e("code",[t._v("方法")]),t._v(". 里面有三个常用的方法：")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("getSignature()")]),t._v("获取签名：")]),t._v(" "),e("p",[t._v("MethodSignature signature = (MethodSignature) joinPoint.getSignature();")]),t._v(" "),e("p",[t._v("通过signature可以获取"),e("strong",[t._v("名称")]),t._v(" getName() 和 "),e("strong",[t._v("参数类型")]),t._v(" getParameterTypes()")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("getTarget()")]),t._v("获取目标类：\nClass<?> clazz = joinPoint.getTarget().getClass();")]),t._v(" "),e("p",[t._v("如果被切的类 是 被别的切面切过的类，可以使用"),e("code",[t._v("AopUtils.getTargetClass")]),t._v("获取一个数组，再从数组中找你期望的类。")]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n复制代码import org.springframework.aop.support.AopUtils;\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("Class<?>[] targets")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("AopUtils.getTargetClass(joinPoint.getTarget()).getInterfaces();")]),t._v("\n\n12\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("getArgs()")]),t._v("获取入参值")]),t._v(" "),e("p",[t._v("Object[] args = joinPoint.getArgs()")])])]),t._v(" "),e("blockquote",[e("p",[t._v("基于这3个方法，可以轻松打印：被切的类名、方法名、方法参数值、方法参数类型等，printMethod方法如下：")])]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n复制代码private void printMethod(JoinPoint joinPoint, String name) throws NoSuchMethodException {\n    "),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("MethodSignature signature")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("(MethodSignature) joinPoint.getSignature();")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("Class<?> clazz")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("joinPoint.getTarget().getClass();")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("Method method")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("clazz.getMethod(signature.getName(), signature.getParameterTypes());")]),t._v('\n    System.out.printf("[MethodLogAspect]切面 %s 打印 -> [className]:%s  ->  [methodName]:%s  ->  [methodArgs]:%s%n", name, clazz.getName(), method.getName(), Arrays.toString(joinPoint.getArgs()));\n}\n\n123456\n')])])]),e("p",[t._v("调用测试类，输出结果如下：")]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n复制代码[MethodLogAspect]切面 [前置通知before] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("方法内打印: a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10  b=2")]),t._v(" \n\n12\n")])])]),e("h2",{attrs:{id:"_2-after后置通知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-after后置通知"}},[t._v("#")]),t._v(" 2. @After后置通知")]),t._v(" "),e("p",[e("strong",[t._v("后置通知在被切的方法执行之后执行，"),e("code",[t._v("无论被切方法是否异常都会执行!")])])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("java\n复制代码"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@After")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pointCut()"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("after")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JoinPoint")]),t._v(" joinPoint"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NoSuchMethodException")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printMethod")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("joinPoint"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[后置通知after]"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v("\n")])])]),e("p",[e("strong",[t._v("注解语法")]),t._v("： "),e("strong",[t._v('@After("')]),t._v(" "),e("code",[t._v("切点方法名")]),t._v(" "),e("strong",[t._v('()")')])]),t._v(" "),e("blockquote",[e("p",[t._v("注：只有《切点方法名》是动态的，其它是"),e("strong",[t._v("固定写法")]),t._v(".")])]),t._v(" "),e("p",[e("strong",[t._v("方法语法：")]),t._v(" "),e("code",[t._v("public void 方法名(JoinPoint joinPoint)")])]),t._v(" "),e("p",[t._v("调用测试类，输出结果如下：")]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n复制代码[MethodLogAspect]切面 [前置通知after] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("方法内打印: a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10  b=2")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [后置通知after] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n\n123\n")])])]),e("h2",{attrs:{id:"_3-afterrunning返回通知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-afterrunning返回通知"}},[t._v("#")]),t._v(" 3. @AfterRunning返回通知")]),t._v(" "),e("p",[e("strong",[t._v("返回通知在被切的方法return后执行，带有返回值，"),e("code",[t._v("如果被切方法异常则不会执行!")])])]),t._v(" "),e("p",[t._v("这里多了一个参数"),e("code",[t._v("Object result")]),t._v("，注解上也多了一个参数："),e("code",[t._v("returning")])]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("复制代码@AfterReturning(value")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"pointCut()", returning = "result")')]),t._v('\npublic void afterReturning(JoinPoint joinPoint, Object result) throws NoSuchMethodException {\n    printMethod(joinPoint, "[返回通知afterReturning]");\n    System.out.printf("[MethodLogAspect]切面 [返回通知afterReturning] 打印结果 -> result:%s%n", result);\n}\n\n12345\n')])])]),e("p",[e("strong",[t._v("注解语法")]),t._v("： "),e("strong",[t._v('@AfterReturning(value = "')]),t._v(" "),e("code",[t._v("切点方法名")]),t._v(" "),e("strong",[t._v('(), returning = "')]),t._v(" "),e("code",[t._v("返回值参数名")]),t._v(" "),e("strong",[t._v('")')])]),t._v(" "),e("blockquote",[e("p",[t._v("注：只有《切点方法名》和 《返回值参数名》是动态的，其它是"),e("strong",[t._v("固定写法")]),t._v(".")])]),t._v(" "),e("p",[e("strong",[t._v("方法语法：")]),t._v(" "),e("code",[t._v("public void 方法名(JoinPoint joinPoint, Object result)")])]),t._v(" "),e("p",[t._v("调用测试类，输出结果如下：")]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n复制代码[MethodLogAspect]切面 [前置通知before] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("方法内打印: a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10  b=2")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [返回通知afterReturning] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [返回通知afterReturning] 打印结果 -> result:5\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [后置通知after] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n\n12345\n")])])]),e("h2",{attrs:{id:"_4-afterthrowing异常通知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-afterthrowing异常通知"}},[t._v("#")]),t._v(" 4. @AfterThrowing异常通知")]),t._v(" "),e("p",[e("strong",[t._v("异常通知只在被切方法异常时执行，否则不执行。")])]),t._v(" "),e("p",[t._v("这里多了一个参数"),e("code",[t._v("Exception e")]),t._v("，表示捕获所有异常，也可以设置为具体某一个异常，例如NullPointerException、RpcException等等。注解上也多了一个参数："),e("code",[t._v("throwing")])]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("复制代码@AfterThrowing(value")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('"pointCut()", throwing = "e")')]),t._v('\npublic void afterThrowing(JoinPoint joinPoint, Exception e) throws NoSuchMethodException {\n    printMethod(joinPoint, "[异常通知afterThrowing]");\n    System.out.printf("[MethodLogAspect]切面 [异常通知afterThrowing] 打印异常 -> Exception:%s%n", e);\n}\n\n12345\n')])])]),e("p",[e("strong",[t._v("注解语法")]),t._v("： "),e("strong",[t._v('@AfterThrowing(value = "')]),t._v(" "),e("code",[t._v("切点方法名")]),t._v(" "),e("strong",[t._v('(), throwing = "')]),t._v(" "),e("code",[t._v("异常参数名")]),t._v(" "),e("strong",[t._v('")')])]),t._v(" "),e("blockquote",[e("p",[t._v("注：只有《切点方法名》和 《异常参数名》是动态的，其它是"),e("strong",[t._v("固定写法")]),t._v(".")])]),t._v(" "),e("p",[e("strong",[t._v("方法语法：")]),t._v(" "),e("code",[t._v("public void 方法名(JoinPoint joinPoint, Exception e)")])]),t._v(" "),e("p",[t._v("调用测试类，输出结果如下：")]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n复制代码[MethodLogAspect]切面 [前置通知before] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 0]\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("方法内打印: a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10  b=0")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [异常通知afterThrowing] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 0]\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [异常通知afterThrowing] 打印异常 -> Exception:java.lang.ArithmeticException: / by zero\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [后置通知after] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 0]\n2023-01-06 21:05:06.536 ERROR 15436 --- [nio-8080-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause\n\n123456\n")])])]),e("h2",{attrs:{id:"_5-around环绕通知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-around环绕通知"}},[t._v("#")]),t._v(" 5. @Around环绕通知")]),t._v(" "),e("p",[t._v("环绕通知方法可以包含上面四种通知方法，是最全面最灵活的通知方法。")]),t._v(" "),e("p",[t._v("这里的参数类型和其它通知方法不同，从"),e("code",[t._v("JoinPoint")]),t._v("变为"),e("code",[t._v("ProceedingJoinPoint")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v('ini\n复制代码@Around("pointCut()")\npublic Object around(ProceedingJoinPoint joinPoint) throws Throwable {\n    printMethod(joinPoint, "[环绕通知around][proceed之前]");\n    // 执行方法, 可以对joinPoint.proceed()加try catch处理异常\n    '),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("Object result")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("joinPoint.proceed();")]),t._v('\n    System.out.printf("[MethodLogAspect]切面 [环绕通知around][proceed之后]打印 -> [result]:%s%n", result);\n    return result;\n}\n\n12345678\n')])])]),e("p",[e("strong",[t._v("注解语法")]),t._v("： "),e("strong",[t._v('@Around("')]),t._v(" "),e("code",[t._v("切点方法名")]),t._v(" "),e("strong",[t._v('()")')])]),t._v(" "),e("blockquote",[e("p",[t._v("注：只有《切点方法名》是动态的，其它是"),e("strong",[t._v("固定写法")]),t._v(".")])]),t._v(" "),e("p",[e("strong",[t._v("方法语法：")]),t._v(" "),e("code",[t._v("public Object 方法名(ProceedingJoinPoint joinPoint) throws Throwable")])]),t._v(" "),e("p",[t._v("调用测试类，输出结果如下：")]),t._v(" "),e("div",{staticClass:"language-ini extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ini"}},[e("code",[t._v("ini\n复制代码[MethodLogAspect]切面 [环绕通知around][proceed之前] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [前置通知before] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("方法内打印: a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10  b=2")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [返回通知afterReturning] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [返回通知afterReturning] 打印结果 -> result:5\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [后置通知after] 打印 -> [className]:com.tiangang.service.DemoService  ->  [methodName]:divide  ->  [methodArgs]:[10, 2]\n"),e("span",{pre:!0,attrs:{class:"token section"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token section-name selector"}},[t._v("MethodLogAspect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("切面 [环绕通知around][proceed之后]打印 -> [result]:5\n\n1234567\n")])])]),e("hr"),t._v(" "),e("h1",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("本文主要说明了，如何通过"),e("code",[t._v("@Aspect")]),t._v("定义一个切面类，并结合"),e("code",[t._v("打印Log案例")]),t._v("主要介绍了两大核心的用法：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("@Pointcut")]),t._v("使用 "),e("strong",[t._v("@annotation")]),t._v(" 方式定义切入点")]),t._v(" "),e("li",[e("strong",[t._v("五种通知(Advice)注解用法")]),t._v("：@Before、@After、@AfterRunning、@AfterThrowing、@Around")])])])}),[],!1,null,null,null);e.default=s.exports}}]);