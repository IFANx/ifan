(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{348:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mysql-有哪些锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-有哪些锁"}},[t._v("#")]),t._v(" MySQL 有哪些锁？")]),t._v(" "),s("p",[t._v("大家好，我是小林。")]),t._v(" "),s("p",[t._v("这次，来说说 "),s("strong",[t._v("MySQL 的锁")]),t._v("，主要是 Q&A 的形式，看起来会比较轻松。")]),t._v(" "),s("p",[t._v("不多 BB 了，"),s("strong",[t._v("发车！")])]),t._v(" "),s("p",[t._v("在 MySQL 里，根据加锁的范围，可以分为"),s("strong",[t._v("全局锁、表级锁和行锁")]),t._v("三类。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/1e37f6994ef44714aba03b8046b1ace2.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"全局锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E5%85%A8%E5%B1%80%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("全局锁")]),t._v(" "),s("blockquote",[s("p",[t._v("全局锁是怎么用的？")])]),t._v(" "),s("p",[t._v("要使用全局锁，则要执行这条命令：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("flush "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tables")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v("\n")])])]),s("p",[t._v("执行后，"),s("strong",[t._v("整个数据库就处于只读状态了")]),t._v("，这时其他线程执行以下操作，都会被阻塞：")]),t._v(" "),s("ul",[s("li",[t._v("对数据的增删改操作，比如 insert、delete、update等语句；")]),t._v(" "),s("li",[t._v("对表结构的更改操作，比如 alter table、drop table 等语句。")])]),t._v(" "),s("p",[t._v("如果要释放全局锁，则要执行这条命令：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unlock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tables")]),t._v("\n")])])]),s("p",[t._v("当然，当会话断开了，全局锁会被自动释放。")]),t._v(" "),s("blockquote",[s("p",[t._v("全局锁应用场景是什么？")])]),t._v(" "),s("p",[t._v("全局锁主要应用于做"),s("strong",[t._v("全库逻辑备份")]),t._v("，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。")]),t._v(" "),s("p",[t._v("举个例子大家就知道了。")]),t._v(" "),s("p",[t._v("在全库逻辑备份期间，假设不加全局锁的场景，看看会出现什么意外的情况。")]),t._v(" "),s("p",[t._v("如果在全库逻辑备份期间，有用户购买了一件商品，一般购买商品的业务逻辑是会涉及到多张数据库表的更新，比如在用户表更新该用户的余额，然后在商品表更新被购买的商品的库存。")]),t._v(" "),s("p",[t._v("那么，有可能出现这样的顺序：")]),t._v(" "),s("ol",[s("li",[t._v("先备份了用户表的数据；")]),t._v(" "),s("li",[t._v("然后有用户发起了购买商品的操作；")]),t._v(" "),s("li",[t._v("接着再备份商品表的数据。")])]),t._v(" "),s("p",[t._v("也就是在备份用户表和商品表之间，有用户购买了商品。")]),t._v(" "),s("p",[t._v("这种情况下，备份的结果是用户表中该用户的余额并没有扣除，反而商品表中该商品的库存被减少了，如果后面用这个备份文件恢复数据库数据的话，用户钱没少，而库存少了，等于用户白嫖了一件商品。")]),t._v(" "),s("p",[t._v("所以，在全库逻辑备份期间，加上全局锁，就不会出现上面这种情况了。")]),t._v(" "),s("blockquote",[s("p",[t._v("加全局锁又会带来什么缺点呢？")])]),t._v(" "),s("p",[t._v("加上全局锁，意味着整个数据库都是只读状态。")]),t._v(" "),s("p",[t._v("那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。")]),t._v(" "),s("blockquote",[s("p",[t._v("既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？")])]),t._v(" "),s("p",[t._v("有的，如果数据库的引擎支持的事务支持"),s("strong",[t._v("可重复读的隔离级别")]),t._v("，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。")]),t._v(" "),s("p",[t._v("因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。")]),t._v(" "),s("p",[t._v("备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 "),s("code",[t._v("–single-transaction")]),t._v(" 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。")]),t._v(" "),s("p",[t._v("InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。")]),t._v(" "),s("p",[t._v("但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。")]),t._v(" "),s("h2",{attrs:{id:"表级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表级锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E8%A1%A8%E7%BA%A7%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("表级锁")]),t._v(" "),s("blockquote",[s("p",[t._v("MySQL 表级锁有哪些？具体怎么用的。")])]),t._v(" "),s("p",[t._v("MySQL 里面表级别的锁有这几种：")]),t._v(" "),s("ul",[s("li",[t._v("表锁；")]),t._v(" "),s("li",[t._v("元数据锁（MDL）;")]),t._v(" "),s("li",[t._v("意向锁；")]),t._v(" "),s("li",[t._v("AUTO-INC 锁；")])]),t._v(" "),s("h3",{attrs:{id:"表锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E8%A1%A8%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("表锁")]),t._v(" "),s("p",[t._v("先来说说"),s("strong",[t._v("表锁")]),t._v("。")]),t._v(" "),s("p",[t._v("如果我们想对学生表（t_student）加表锁，可以使用下面的命令：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表级别的共享锁，也就是读锁；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tables")]),t._v(" t_student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表级别的独占锁，也就是写锁；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tables")]),t._v(" t_stuent "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。")]),t._v(" "),s("p",[t._v("也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。")]),t._v(" "),s("p",[t._v("要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unlock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tables")]),t._v("\n")])])]),s("p",[t._v("另外，当会话退出后，也会释放所有表锁。")]),t._v(" "),s("p",[t._v("不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，"),s("strong",[t._v("InnoDB 牛逼的地方在于实现了颗粒度更细的行级锁")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"元数据锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元数据锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E5%85%83%E6%95%B0%E6%8D%AE%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("元数据锁")]),t._v(" "),s("p",[t._v("再来说说"),s("strong",[t._v("元数据锁")]),t._v("（MDL）。")]),t._v(" "),s("p",[t._v("我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：")]),t._v(" "),s("ul",[s("li",[t._v("对一张表进行 CRUD 操作时，加的是 "),s("strong",[t._v("MDL 读锁")]),t._v("；")]),t._v(" "),s("li",[t._v("对一张表做结构变更操作的时候，加的是 "),s("strong",[t._v("MDL 写锁")]),t._v("；")])]),t._v(" "),s("p",[t._v("MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。")]),t._v(" "),s("p",[t._v("当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。")]),t._v(" "),s("p",[t._v("反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。")]),t._v(" "),s("blockquote",[s("p",[t._v("MDL 不需要显示调用，那它是在什么时候释放的?")])]),t._v(" "),s("p",[t._v("MDL 是在事务提交后才会释放，这意味着"),s("strong",[t._v("事务执行期间，MDL 是一直持有的")]),t._v("。")]),t._v(" "),s("p",[t._v("那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：")]),t._v(" "),s("ol",[s("li",[t._v("首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；")]),t._v(" "),s("li",[t._v("然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；")]),t._v(" "),s("li",[t._v("接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，")])]),t._v(" "),s("p",[t._v("那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？")])]),t._v(" "),s("p",[t._v("这是因为申请 MDL 锁的操作会形成一个队列，队列中"),s("strong",[t._v("写锁获取优先级高于读锁")]),t._v("，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。")]),t._v(" "),s("p",[t._v("所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。")]),t._v(" "),s("h3",{attrs:{id:"意向锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#意向锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E6%84%8F%E5%90%91%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("意向锁")]),t._v(" "),s("p",[t._v("接着，说说"),s("strong",[t._v("意向锁")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；")]),t._v(" "),s("li",[t._v("在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；")])]),t._v(" "),s("p",[t._v("也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。")]),t._v(" "),s("p",[t._v("而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。")]),t._v(" "),s("p",[t._v("不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先在表上加上意向共享锁，然后对读取的记录加共享锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("share")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先表上加上意向独占锁，然后对读取的记录加独占锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。")])]),t._v(" "),s("p",[t._v("表锁和行锁是满足读读共享、读写互斥、写写互斥的。")]),t._v(" "),s("p",[t._v("如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。")]),t._v(" "),s("p",[t._v("那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。")]),t._v(" "),s("p",[t._v("所以，"),s("strong",[t._v("意向锁的目的是为了快速判断表里是否有记录被加锁")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"auto-inc-锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-inc-锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#auto-inc-%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("AUTO-INC 锁")]),t._v(" "),s("p",[t._v("表里的主键通常都会设置成自增的，这是通过对主键字段声明 "),s("code",[t._v("AUTO_INCREMENT")]),t._v(" 属性实现的。")]),t._v(" "),s("p",[t._v("之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 "),s("strong",[t._v("AUTO-INC 锁")]),t._v("实现的。")]),t._v(" "),s("p",[t._v("AUTO-INC 锁是特殊的表锁机制，锁"),s("strong",[t._v("不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("在插入数据时，会加一个表级别的 AUTO-INC 锁")]),t._v("，然后为被 "),s("code",[t._v("AUTO_INCREMENT")]),t._v(" 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。")]),t._v(" "),s("p",[t._v("那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 "),s("code",[t._v("AUTO_INCREMENT")]),t._v(" 修饰的字段的值是连续递增的。")]),t._v(" "),s("p",[t._v("但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。")]),t._v(" "),s("p",[t._v("因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种"),s("strong",[t._v("轻量级的锁")]),t._v("来实现自增。")]),t._v(" "),s("p",[t._v("一样也是在插入数据的时候，会为被 "),s("code",[t._v("AUTO_INCREMENT")]),t._v(" 修饰的字段加上轻量级锁，"),s("strong",[t._v("然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁")]),t._v("。")]),t._v(" "),s("p",[t._v("InnoDB 存储引擎提供了个 innodb_autoinc_lock_mode 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。")]),t._v(" "),s("ul",[s("li",[t._v("当 innodb_autoinc_lock_mode = 0，就采用 AUTO-INC 锁，语句执行结束后才释放锁；")]),t._v(" "),s("li",[t._v("当 innodb_autoinc_lock_mode = 2，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。")]),t._v(" "),s("li",[t._v("当 innodb_autoinc_lock_mode = 1：\n"),s("ul",[s("li",[t._v("普通 insert 语句，自增锁在申请之后就马上释放；")]),t._v(" "),s("li",[t._v("类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；")])])])]),t._v(" "),s("p",[t._v("当 innodb_autoinc_lock_mode = 2 是性能最高的方式，但是当搭配 binlog 的日志格式是 statement 一起使用的时候，在「主从复制的场景」中会发生"),s("strong",[t._v("数据不一致的问题")]),t._v("。")]),t._v(" "),s("p",[t._v("举个例子，考虑下面场景：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/innodb_autoinc_lock_mode=2.png",alt:"img"}})]),t._v(" "),s("p",[t._v("session A 往表 t 中插入了 4 行数据，然后创建了一个相同结构的表 t2，然后"),s("strong",[t._v("两个 session 同时执行向表 t2 中插入数据")]),t._v("。")]),t._v(" "),s("p",[t._v("如果 innodb_autoinc_lock_mode = 2，意味着「申请自增主键后就释放锁，不必等插入语句执行完」。那么就可能出现这样的情况：")]),t._v(" "),s("ul",[s("li",[t._v("session B 先插入了两个记录，(1,1,1)、(2,2,2)；")]),t._v(" "),s("li",[t._v("然后，session A 来申请自增 id 得到 id=3，插入了（3,5,5)；")]),t._v(" "),s("li",[t._v("之后，session B 继续执行，插入两条记录 (4,3,3)、 (5,4,4)。")])]),t._v(" "),s("p",[t._v("可以看到，"),s("strong",[t._v("session B 的 insert 语句，生成的 id 不连续")]),t._v("。")]),t._v(" "),s("p",[t._v("当「主库」发生了这种情况，binlog 面对 t2 表的更新只会记录这两个 session 的 insert 语句，如果 binlog_format=statement，记录的语句就是原始语句。记录的顺序要么先记 session A 的 insert 语句，要么先记 session B 的 insert 语句。")]),t._v(" "),s("p",[t._v("但不论是哪一种，这个 binlog 拿去「从库」执行，这时从库是按「顺序」执行语句的，只有当执行完一条 SQL 语句后，才会执行下一条 SQL。因此，在"),s("strong",[t._v("从库上「不会」发生像主库那样两个 session 「同时」执行向表 t2 中插入数据的场景。所以，在备库上执行了 session B 的 insert 语句，生成的结果里面，id 都是连续的。这时，主从库就发生了数据不一致")]),t._v("。")]),t._v(" "),s("p",[t._v("要解决这问题，binlog 日志格式要设置为 row，这样在 binlog 里面记录的是主库分配的自增值，到备库执行的时候，主库的自增值是什么，从库的自增值就是什么。")]),t._v(" "),s("p",[t._v("所以，"),s("strong",[t._v("当 innodb_autoinc_lock_mode = 2 时，并且 binlog_format = row，既能提升并发性，又不会出现数据一致性问题")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"行级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行级锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E8%A1%8C%E7%BA%A7%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("行级锁")]),t._v(" "),s("p",[t._v("InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。")]),t._v(" "),s("p",[t._v("前面也提到，普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为"),s("strong",[t._v("锁定读")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对读取的记录加共享锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("share")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对读取的记录加独占锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面这两条语句必须在一个事务中，"),s("strong",[t._v("因为当事务提交了，锁就会被释放")]),t._v("，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。")]),t._v(" "),s("p",[t._v("共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/x%E9%94%81%E5%92%8Cs%E9%94%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("行级锁的类型主要有三类：")]),t._v(" "),s("ul",[s("li",[t._v("Record Lock，记录锁，也就是仅仅把一条记录锁上；")]),t._v(" "),s("li",[t._v("Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；")]),t._v(" "),s("li",[t._v("Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。")])]),t._v(" "),s("h3",{attrs:{id:"record-lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#record-lock"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#record-lock",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Record Lock")]),t._v(" "),s("p",[t._v("Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：")]),t._v(" "),s("ul",[s("li",[t._v("当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;")]),t._v(" "),s("li",[t._v("当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。")])]),t._v(" "),s("p",[t._v("举个例子，当一个事务执行了下面这条语句：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmysql "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("就是对 t_test 表中主键 id 为 1 的这条记录加上 X 型的记录锁，这样其他事务就无法对这条记录进行修改了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E8%AE%B0%E5%BD%95%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("当事务执行 commit 后，事务过程中生成的锁都会被释放。")]),t._v(" "),s("h3",{attrs:{id:"gap-lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gap-lock"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#gap-lock",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Gap Lock")]),t._v(" "),s("p",[t._v("Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。")]),t._v(" "),s("p",[t._v("假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/gap%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，"),s("strong",[t._v("间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"next-key-lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next-key-lock"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#next-key-lock",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Next-Key Lock")]),t._v(" "),s("p",[t._v("Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。")]),t._v(" "),s("p",[t._v("假设，表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id = 4 记录，也不能修改 id = 5 这条记录。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%B8%B4%E9%94%AE%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。")]),t._v(" "),s("p",[s("strong",[t._v("next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的")]),t._v("。")]),t._v(" "),s("p",[t._v("比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。")]),t._v(" "),s("p",[t._v("虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。")]),t._v(" "),s("h3",{attrs:{id:"插入意向锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入意向锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/mysql_lock.html#%E6%8F%92%E5%85%A5%E6%84%8F%E5%90%91%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("插入意向锁")]),t._v(" "),s("p",[t._v("一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。")]),t._v(" "),s("p",[t._v("如果有的话，插入操作就会发生"),s("strong",[t._v("阻塞")]),t._v("，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个"),s("strong",[t._v("插入意向锁")]),t._v("，表明有事务想在某个区间插入新记录，但是现在处于等待状态。")]),t._v(" "),s("p",[t._v("举个例子，假设事务 A 已经对表加了一个范围 id 为（3，5）间隙锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/gap%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("当事务 A 还没提交的时候，事务 B 向该表插入一条 id = 4 的新记录，这时会判断到插入的位置已经被事务 A 加了间隙锁，于是事物 B 会生成一个插入意向锁，然后将锁的状态设置为等待状态（"),s("em",[t._v("PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁")]),t._v("），此时事务 B 就会发生阻塞，直到事务 A 提交了事务。")]),t._v(" "),s("p",[t._v("插入意向锁名字虽然有意向锁，但是它并"),s("strong",[t._v("不是意向锁，它是一种特殊的间隙锁，属于行级别锁")]),t._v("。")]),t._v(" "),s("p",[t._v("如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。")]),t._v(" "),s("p",[t._v("插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。")]),t._v(" "),s("h1",{attrs:{id:"mysql-是怎么加锁的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-是怎么加锁的"}},[t._v("#")]),t._v(" MySQL 是怎么加锁的？")]),t._v(" "),s("p",[t._v("大家好，我是小林。")]),t._v(" "),s("p",[t._v("是不是很多人都对 MySQL 加行级锁的规则搞的迷迷糊糊，对记录一会加的是 next-key 锁，一会加是间隙锁，一会又是记录锁。")]),t._v(" "),s("p",[t._v("坦白说，确实还挺复杂的，但是好在我找点了点规律，也知道如何如何用命令分析加了什么类型的行级锁。")]),t._v(" "),s("p",[t._v("之前我写过一篇关于「MySQL 是怎么加行级锁的？」的文章，随着我写 MySQL 锁相关的文章越来越多时，后来发现当时的文章写的不够详细。")]),t._v(" "),s("p",[t._v("为了让大家很清楚的知道 MySQL 是怎么加行级锁的，以及如何用命令分析加了什么行级锁，再加上为了解释清楚为什么 MySQL 要这么加行级锁，所以"),s("strong",[t._v("我重写了这篇文章")]),t._v("。")]),t._v(" "),s("p",[t._v("这一重写，就多增加了 1W 多字 + 30 张图，所以全完算是新的文章了。")]),t._v(" "),s("p",[t._v("文章内容比较长，大家可以耐心看下去，看完之后你会有一种突然被顿悟的感觉，因为我自己写完这篇文章后，自己也被自己顿悟了。")]),t._v(" "),s("h2",{attrs:{id:"什么-sql-语句会加行级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么-sql-语句会加行级锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#%E4%BB%80%E4%B9%88-sql-%E8%AF%AD%E5%8F%A5%E4%BC%9A%E5%8A%A0%E8%A1%8C%E7%BA%A7%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("什么 SQL 语句会加行级锁？")]),t._v(" "),s("p",[t._v("InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁，所以后面的内容都是基于 InnoDB 引擎 的。")]),t._v(" "),s("p",[t._v("所以，在说 MySQL 是怎么加行级锁的时候，其实是在说 InnoDB 引擎是怎么加行级锁的。")]),t._v(" "),s("p",[t._v("普通的 select 语句是不会对记录加锁的（除了串行化隔离级别），因为它属于快照读，是通过 MVCC（多版本并发控制）实现的。")]),t._v(" "),s("p",[t._v("如果要在查询时对记录加行级锁，可以使用下面这两个方式，这两种查询会加锁的语句称为"),s("strong",[t._v("锁定读")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对读取的记录加共享锁(S型锁)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("share")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对读取的记录加独占锁(X型锁)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面这两条语句必须在一个事务中，"),s("strong",[t._v("因为当事务提交了，锁就会被释放")]),t._v("，所以在使用这两条语句的时候，要加上 begin 或者 start transaction 开启事务的语句。")]),t._v(" "),s("p",[s("strong",[t._v("除了上面这两条锁定读语句会加行级锁之外，update 和 delete 操作都会加行级锁，且锁的类型都是独占锁(X型锁)")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对操作的记录加独占锁(X型锁)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对操作的记录加独占锁(X型锁)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/x%E9%94%81%E5%92%8Cs%E9%94%81.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"行级锁有哪些种类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行级锁有哪些种类"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#%E8%A1%8C%E7%BA%A7%E9%94%81%E6%9C%89%E5%93%AA%E4%BA%9B%E7%A7%8D%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("行级锁有哪些种类？")]),t._v(" "),s("p",[t._v("不同隔离级别下，行级锁的种类是不同的。")]),t._v(" "),s("p",[t._v("在读已提交隔离级别下，行级锁的种类只有记录锁，也就是仅仅把一条记录锁上。")]),t._v(" "),s("p",[t._v("在可重复读隔离级别下，行级锁的种类除了有记录锁，还有间隙锁（目的是为了避免幻读），所以行级锁的种类主要有三类：")]),t._v(" "),s("ul",[s("li",[t._v("Record Lock，记录锁，也就是仅仅把一条记录锁上；")]),t._v(" "),s("li",[t._v("Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；")]),t._v(" "),s("li",[t._v("Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。")])]),t._v(" "),s("p",[t._v("接下来，分别介绍这三种行级锁。")]),t._v(" "),s("h3",{attrs:{id:"record-lock-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#record-lock-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#record-lock",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Record Lock")]),t._v(" "),s("p",[t._v("Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：")]),t._v(" "),s("ul",[s("li",[t._v("当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;")]),t._v(" "),s("li",[t._v("当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。")])]),t._v(" "),s("p",[t._v("举个例子，当一个事务执行了下面这条语句：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmysql "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("事务会对表中主键 id = 1 的这条记录加上 X 型的记录锁，如果这时候其他事务对这条记录进行删除或者更新操作，那么这些操作都会被阻塞。注意，其他事务插入一条 id = 1 的新记录并不会被阻塞，而是会报主键冲突的错误，这是因为主键有唯一性的约束。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E8%AE%B0%E5%BD%95%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("当事务执行 commit 后，事务过程中生成的锁都会被释放。")]),t._v(" "),s("h3",{attrs:{id:"gap-lock-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gap-lock-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#gap-lock",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Gap Lock")]),t._v(" "),s("p",[t._v("Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。")]),t._v(" "),s("p",[t._v("假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/gap%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，"),s("strong",[t._v("间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"next-key-lock-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next-key-lock-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#next-key-lock",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Next-Key Lock")]),t._v(" "),s("p",[t._v("Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。")]),t._v(" "),s("p",[t._v("假设，表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id = 4 记录，也不能修改和删除 id = 5 这条记录。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%B8%B4%E9%94%AE%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("所以，next-key lock 即能保护该记录，又能阻止其他事务将新记录插入到被保护记录前面的间隙中。")]),t._v(" "),s("p",[s("strong",[t._v("next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的")]),t._v("。")]),t._v(" "),s("p",[t._v("比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。")]),t._v(" "),s("p",[t._v("虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。")]),t._v(" "),s("h2",{attrs:{id:"mysql-是怎么加行级锁的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-是怎么加行级锁的"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#mysql-%E6%98%AF%E6%80%8E%E4%B9%88%E5%8A%A0%E8%A1%8C%E7%BA%A7%E9%94%81%E7%9A%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("MySQL 是怎么加行级锁的？")]),t._v(" "),s("p",[t._v("行级锁加锁规则比较复杂，不同的场景，加锁的形式是不同的。")]),t._v(" "),s("p",[s("strong",[t._v("加锁的对象是索引，加锁的基本单位是 next-key lock")]),t._v("，它是由记录锁和间隙锁组合而成的，"),s("strong",[t._v("next-key lock 是前开后闭区间，而间隙锁是前开后开区间")]),t._v("。")]),t._v(" "),s("p",[t._v("但是，next-key lock 在一些场景下会退化成记录锁或间隙锁。")]),t._v(" "),s("p",[t._v("那到底是什么场景呢？总结一句，"),s("strong",[t._v("在能使用记录锁或者间隙锁就能避免幻读现象的场景下， next-key lock 就会退化成记录锁或间隙锁")]),t._v("。")]),t._v(" "),s("p",[t._v("这次会以下面这个表结构来进行实验说明：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLLATE")]),t._v(" utf8mb4_unicode_ci "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("index_age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BTREE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLLATE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4_unicode_ci"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("其中，id 是主键索引（唯一索引），age 是普通索引（非唯一索引），name 是普通的列。")]),t._v(" "),s("p",[t._v("表中的有这些行记录：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/user.png",alt:"img"}})]),t._v(" "),s("p",[t._v("这次实验环境的 "),s("strong",[t._v("MySQL 版本是 8.0.26，隔离级别是「可重复读」")]),t._v("。")]),t._v(" "),s("p",[t._v("不同版本的加锁规则可能是不同的，但是大体上是相同的。")]),t._v(" "),s("h3",{attrs:{id:"唯一索引等值查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引等值查询"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("唯一索引等值查询")]),t._v(" "),s("p",[t._v("当我们用唯一索引进行等值查询的时候，查询的记录存不存在，加锁的规则也会不同：")]),t._v(" "),s("ul",[s("li",[t._v("当查询的记录是「存在」的，在索引树上定位到这一条记录后，将该记录的索引中的 next-key lock 会"),s("strong",[t._v("退化成「记录锁」")]),t._v("。")]),t._v(" "),s("li",[t._v("当查询的记录是「不存在」的，在索引树找到第一条大于该查询记录的记录后，将该记录的索引中的 next-key lock 会"),s("strong",[t._v("退化成「间隙锁」")]),t._v("。")])]),t._v(" "),s("p",[t._v("TIP")]),t._v(" "),s("p",[t._v("我本篇文章的「唯一索引」是用「主键索引」作为案例说明的，加锁只加在主键索引项上。")]),t._v(" "),s("p",[t._v("然后，很多同学误以为如果是二级索引的「唯一索引」，加锁也是只加在二级索引项上。")]),t._v(" "),s("p",[t._v("其实这是不对的，所以这里特此说明下，如果是用二级索引（不管是不是非唯一索引，还是唯一索引）进行锁定读查询的时候，除了会对二级索引项加行级锁（如果是唯一索引的二级索引，加锁规则和主键索引的案例相同），而且还会对查询到的记录的主键索引项上加「记录锁」。")]),t._v(" "),s("p",[t._v("在文章的「非唯一索引」的案例中，我就是用二级索引作为例子，在后面的章节我有说明，对二级索引进行锁定读查询的时候，因为存在两个索引（二级索引和主键索引），所以两个索引都会加锁。")]),t._v(" "),s("p",[t._v("接下里用两个案例来说明。")]),t._v(" "),s("h4",{attrs:{id:"_1、记录存在的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、记录存在的情况"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#_1%E3%80%81%E8%AE%B0%E5%BD%95%E5%AD%98%E5%9C%A8%E7%9A%84%E6%83%85%E5%86%B5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("1、记录存在的情况")]),t._v(" "),s("p",[t._v("假设事务 A 执行了这条等值查询语句，查询的记录是「存在」于表中的。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" name   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 路飞   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.02")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("那么，事务 A 会为 id 为 1 的这条记录就会加上 "),s("strong",[t._v("X 型的记录锁")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%AE%B0%E5%BD%95%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("接下来，如果有其他事务，对 id 为 1 的记录进行更新或者删除操作的话，这些操作都会被阻塞，因为更新或者删除操作也会对记录加 X 型的记录锁，而 X 锁和 X 锁之间是互斥关系。")]),t._v(" "),s("p",[t._v("比如，下面这个例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%EF%BC%88%E5%AD%98%E5%9C%A8%EF%BC%89.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("因为事务 A 对 id = 1的记录加了 "),s("strong",[t._v("X 型的记录锁")]),t._v("，所以事务 B 在修改 id=1 的记录时会被阻塞，事务 C 在删除 id=1 的记录时也会被阻塞。")]),t._v(" "),s("blockquote",[s("p",[t._v("有什么命令可以分析加了什么锁？")])]),t._v(" "),s("p",[t._v("我们可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务执行 SQL 过程中加了什么锁。")]),t._v(" "),s("p",[t._v("我们以前面的事务 A 作为例子，分析下下它加了什么锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E4%BA%8B%E5%8A%A1a%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图可以看到，共加了两个锁，分别是：")]),t._v(" "),s("ul",[s("li",[t._v("表锁：X 类型的意向锁；")]),t._v(" "),s("li",[t._v("行锁：X 类型的记录锁；")])]),t._v(" "),s("p",[t._v("这里我们重点关注行级锁，图中 LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思。")]),t._v(" "),s("p",[t._v("通过 LOCK_MODE 可以确认是 next-key 锁，还是间隙锁，还是记录锁：")]),t._v(" "),s("ul",[s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X")]),t._v("，说明是 next-key 锁；")]),t._v(" "),s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X, REC_NOT_GAP")]),t._v("，说明是记录锁；")]),t._v(" "),s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X, GAP")]),t._v("，说明是间隙锁；")])]),t._v(" "),s("p",[t._v("因此，**此时事务 A 在 id = 1 记录的主键索引上加的是记录锁，锁住的范围是 id 为 1 的这条记录。**这样其他事务就无法对 id 为 1 的这条记录进行更新和删除操作了。")]),t._v(" "),s("p",[t._v("从这里我们也可以得知，"),s("strong",[t._v("加锁的对象是针对索引")]),t._v("，因为这里查询语句扫描的 B+ 树是聚簇索引树，即主键索引树，所以是对主键索引加锁。将对应记录的主键索引加 记录锁后，就意味着其他事务无法对该记录进行更新和删除操作了。")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么唯一索引等值查询并且查询记录存在的场景下，该记录的索引中的 next-key lock 会退化成记录锁？")])]),t._v(" "),s("p",[t._v("原因就是在唯一索引等值查询并且查询记录存在的场景下，仅靠记录锁也能避免幻读的问题。")]),t._v(" "),s("p",[t._v("幻读的定义就是，当一个事务前后两次查询的结果集，不相同时，就认为发生幻读。所以，要避免幻读就是避免结果集某一条记录被其他事务删除，或者有其他事务插入了一条新记录，这样前后两次查询的结果集就不会出现不相同的情况。")]),t._v(" "),s("ul",[s("li",[t._v("由于主键具有唯一性，所以"),s("strong",[t._v("其他事务插入 id = 1 的时候，会因为主键冲突，导致无法插入 id = 1 的新记录")]),t._v("。这样事务 A 在多次查询 id = 1 的记录的时候，不会出现前后两次查询的结果集不同，也就避免了幻读的问题。")]),t._v(" "),s("li",[t._v("由于对 id = 1 加了记录锁，"),s("strong",[t._v("其他事务无法删除该记录")]),t._v("，这样事务 A 在多次查询 id = 1 的记录的时候，不会出现前后两次查询的结果集不同，也就避免了幻读的问题。")])]),t._v(" "),s("h4",{attrs:{id:"_2、记录不存在的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、记录不存在的情况"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#_2%E3%80%81%E8%AE%B0%E5%BD%95%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%83%85%E5%86%B5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("2、记录不存在的情况")]),t._v(" "),s("p",[t._v("假设事务 A 执行了这条等值查询语句，查询的记录是「不存在」于表中的。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nEmpty "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.03")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("接下来，通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务执行 SQL 过程中加了什么锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E4%BA%8B%E5%8A%A1a%E5%88%86%E6%9E%901.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图可以看到，共加了两个锁，分别是：")]),t._v(" "),s("ul",[s("li",[t._v("表锁：X 类型的意向锁；")]),t._v(" "),s("li",[t._v("行锁：X 类型的间隙锁；")])]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("此时事务 A 在 id = 5 记录的主键索引上加的是间隙锁，锁住的范围是 (1, 5)。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E9%97%B4%E9%9A%99%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("接下来，如果有其他事务插入 id 值为 2、3、4 这一些记录的话，这些插入语句都会发生阻塞。")]),t._v(" "),s("p",[t._v("注意，如果其他事务插入的 id = 1 或者 id = 5 的记录话，并不会发生阻塞，而是报主键冲突的错误，因为表中已经存在 id = 1 和 id = 5 的记录了。")]),t._v(" "),s("p",[t._v("比如，下面这个例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%89.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("因为事务 A 在 id = 5 记录的主键索引上加了范围为 (1, 5) 的 X 型间隙锁，所以事务 B 在插入一条 id 为 3 的记录时会被阻塞住，即无法插入 id = 3 的记录。")]),t._v(" "),s("blockquote",[s("p",[t._v("间隙锁的范围"),s("code",[t._v("(1, 5)")]),t._v(" ，是怎么确定的？")])]),t._v(" "),s("p",[t._v("根据我的经验，如果 LOCK_MODE 是 next-key 锁或者间隙锁，那么 LOCK_DATA 就表示锁的范围「右边界」，此次的事务 A 的 LOCK_DATA 是 5。")]),t._v(" "),s("p",[t._v("然后锁范围的「左边界」是表中 id 为 5 的上一条记录的 id 值，即 1。")]),t._v(" "),s("p",[t._v("因此，间隙锁的范围"),s("code",[t._v("(1, 5)")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么唯一索引等值查询并且查询记录「不存在」的场景下，在索引树找到第一条大于该查询记录的记录后，要将该记录的索引中的 next-key lock 会退化成「间隙锁」？")])]),t._v(" "),s("p",[t._v("原因就是在唯一索引等值查询并且查询记录不存在的场景下，仅靠间隙锁就能避免幻读的问题。")]),t._v(" "),s("ul",[s("li",[t._v("为什么 id = 5 记录上的主键索引的锁不可以是 next-key lock？如果是 next-key lock，就意味着其他事务无法删除 id = 5 这条记录，但是这次的案例是查询 id = 2 的记录，只要保证前后两次查询 id = 2 的结果集相同，就能避免幻读的问题了，所以即使 id =5 被删除，也不会有什么影响，那就没必须加 next-key lock，因此只需要在 id = 5 加间隙锁，避免其他事务插入 id = 2 的新记录就行了。")]),t._v(" "),s("li",[t._v("为什么不可以针对不存在的记录加记录锁？锁是加在索引上的，而这个场景下查询的记录是不存在的，自然就没办法锁住这条不存在的记录。")])]),t._v(" "),s("h3",{attrs:{id:"唯一索引范围查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引范围查询"}},[t._v("#")]),t._v(" 唯一索引范围查询")]),t._v(" "),s("p",[t._v("范围查询和等值查询的加锁规则是不同的。")]),t._v(" "),s("p",[t._v("当唯一索引进行范围查询时，"),s("strong",[t._v("会对每一个扫描到的索引加 next-key 锁，然后如果遇到下面这些情况，会退化成记录锁或者间隙锁")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("情况一：针对「大于等于」的范围查询，因为存在等值查询的条件，那么如果等值查询的记录是存在于表中，那么该记录的索引中的 next-key 锁会"),s("strong",[t._v("退化成记录锁")]),t._v("。")]),t._v(" "),s("li",[t._v("情况二：针对「小于或者小于等于」的范围查询，要看条件值的记录是否存在于表中：\n"),s("ul",[s("li",[t._v("当条件值的记录不在表中，那么不管是「小于」还是「小于等于」条件的范围查询，"),s("strong",[t._v("扫描到终止范围查询的记录时，该记录的索引的 next-key 锁会退化成间隙锁")]),t._v("，其他扫描到的记录，都是在这些记录的索引上加 next-key 锁。")]),t._v(" "),s("li",[t._v("当条件值的记录在表中，如果是「小于」条件的范围查询，"),s("strong",[t._v("扫描到终止范围查询的记录时，该记录的索引的 next-key 锁会退化成间隙锁")]),t._v("，其他扫描到的记录，都是在这些记录的索引上加 next-key 锁；如果「小于等于」条件的范围查询，扫描到终止范围查询的记录时，该记录的索引 next-key 锁不会退化成间隙锁。其他扫描到的记录，都是在这些记录的索引上加 next-key 锁。")])])])]),t._v(" "),s("p",[t._v("接下来，通过几个实验，才验证我上面说的结论。")]),t._v(" "),s("h4",{attrs:{id:"_1、针对「大于或者大于等于」的范围查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、针对「大于或者大于等于」的范围查询"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#_1%E3%80%81%E9%92%88%E5%AF%B9%E3%80%8C%E5%A4%A7%E4%BA%8E%E6%88%96%E8%80%85%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E3%80%8D%E7%9A%84%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("1、针对「大于或者大于等于」的范围查询")]),t._v(" "),s("blockquote",[s("p",[t._v("实验一：针对「大于」的范围查询的情况。")])]),t._v(" "),s("p",[t._v("假设事务 A 执行了这条范围查询语句：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" name      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 香克斯    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("事务 A 加锁变化过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("最开始要找的第一行是 id = 20，由于查询该记录不是一个等值查询（不是大于等于条件查询），所以对该主键索引加的是范围为 (15, 20] 的 next-key 锁；")]),t._v(" "),s("li",[t._v("由于是范围查找，就会继续往后找存在的记录，虽然我们看见表中最后一条记录是 id = 20 的记录，但是实际在 Innodb 存储引擎中，会用一个特殊的记录来标识最后一条记录，该特殊的记录的名字叫 supremum pseudo-record ，所以扫描第二行的时候，也就扫描到了这个特殊记录的时候，会对该主键索引加的是范围为 (20, +∞] 的 next-key 锁。")]),t._v(" "),s("li",[t._v("停止扫描。")])]),t._v(" "),s("p",[t._v("可以得知，事务 A 在主键索引上加了两个 X 型 的 next-key 锁：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%A4%A7%E4%BA%8E15.drawio.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("在 id = 20 这条记录的主键索引上，加了范围为 (15, 20] 的 next-key 锁，意味着其他事务即无法更新或者删除 id = 20 的记录，同时无法插入 id 值为 16、17、18、19 的这一些新记录。")]),t._v(" "),s("li",[t._v("在特殊记录（ supremum pseudo-record）的主键索引上，加了范围为 (20, +∞] 的 next-key 锁，意味着其他事务无法插入 id 值大于 20 的这一些新记录。")])]),t._v(" "),s("p",[t._v("我们也可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句来看看事务 A 加了什么锁。")]),t._v(" "),s("p",[t._v("输出结果如下，我这里只截取了行级锁的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%A4%A7%E4%BA%8E.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图中的分析中，也可以得到"),s("strong",[t._v("事务 A 在主键索引上加了两个 X 型 的next-key 锁：")])]),t._v(" "),s("ul",[s("li",[t._v("在 id = 20 这条记录的主键索引上，加了范围为 (15, 20] 的 next-key 锁，意味着其他事务即无法更新或者删除 id = 20 的记录，同时无法插入 id 值为 16、17、18、19 的这一些新记录。")]),t._v(" "),s("li",[t._v("在特殊记录（ supremum pseudo-record）的主键索引上，加了范围为 (20, +∞] 的 next-key 锁，意味着其他事务无法插入 id 值大于 20 的这一些新记录。")])]),t._v(" "),s("blockquote",[s("p",[t._v("实验二：针对「大于等于」的范围查询的情况。")])]),t._v(" "),s("p",[t._v("假设事务 A 执行了这条范围查询语句：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" name      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 乌索普    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 香克斯    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("事务 A 加锁变化过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("最开始要找的第一行是 id = 15，由于查询该记录是一个等值查询（等于 15），所以该主键索引的 next-key 锁会"),s("strong",[t._v("退化成记录锁")]),t._v("，也就是仅锁住 id = 15 这一行记录。")]),t._v(" "),s("li",[t._v("由于是范围查找，就会继续往后找存在的记录，扫描到的第二行是 id = 20，于是对该主键索引加的是范围为 (15, 20] 的 next-key 锁；")]),t._v(" "),s("li",[t._v("接着扫描到第三行的时候，扫描到了特殊记录（ supremum pseudo-record），于是对该主键索引加的是范围为 (20, +∞] 的 next-key 锁。")]),t._v(" "),s("li",[t._v("停止扫描。")])]),t._v(" "),s("p",[t._v("可以得知，事务 A 在主键索引上加了三个 X 型 的锁，分别是：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E15.drawio.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("在 id = 15 这条记录的主键索引上，加了记录锁，范围是 id = 15 这一行记录；意味着其他事务无法更新或者删除 id = 15 的这一条记录；")]),t._v(" "),s("li",[t._v("在 id = 20 这条记录的主键索引上，加了 next-key 锁，范围是 (15, 20] 。意味着其他事务即无法更新或者删除 id = 20 的记录，同时无法插入 id 值为 16、17、18、19 的这一些新记录。")]),t._v(" "),s("li",[t._v("在特殊记录（ supremum pseudo-record）的主键索引上，加了 next-key 锁，范围是 (20, +∞] 。意味着其他事务无法插入 id 值大于 20 的这一些新记录。")])]),t._v(" "),s("p",[t._v("我们也可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句来看看事务 A 加了什么锁。")]),t._v(" "),s("p",[t._v("输出结果如下，我这里只截取了行级锁的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E.png",alt:"img"}})]),t._v(" "),s("p",[t._v("通过前面这个实验，我们证明了：")]),t._v(" "),s("ul",[s("li",[t._v("针对「大于等于」条件的唯一索引范围查询的情况下， 如果条件值的记录存在于表中，那么由于查询该条件值的记录是包含一个等值查询的操作，所以该记录的索引中的 next-key 锁会"),s("strong",[t._v("退化成记录锁")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"_2、针对「小于或者小于等于」的范围查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、针对「小于或者小于等于」的范围查询"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#_2%E3%80%81%E9%92%88%E5%AF%B9%E3%80%8C%E5%B0%8F%E4%BA%8E%E6%88%96%E8%80%85%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%E3%80%8D%E7%9A%84%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("2、针对「小于或者小于等于」的范围查询")]),t._v(" "),s("blockquote",[s("p",[t._v("实验一：针对「小于」的范围查询时，查询条件值的记录「不存在」表中的情况。")])]),t._v(" "),s("p",[t._v("假设事务 A 执行了这条范围查询语句，注意查询条件值的记录（id 为 6）并不存在于表中。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" name   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 路飞   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 索隆   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("事务 A 加锁变化过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("最开始要找的第一行是 id = 1，于是对该主键索引加的是范围为 (-∞, 1] 的 next-key 锁；")]),t._v(" "),s("li",[t._v("由于是范围查找，就会继续往后找存在的记录，扫描到的第二行是 id = 5，所以对该主键索引加的是范围为 (1, 5] 的 next-key 锁；")]),t._v(" "),s("li",[t._v("由于扫描到的第二行记录（id = 5），满足 id < 6 条件，而且也没有达到终止扫描的条件，接着会继续扫描。")]),t._v(" "),s("li",[t._v("扫描到的第三行是 id = 10，该记录不满足 id < 6 条件的记录，所以 id = 10 这一行记录的锁会"),s("strong",[t._v("退化成间隙锁")]),t._v("，于是对该主键索引加的是范围为 (5, 10) 的间隙锁。")]),t._v(" "),s("li",[t._v("由于扫描到的第三行记录（id = 10），不满足 id < 6 条件，达到了终止扫描的条件，于是停止扫描。")])]),t._v(" "),s("p",[t._v("从上面的分析中，可以得知事务 A 在主键索引上加了三个 X 型的锁：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E6.drawio.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("在 id = 1 这条记录的主键索引上，加了范围为 (-∞, 1] 的 next-key 锁，意味着其他事务即无法更新或者删除 id = 1 的这一条记录，同时也无法插入 id 小于 1 的这一些新记录。")]),t._v(" "),s("li",[t._v("在 id = 5 这条记录的主键索引上，加了范围为 (1, 5] 的 next-key 锁，意味着其他事务即无法更新或者删除 id = 5 的这一条记录，同时也无法插入 id 值为 2、3、4 的这一些新记录。")]),t._v(" "),s("li",[t._v("在 id = 10 这条记录的主键索引上，加了范围为 (5, 10) 的间隙锁，意味着其他事务无法插入 id 值为 6、7、8、9 的这一些新记录。")])]),t._v(" "),s("p",[t._v("我们也可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句来看看事务 A 加了什么锁。")]),t._v(" "),s("p",[t._v("输出结果如下，我这里只截取了行级锁的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%B0%8F%E4%BA%8E6.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图中的分析中，也可以得知事务 A 在主键索引加的三个锁，就是我们前面分析出那三个锁。")]),t._v(" "),s("p",[t._v("虽然这次范围查询的条件是「小于」，但是查询条件值的记录不存在于表中（ id 为 6 的记录不在表中），所以如果事务 A 的范围查询的条件改成 <= 6 的话，加的锁还是和范围查询条件为 < 6 是一样的。 大家自己也验证下这个结论。")]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("针对「小于或者小于等于」的唯一索引范围查询，如果条件值的记录不在表中，那么不管是「小于」还是「小于等于」的范围查询，扫描到终止范围查询的记录时，该记录中索引的 next-key 锁会退化成间隙锁，其他扫描的记录，则是在这些记录的索引上加 next-key 锁")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("实验二：针对「小于等于」的范围查询时，查询条件值的记录「存在」表中的情况。")])]),t._v(" "),s("p",[t._v("假设事务 A 执行了这条范围查询语句，注意查询条件值的记录（id 为 5）存在于表中。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" name   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 路飞   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 索隆   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("事务 A 加锁变化过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("最开始要找的第一行是 id = 1，于是对该记录加的是范围为 (-∞, 1] 的 next-key 锁；")]),t._v(" "),s("li",[t._v("由于是范围查找，就会继续往后找存在的记录，扫描到的第二行是 id = 5，于是对该记录加的是范围为 (1, 5] 的 next-key 锁。")]),t._v(" "),s("li",[t._v("由于主键索引具有唯一性，不会存在两个 id = 5 的记录，所以不会再继续扫描，于是停止扫描。")])]),t._v(" "),s("p",[t._v("从上面的分析中，可以得到"),s("strong",[t._v("事务 A 在主键索引上加了 2 个 X 型的锁")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E5.drawio.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("在 id = 1 这条记录的主键索引上，加了范围为 (-∞, 1] 的 next-key 锁。意味着其他事务即无法更新或者删除 id = 1 的这一条记录，同时也无法插入 id 小于 1 的这一些新记录。")]),t._v(" "),s("li",[t._v("在 id = 5 这条记录的主键索引上，加了范围为 (1, 5] 的 next-key 锁。意味着其他事务即无法更新或者删除 id = 5 的这一条记录，同时也无法插入 id 值为 2、3、4 的这一些新记录。")])]),t._v(" "),s("p",[t._v("我们也可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句来看看事务 A 加了什么锁。")]),t._v(" "),s("p",[t._v("输出结果如下，我这里只截取了行级锁的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图中的分析中，可以得到事务 A 在主键索引上加了两个 X 型 next-key 锁，分别是：")]),t._v(" "),s("ul",[s("li",[t._v("在 id = 1 这条记录的主键索引上，加了范围为 (-∞, 1] 的 next-key 锁；")]),t._v(" "),s("li",[t._v("在 id = 5 这条记录的主键索引上，加了范围为(1, 5 ] 的 next-key 锁。")])]),t._v(" "),s("blockquote",[s("p",[t._v("实验三：再来看针对「小于」的范围查询时，查询条件值的记录「存在」表中的情况。")])]),t._v(" "),s("p",[t._v("如果事务 A 的查询语句是小于的范围查询，且查询条件值的记录（id 为 5）存在于表中。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("事务 A 加锁变化过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("最开始要找的第一行是 id = 1，于是对该记录加的是范围为 (-∞, 1] 的 next-key 锁；")]),t._v(" "),s("li",[t._v("由于是范围查找，就会继续往后找存在的记录，扫描到的第二行是 id = 5，该记录是第一条不满足 id < 5 条件的记录，于是"),s("strong",[t._v("该记录的锁会退化为间隙锁，锁范围是 (1,5)")]),t._v("。")]),t._v(" "),s("li",[t._v("由于找到了第一条不满足 id < 5 条件的记录，于是停止扫描。")])]),t._v(" "),s("p",[t._v("可以得知，此时"),s("strong",[t._v("事务 A 在主键索引上加了两种 X 型锁：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%B0%8F%E4%BA%8E5.drawio.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("在 id = 1 这条记录的主键索引上，加了范围为 (-∞, 1] 的 next-key 锁，意味着其他事务即无法更新或者删除 id = 1 的这一条记录，同时也无法插入 id 小于 1 的这一些新记录。")]),t._v(" "),s("li",[t._v("在 id = 5 这条记录的主键索引上，加了范围为 (1,5) 的间隙锁，意味着其他事务无法插入 id 值为 2、3、4 的这一些新记录。")])]),t._v(" "),s("p",[t._v("我们也可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句来看看事务 A 加了什么锁。")]),t._v(" "),s("p",[t._v("输出结果如下，我这里只截取了行级锁的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E5%B0%8F%E4%BA%8E.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图中的分析中，可以得到事务 A 在主键索引上加了 "),s("strong",[t._v("X 型的范围为 (-∞, 1] 的 next-key 锁，和 X 型的范围为 (1, 5) 的间隙锁")]),t._v("。")]),t._v(" "),s("p",[t._v("因此，通过前面这三个实验，可以得知。")]),t._v(" "),s("p",[t._v("在针对「小于或者小于等于」的唯一索引（主键索引）范围查询时，存在这两种情况会将索引的 next-key 锁会退化成间隙锁的：")]),t._v(" "),s("ul",[s("li",[t._v("当条件值的记录「不在」表中时，那么不管是「小于」还是「小于等于」条件的范围查询，扫描到终止范围查询的记录时，该记录的主键索引中的 next-key 锁会"),s("strong",[t._v("退化成间隙锁")]),t._v("，其他扫描到的记录，都是在这些记录的主键索引上加 next-key 锁。")]),t._v(" "),s("li",[t._v("当条件值的记录「在」表中时：\n"),s("ul",[s("li",[t._v("如果是「小于」条件的范围查询，扫描到终止范围查询的记录时，该记录的主键索引中的 next-key 锁会"),s("strong",[t._v("退化成间隙锁")]),t._v("，其他扫描到的记录，都是在这些记录的主键索引上，加 next-key 锁。")]),t._v(" "),s("li",[t._v("如果是「小于等于」条件的范围查询，扫描到终止范围查询的记录时，该记录的主键索引中的 next-key 锁「不会」退化成间隙锁，其他扫描到的记录，都是在这些记录的主键索引上加 next-key 锁。")])])])]),t._v(" "),s("h3",{attrs:{id:"非唯一索引等值查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非唯一索引等值查询"}},[t._v("#")]),t._v(" 非唯一索引等值查询")]),t._v(" "),s("p",[t._v("当我们用非唯一索引进行等值查询的时候，"),s("strong",[t._v("因为存在两个索引，一个是主键索引，一个是非唯一索引（二级索引），所以在加锁时，同时会对这两个索引都加锁，但是对主键索引加锁的时候，只有满足查询条件的记录才会对它们的主键索引加锁")]),t._v("。")]),t._v(" "),s("p",[t._v("针对非唯一索引等值查询时，查询的记录存不存在，加锁的规则也会不同：")]),t._v(" "),s("ul",[s("li",[t._v("当查询的记录「存在」时，由于不是唯一索引，所以肯定存在索引值相同的记录，于是"),s("strong",[t._v("非唯一索引等值查询的过程是一个扫描的过程，直到扫描到第一个不符合条件的二级索引记录就停止扫描，然后在扫描的过程中，对扫描到的二级索引记录加的是 next-key 锁，而对于第一个不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。同时，在符合查询条件的记录的主键索引上加记录锁")]),t._v("。")]),t._v(" "),s("li",[t._v("当查询的记录「不存在」时，"),s("strong",[t._v("扫描到第一条不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。因为不存在满足查询条件的记录，所以不会对主键索引加锁")]),t._v("。")])]),t._v(" "),s("p",[t._v("接下里用两个实验来说明。")]),t._v(" "),s("h4",{attrs:{id:"_1、记录不存在的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、记录不存在的情况"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#_1%E3%80%81%E8%AE%B0%E5%BD%95%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%83%85%E5%86%B5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("1、记录不存在的情况")]),t._v(" "),s("blockquote",[s("p",[t._v("实验一：针对非唯一索引等值查询时，查询的值不存在的情况。")])]),t._v(" "),s("p",[t._v("先来说说非唯一索引等值查询时，查询的记录不存在的情况，因为这个比较简单。")]),t._v(" "),s("p",[t._v("假设事务 A 对非唯一索引（age）进行了等值查询，且表中不存在 age = 25 的记录。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nEmpty "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("事务 A 加锁变化过程如下：")]),t._v(" "),s("ul",[s("li",[t._v("定位到第一条不符合查询条件的二级索引记录，即扫描到 age = 39，于是"),s("strong",[t._v("该二级索引的 next-key 锁会退化成间隙锁，范围是 (22, 39)")]),t._v("。")]),t._v(" "),s("li",[t._v("停止查询")])]),t._v(" "),s("p",[t._v("事务 A 在 age = 39 记录的二级索引上，加了 X 型的间隙锁，范围是 (22, 39)。意味着其他事务无法插入 age 值为 23、24、25、26、....、38 这些新记录。不过对于插入 age = 22 和 age = 39 记录的语句，在一些情况是可以成功插入的，而一些情况则无法成功插入，具体哪些情况，会在后面说。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2age=25.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("我们也可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句来看看事务 A 加了什么锁。")]),t._v(" "),s("p",[t._v("输出结果如下，我这里只截取了行级锁的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2age=25.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图的分析，可以看到，事务 A 在 age = 39 记录的二级索引上（INDEX_NAME: index_age ），加了范围为 (22, 39) 的 X 型间隙锁。")]),t._v(" "),s("p",[t._v("此时，如果有其他事务插入了 age 值为 23、24、25、26、....、38 这些新记录，那么这些插入语句都会发生阻塞。不过对于插入 age = 39 记录的语句，在一些情况是可以成功插入的，而一些情况则无法成功插入，具体哪些情况，接下来我们就说！")]),t._v(" "),s("blockquote",[s("p",[t._v("当有一个事务持有二级索引的间隙锁 (22, 39) 时，什么情况下，可以让其他事务的插入 age = 22 或者 age = 39 记录的语句成功？又是什么情况下，插入 age = 22 或者 age = 39 记录时的语句会被阻塞？")])]),t._v(" "),s("p",[t._v("我们先要清楚，什么情况下插入语句会发生阻塞。")]),t._v(" "),s("p",[s("strong",[t._v("插入语句在插入一条记录之前，需要先定位到该记录在 B+树 的位置，如果插入的位置的下一条记录的索引上有间隙锁，才会发生阻塞")]),t._v("。")]),t._v(" "),s("p",[t._v("在分析二级索引的间隙锁是否可以成功插入记录时，我们要先要知道二级索引树是如何存放记录的？")]),t._v(" "),s("p",[t._v("二级索引树是按照二级索引值（age列）按顺序存放的，在相同的二级索引值情况下， 再按主键 id 的顺序存放。知道了这个前提，我们才能知道执行插入语句的时候，插入的位置的下一条记录是谁。")]),t._v(" "),s("p",[t._v("基于前面的实验，事务 A 是在 age = 39 记录的二级索引上，加了 X 型的间隙锁，范围是 (22, 39)。")]),t._v(" "),s("p",[t._v("插入 age = 22 记录的成功和失败的情况分别如下：")]),t._v(" "),s("ul",[s("li",[t._v("当其他事务插入一条 age = 22，id = 3 的记录的时候，在二级索引树上定位到插入的位置，而"),s("strong",[t._v("该位置的下一条是 id = 10、age = 22 的记录，该记录的二级索引上没有间隙锁，所以这条插入语句可以执行成功")]),t._v("。")]),t._v(" "),s("li",[t._v("当其他事务插入一条 age = 22，id = 12 的记录的时候，在二级索引树上定位到插入的位置，而"),s("strong",[t._v("该位置的下一条是 id = 20、age = 39 的记录，正好该记录的二级索引上有间隙锁，所以这条插入语句会被阻塞，无法插入成功")]),t._v("。")])]),t._v(" "),s("p",[t._v("插入 age = 39 记录的成功和失败的情况分别如下：")]),t._v(" "),s("ul",[s("li",[t._v("当其他事务插入一条 age = 39，id = 3 的记录的时候，在二级索引树上定位到插入的位置，而"),s("strong",[t._v("该位置的下一条是 id = 20、age = 39 的记录，正好该记录的二级索引上有间隙锁，所以这条插入语句会被阻塞，无法插入成功")]),t._v("。")]),t._v(" "),s("li",[t._v("当其他事务插入一条 age = 39，id = 21 的记录的时候，在二级索引树上定位到插入的位置，而"),s("strong",[t._v("该位置的下一条记录不存在，也就没有间隙锁了，所以这条插入语句可以插入成功")]),t._v("。")])]),t._v(" "),s("p",[t._v("所以，"),s("strong",[t._v("当有一个事务持有二级索引的间隙锁 (22, 39) 时，插入 age = 22 或者 age = 39 记录的语句是否可以执行成功，关键还要考虑插入记录的主键值，因为「二级索引值（age列）+主键值（id列）」才可以确定插入的位置，确定了插入位置后，就要看插入的位置的下一条记录是否有间隙锁，如果有间隙锁，就会发生阻塞，如果没有间隙锁，则可以插入成功")]),t._v("。")]),t._v(" "),s("p",[t._v("知道了这个结论之后，我们再回过头看，非唯一索引等值查询时，查询的记录不存在时，执行"),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 输出的结果。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2age=25_1.png",alt:"img"}})]),t._v(" "),s("p",[t._v("在前面分析输出结果的时候，我说的结论是：「"),s("em",[t._v("事务 A 在 age = 39 记录的二级索引上（INDEX_NAME: index_age ），加了范围为 (22, 39) 的 X 型间隙锁")]),t._v("」。这个结论其实还不够准确，因为只考虑了 LOCK_DATA 第一个数值（39），没有考虑 LOCK_DATA 第二个数值（20）。")]),t._v(" "),s("p",[t._v("那 "),s("code",[t._v("LOCK_DATA：39，20")]),t._v(" 是什么意思？")]),t._v(" "),s("ul",[s("li",[t._v("LOCK_DATA 第一个数值，也就是 39， 它代表的是 age 值。从前面我们也知道了，LOCK_DATA 第一个数值是 next-key 锁和间隙锁"),s("strong",[t._v("锁住的范围的右边界值")]),t._v("。")]),t._v(" "),s("li",[t._v("LOCK_DATA 第二个数值，也就是 20， 它代表的是 id 值。")])]),t._v(" "),s("p",[t._v("之所以 LOCK_DATA 要多显示一个数值（ID值），是因为针对「当某个事务持有非唯一索引的 (22, 39) 间隙锁的时候，其他事务是否可以插入 age = 39 新记录」的问题，还需要考虑插入记录的 id 值。而 "),s("strong",[t._v("LOCK_DATA 的第二个数值，就是说明在插入 age = 39 新记录时，哪些范围的 id 值是不可以插入的")]),t._v("。")]),t._v(" "),s("p",[t._v("因此， "),s("code",[t._v("LOCK_DATA：39，20")]),t._v(" + "),s("code",[t._v("LOCK_MODE : X, GAP")]),t._v(" 的意思是，事务 A 在 age = 39 记录的二级索引上（INDEX_NAME: index_age ），加了 age 值范围为 (22, 39) 的 X 型间隙锁，**同时针对其他事务插入 age 值为 39 的新记录时，不允许插入的新记录的 id 值小于 20 **。如果插入的新记录的 id 值大于 20，则可以插入成功。")]),t._v(" "),s("p",[t._v("但是我们无法从"),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 输出的结果分析出「在插入 age =22 新记录时，哪些范围的 id 值是可以插入成功的」，这时候就"),s("strong",[t._v("得自己画出二级索引的 B+ 树的结构，然后确定插入位置后，看下该位置的下一条记录是否存在间隙锁，如果存在间隙锁，则无法插入成功，如果不存在间隙锁，则可以插入成功")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"_2、记录存在的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、记录存在的情况"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#_2%E3%80%81%E8%AE%B0%E5%BD%95%E5%AD%98%E5%9C%A8%E7%9A%84%E6%83%85%E5%86%B5",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("2、记录存在的情况")]),t._v(" "),s("blockquote",[s("p",[t._v("实验二：针对非唯一索引等值查询时，查询的值存在的情况。")])]),t._v(" "),s("p",[t._v("假设事务 A 对非唯一索引（age）进行了等值查询，且表中存在 age = 22 的记录。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" name   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 山治   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+--------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("事务 A 加锁变化过程如下：")]),t._v(" "),s("ul",[s("li",[t._v("由于不是唯一索引，所以肯定存在值相同的记录，于是非唯一索引等值查询的过程是一个扫描的过程，最开始要找的第一行是 age = 22，于是对该二级索引记录加上范围为 (21, 22] 的 next-key 锁。同时，因为 age = 22 符合查询条件，于是对 age = 22 的记录的主键索引加上记录锁，即对 id = 10 这一行加记录锁。")]),t._v(" "),s("li",[t._v("接着继续扫描，扫描到的第二行是 age = 39，该记录是第一个不符合条件的二级索引记录，所以该二级索引的 next-key 锁会"),s("strong",[t._v("退化成间隙锁")]),t._v("，范围是 (22, 39)。")]),t._v(" "),s("li",[t._v("停止查询。")])]),t._v(" "),s("p",[t._v("可以看到，事务 A 对主键索引和二级索引都加了 X 型的锁：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%E5%AD%98%E5%9C%A8.drawio.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("主键索引：\n"),s("ul",[s("li",[t._v("在 id = 10 这条记录的主键索引上，加了记录锁，意味着其他事务无法更新或者删除 id = 10 的这一行记录。")])])]),t._v(" "),s("li",[t._v("二级索引（非唯一索引）：\n"),s("ul",[s("li",[t._v("在 age = 22 这条记录的二级索引上，加了范围为 (21, 22] 的 next-key 锁，意味着其他事务无法更新或者删除 age = 22 的这一些新记录，不过对于插入 age = 20 和 age = 21 新记录的语句，在一些情况是可以成功插入的，而一些情况则无法成功插入，具体哪些情况，会在后面说。")]),t._v(" "),s("li",[t._v("在 age = 39 这条记录的二级索引上，加了范围 (22, 39) 的间隙锁。意味着其他事务无法插入 age 值为 23、24、..... 、38 的这一些新记录。不过对于插入 age = 22 和 age = 39 记录的语句，在一些情况是可以成功插入的，而一些情况则无法成功插入，具体哪些情况，会在后面说。")])])])]),t._v(" "),s("p",[t._v("我们也可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句来看看事务 A 加了什么锁。")]),t._v(" "),s("p",[t._v("输出结果如下，我这里只截取了行级锁的内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%EF%BC%88%E5%AD%98%E5%9C%A8%EF%BC%89.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图的分析，可以看到，事务 A 对二级索引（INDEX_NAME: index_age ）加了两个 X 型锁，分别是：")]),t._v(" "),s("ul",[s("li",[t._v("在 age = 22 这条记录的二级索引上，加了范围为 (21, 22] 的 next-key 锁，意味着其他事务无法更新或者删除 age = 22 的这一些新记录，针对是否可以插入 age = 21 和 age = 22 的新记录，分析如下：\n"),s("ul",[s("li",[t._v("是否可以插入 age = 21 的新记录，还要看插入的新记录的 id 值，"),s("strong",[t._v("如果插入 age = 21 新记录的 id 值小于 5，那么就可以插入成功")]),t._v("，因为此时插入的位置的下一条记录是 id = 5，age = 21 的记录，该记录的二级索引上没有间隙锁。"),s("strong",[t._v("如果插入 age = 21 新记录的 id 值大于 5，那么就无法插入成功")]),t._v("，因为此时插入的位置的下一条记录是 id = 10，age = 22 的记录，该记录的二级索引上有间隙锁。")]),t._v(" "),s("li",[t._v("是否可以插入 age = 22 的新记录，还要看插入的新记录的 id 值，从 "),s("code",[t._v("LOCK_DATA : 22, 10")]),t._v(" 可以得知，其他事务插入 age 值为 22 的新记录时，"),s("strong",[t._v("如果插入的新记录的 id 值小于 10，那么插入语句会发生阻塞；如果插入的新记录的 id 大于 10，还要看该新记录插入的位置的下一条记录是否有间隙锁，如果没有间隙锁则可以插入成功，如果有间隙锁，则无法插入成功")]),t._v("。")])])]),t._v(" "),s("li",[t._v("在 age = 39 这条记录的二级索引上，加了范围 (22, 39) 的间隙锁。意味着其他事务无法插入 age 值为 23、24、..... 、38 的这一些新记录，针对是否可以插入 age = 22 和 age = 39 的新记录，分析如下：\n"),s("ul",[s("li",[t._v("是否可以插入 age = 22 的新记录，还要看插入的新记录的 id 值，"),s("strong",[t._v("如果插入 age = 22 新记录的 id 值小于 10，那么插入语句会被阻塞，无法插入")]),t._v("，因为此时插入的位置的下一条记录是 id = 10，age = 22 的记录，该记录的二级索引上有间隙锁（ age = 22 这条记录的二级索引上有 next-key 锁）。"),s("strong",[t._v("如果插入 age = 22 新记录的 id 值大于 10，也无法插入")]),t._v("，因为此时插入的位置的下一条记录是 id = 20，age = 39 的记录，该记录的二级索引上有间隙锁。")]),t._v(" "),s("li",[t._v("是否可以插入 age = 39 的新记录，还要看插入的新记录的 id 值，从 "),s("code",[t._v("LOCK_DATA : 39, 20")]),t._v(" 可以得知，其他事务插入 age 值为 39 的新记录时，"),s("strong",[t._v("如果插入的新记录的 id 值小于 20，那么插入语句会发生阻塞，如果插入的新记录的 id 大于 20，则可以插入成功")]),t._v("。")])])])]),t._v(" "),s("p",[t._v("同时，事务 A 还对主键索引（INDEX_NAME: PRIMARY ）加了 X 型的记录锁：")]),t._v(" "),s("ul",[s("li",[t._v("在 id = 10 这条记录的主键索引上，加了记录锁，意味着其他事务无法更新或者删除 id = 10 的这一行记录。")])]),t._v(" "),s("blockquote",[s("p",[t._v("为什么这个实验案例中，需要在二级索引索引上加范围 (22, 39) 的间隙锁？")])]),t._v(" "),s("p",[t._v("要找到这个问题的答案，我们要明白 MySQL 在可重复读的隔离级别场景下，为什么要引入间隙锁？其实"),s("strong",[t._v("是为了避免幻读现象的发生")]),t._v("。")]),t._v(" "),s("p",[t._v("如果这个实验案例中：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果事务 A 不在二级索引索引上加范围 (22, 39) 的间隙锁，只在二级索引索引上加范围为 (21, 22] 的 next-key 锁的话，那么就会有幻读的问题。")]),t._v(" "),s("p",[t._v("前面我也说过，在非唯一索引上加了范围为 (21, 22] 的 next-key 锁，是无法完全锁住 age = 22 新记录的插入，因为对于是否可以插入 age = 22 的新记录，还要看插入的新记录的 id 值，从 "),s("code",[t._v("LOCK_DATA : 22, 10")]),t._v(" 可以得知，其他事务插入 age 值为 22 的新记录时，如果插入的新记录的 id 值小于 10，那么插入语句会发生阻塞，"),s("strong",[t._v("如果插入的新记录的 id 值大于 10，则可以插入成功")]),t._v("。")]),t._v(" "),s("p",[t._v("也就是说，只在二级索引索引（非唯一索引）上加范围为 (21, 22] 的 next-key 锁，其他事务是有可能插入 age 值为 22 的新记录的（比如插入一个 age = 22，id = 12 的新记录），那么如果事务 A 再一次查询 age = 22 的记录的时候，前后两次查询 age = 22 的结果集就不一样了，这时就发生了幻读的现象。")]),t._v(" "),s("p",[s("strong",[t._v("那么当在 age = 39 这条记录的二级索引索引上加了范围为 (22, 39) 的间隙锁后，其他事务是无法插入一个 age = 22，id = 12 的新记录，因为当其他事务插入一条 age = 22，id = 12 的新记录的时候，在二级索引树上定位到插入的位置，而该位置的下一条是 id = 20、age = 39 的记录，正好该记录的二级索引上有间隙锁，所以这条插入语句会被阻塞，无法插入成功，这样就避免幻读现象的发生")]),t._v("。")]),t._v(" "),s("p",[t._v("所以，为了避免幻读现象的发生，就需要在二级索引索引上加范围 (22, 39) 的间隙锁。")]),t._v(" "),s("h3",{attrs:{id:"非唯一索引范围查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非唯一索引范围查询"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("非唯一索引范围查询")]),t._v(" "),s("p",[t._v("非唯一索引和主键索引的范围查询的加锁也有所不同，不同之处在于"),s("strong",[t._v("非唯一索引范围查询，索引的 next-key lock 不会有退化为间隙锁和记录锁的情况")]),t._v("，也就是非唯一索引进行范围查询时，对二级索引记录加锁都是加 next-key 锁。")]),t._v(" "),s("p",[t._v("就带大家简单分析一下，事务 A 的这条范围查询语句：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" name      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 山治      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 香克斯    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-----------+-----+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("事务 A 的加锁变化：")]),t._v(" "),s("ul",[s("li",[t._v("最开始要找的第一行是 age = 22，虽然范围查询语句包含等值查询，但是这里不是唯一索引范围查询，所以是不会发生退化锁的现象，因此对该二级索引记录加 next-key 锁，范围是 (21, 22]。同时，对 age = 22 这条记录的主键索引加记录锁，即对 id = 10 这一行记录的主键索引加记录锁。")]),t._v(" "),s("li",[t._v("由于是范围查询，接着继续扫描已经存在的二级索引记录。扫面的第二行是 age = 39 的二级索引记录，于是对该二级索引记录加 next-key 锁，范围是 (22, 39]，同时，对 age = 39 这条记录的主键索引加记录锁，即对 id = 20 这一行记录的主键索引加记录锁。")]),t._v(" "),s("li",[t._v("虽然我们看见表中最后一条二级索引记录是 age = 39 的记录，但是实际在 Innodb 存储引擎中，会用一个特殊的记录来标识最后一条记录，该特殊的记录的名字叫 supremum pseudo-record ，所以扫描第二行的时候，也就扫描到了这个特殊记录的时候，会对该二级索引记录加的是范围为 (39, +∞] 的 next-key 锁。")]),t._v(" "),s("li",[t._v("停止查询")])]),t._v(" "),s("p",[t._v("可以看到，事务 A 对主键索引和二级索引都加了 X 型的锁：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2age%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E22.drawio.png",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("主键索引（id 列）：\n"),s("ul",[s("li",[t._v("在 id = 10 这条记录的主键索引上，加了记录锁，意味着其他事务无法更新或者删除 id = 10 的这一行记录。")]),t._v(" "),s("li",[t._v("在 id = 20 这条记录的主键索引上，加了记录锁，意味着其他事务无法更新或者删除 id = 20 的这一行记录。")])])]),t._v(" "),s("li",[t._v("二级索引（age 列）：\n"),s("ul",[s("li",[t._v("在 age = 22 这条记录的二级索引上，加了范围为 (21, 22] 的 next-key 锁，意味着其他事务无法更新或者删除 age = 22 的这一些新记录，不过对于是否可以插入 age = 21 和 age = 22 的新记录，还需要看新记录的 id 值，有些情况是可以成功插入的，而一些情况则无法插入，具体哪些情况，我们前面也讲了。")]),t._v(" "),s("li",[t._v("在 age = 39 这条记录的二级索引上，加了范围为 (22, 39] 的 next-key 锁，意味着其他事务无法更新或者删除 age = 39 的这一些记录，也无法插入 age 值为 23、24、25、...、38 的这一些新记录。不过对于是否可以插入 age = 22 和 age = 39 的新记录，还需要看新记录的 id 值，有些情况是可以成功插入的，而一些情况则无法插入，具体哪些情况，我们前面也讲了。")]),t._v(" "),s("li",[t._v("在特殊的记录（supremum pseudo-record）的二级索引上，加了范围为 (39, +∞] 的 next-key 锁，意味着其他事务无法插入 age 值大于 39 的这些新记录。")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("在 age >= 22 的范围查询中，明明查询 age = 22 的记录存在并且属于等值查询，为什么不会像唯一索引那样，将 age = 22 记录的二级索引上的 next-key 锁退化为记录锁？")])]),t._v(" "),s("p",[t._v("因为 age 字段是非唯一索引，不具有唯一性，所以如果只加记录锁（记录锁无法防止插入，只能防止删除或者修改），就会导致其他事务插入一条 age = 22 的记录，这样前后两次查询的结果集就不相同了，出现了幻读现象。")]),t._v(" "),s("h3",{attrs:{id:"没有加索引的查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#没有加索引的查询"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#%E6%B2%A1%E6%9C%89%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%9A%84%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("没有加索引的查询")]),t._v(" "),s("p",[t._v("前面的案例，我们的查询语句都有使用索引查询，也就是查询记录的时候，是通过索引扫描的方式查询的，然后对扫描出来的记录进行加锁。")]),t._v(" "),s("p",[s("strong",[t._v("如果锁定读查询语句，没有使用索引列作为查询条件，或者查询语句没有走索引查询，导致扫描是全表扫描。那么，每一条记录的索引上都会加 next-key 锁，这样就相当于锁住的全表，这时如果其他事务对该表进行增、删、改操作的时候，都会被阻塞")]),t._v("。")]),t._v(" "),s("p",[t._v("不只是锁定读查询语句不加索引才会导致这种情况，update 和 delete 语句如果查询条件不加索引，那么由于扫描的方式是全表扫描，于是就会对每一条记录的索引上都会加 next-key 锁，这样就相当于锁住的全表。")]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("在线上在执行 update、delete、select ... for update 等具有加锁性质的语句，一定要检查语句是否走了索引，如果是全表扫描的话，会对每一个索引加 next-key 锁，相当于把整个表锁住了")]),t._v("，这是挺严重的问题。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html#%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("总结")]),t._v(" "),s("p",[t._v("这次我以 "),s("strong",[t._v("MySQL 8.0.26")]),t._v(" 版本，在可重复读隔离级别之下，做了几个实验，让大家了解了唯一索引和非唯一索引的行级锁的加锁规则。")]),t._v(" "),s("p",[t._v("我这里总结下， MySQL 行级锁的加锁规则。")]),t._v(" "),s("p",[t._v("唯一索引等值查询：")]),t._v(" "),s("ul",[s("li",[t._v("当查询的记录是「存在」的，在索引树上定位到这一条记录后，将该记录的索引中的 next-key lock 会"),s("strong",[t._v("退化成「记录锁」")]),t._v("。")]),t._v(" "),s("li",[t._v("当查询的记录是「不存在」的，在索引树找到第一条大于该查询记录的记录后，将该记录的索引中的 next-key lock 会"),s("strong",[t._v("退化成「间隙锁」")]),t._v("。")])]),t._v(" "),s("p",[t._v("非唯一索引等值查询：")]),t._v(" "),s("ul",[s("li",[t._v("当查询的记录「存在」时，由于不是唯一索引，所以肯定存在索引值相同的记录，于是非唯一索引等值查询的过程是一个扫描的过程，直到扫描到第一个不符合条件的二级索引记录就停止扫描，然后"),s("strong",[t._v("在扫描的过程中，对扫描到的二级索引记录加的是 next-key 锁，而对于第一个不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。同时，在符合查询条件的记录的主键索引上加记录锁")]),t._v("。")]),t._v(" "),s("li",[t._v("当查询的记录「不存在」时，"),s("strong",[t._v("扫描到第一条不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。因为不存在满足查询条件的记录，所以不会对主键索引加锁")]),t._v("。")])]),t._v(" "),s("p",[t._v("非唯一索引和主键索引的范围查询的加锁规则不同之处在于：")]),t._v(" "),s("ul",[s("li",[t._v("唯一索引在满足一些条件的时候，索引的 next-key lock 退化为间隙锁或者记录锁。")]),t._v(" "),s("li",[t._v("非唯一索引范围查询，索引的 next-key lock 不会退化为间隙锁和记录锁。")])]),t._v(" "),s("p",[t._v("其实理解 MySQL 为什么要这样加锁，主要要以避免幻读角度去分析，这样就很容易理解这些加锁的规则了。")]),t._v(" "),s("p",[t._v("还有一件很重要的事情，在线上在执行 update、delete、select ... for update 等具有加锁性质的语句，一定要检查语句是否走了索引，"),s("strong",[t._v("如果是全表扫描的话，会对每一个索引加 next-key 锁，相当于把整个表锁住了")]),t._v("，这是挺严重的问题。")]),t._v(" "),s("p",[t._v("最后附上「@一只小铭」同学总结的流程图。")]),t._v(" "),s("p",[t._v("唯一索引（主键索引）加锁的流程图如下。（"),s("em",[t._v("注意这个流程图是针对「主键索引」的，如果是二级索引的唯一索引，除了流程图中对二级索引的加锁规则之外，还会对查询到的记录的主键索引项加「记录锁」，流程图没有提示这一个点，所以在这里用文字补充说明下")]),t._v("）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%8A%A0%E9%94%81%E6%B5%81%E7%A8%8B.jpeg",alt:"img"}})]),t._v(" "),s("p",[t._v("非唯一索引加锁的流程图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E8%A1%8C%E7%BA%A7%E9%94%81/%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%8A%A0%E9%94%81%E6%B5%81%E7%A8%8B.jpeg",alt:"img"}})]),t._v(" "),s("h1",{attrs:{id:"mysql-死锁了-怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-死锁了-怎么办"}},[t._v("#")]),t._v(" MySQL 死锁了，怎么办？")]),t._v(" "),s("p",[t._v("大家好，我是小林。")]),t._v(" "),s("p",[t._v("说个很早之前自己遇到过数据库死锁问题。")]),t._v(" "),s("p",[t._v("有个业务主要逻辑就是新增订单、修改订单、查询订单等操作。然后因为订单是不能重复的，所以当时在新增订单的时候做了幂等性校验，做法就是在新增订单记录之前，先通过 "),s("code",[t._v("select ... for update")]),t._v(" 语句查询订单是否存在，如果不存在才插入订单记录。")]),t._v(" "),s("p",[t._v("而正是因为这样的操作，当业务量很大的时候，就可能会出现死锁。")]),t._v(" "),s("p",[t._v("接下来跟大家聊下"),s("strong",[t._v("为什么会发生死锁，以及怎么避免死锁")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"死锁的发生"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁的发生"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#%E6%AD%BB%E9%94%81%E7%9A%84%E5%8F%91%E7%94%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("死锁的发生")]),t._v(" "),s("p",[t._v("本次案例使用存储引擎 Innodb，隔离级别为可重复读（RR）。")]),t._v(" "),s("p",[t._v("接下来，我用实战的方式来带大家看看死锁是怎么发生的。")]),t._v(" "),s("p",[t._v("我建了一张订单表，其中 id 字段为主键索引，order_no 字段普通索引，也就是非唯一索引：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t_order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("order_no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("create_date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("datetime")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("index_order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("order_no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BTREE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("然后，先 "),s("code",[t._v("t_order")]),t._v(" 表里现在已经有了 6 条记录：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/54fc00f9f87a60ab7b5ba92d824a892d.png",alt:"图片"}})]),t._v(" "),s("p",[t._v("假设这时有两事务，一个事务要插入订单 1007 ，另外一个事务要插入订单 1008，因为需要对订单做幂等性校验，所以两个事务先要查询该订单是否存在，不存在才插入记录，过程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/90c1e01d0345de639e3426cea0390e80.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，两个事务都陷入了等待状态（前提没有打开死锁检测），也就是发生了死锁，因为都在相互等待对方释放锁。")]),t._v(" "),s("p",[t._v("这里在查询记录是否存在的时候，使用了 "),s("code",[t._v("select ... for update")]),t._v(" 语句，目的为了防止事务执行的过程中，有其他事务插入了记录，而出现幻读的问题。")]),t._v(" "),s("p",[t._v("如果没有使用 "),s("code",[t._v("select ... for update")]),t._v(" 语句，而使用了单纯的 select 语句，如果是两个订单号一样的请求同时进来，就会出现两个重复的订单，有可能出现幻读，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/8ae18f10f1a89aac5e93f0e9794e469e.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"为什么会产生死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么会产生死锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E4%BA%A7%E7%94%9F%E6%AD%BB%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("为什么会产生死锁？")]),t._v(" "),s("p",[t._v("可重复读隔离级别下，是存在幻读的问题。")]),t._v(" "),s("p",[s("strong",[t._v("Innodb 引擎为了解决「可重复读」隔离级别下的幻读问题，就引出了 next-key 锁")]),t._v("，它是记录锁和间隙锁的组合。")]),t._v(" "),s("ul",[s("li",[t._v("Record Lock，记录锁，锁的是记录本身；")]),t._v(" "),s("li",[t._v("Gap Lock，间隙锁，锁的就是两个值之间的空隙，以防止其他事务在这个空隙间插入新的数据，从而避免幻读现象。")])]),t._v(" "),s("p",[t._v("普通的 select 语句是不会对记录加锁的，因为它是通过 MVCC 的机制实现的快照读，如果要在查询时对记录加行锁，可以使用下面这两个方式：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对读取的记录加共享锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("share")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//锁释放")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对读取的记录加排他锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//锁释放")]),t._v("\n")])])]),s("p",[t._v("行锁的释放时机是在事务提交（commit）后，锁就会被释放，并不是一条语句执行完就释放行锁。")]),t._v(" "),s("p",[t._v("比如，下面事务 A 查询语句会锁住 "),s("code",[t._v("(2, +∞]")]),t._v(" 范围的记录，然后期间如果有其他事务在这个锁住的范围插入数据就会被阻塞。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/8d1dfbab758fe7e4c58563fca9ccb6d4.png",alt:"图片"}})]),t._v(" "),s("p",[t._v("next-key 锁的加锁规则其实挺复杂的，在一些场景下会退化成记录锁或间隙锁，我之前也写一篇加锁规则，详细可以看这篇："),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 是怎么加锁的？(opens new window)"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("需要注意的是，如果 update 语句的 where 条件没有用到索引列，那么就会全表扫描，在一行行扫描的过程中，不仅给行记录加上了行锁，还给行记录两边的空隙也加上了间隙锁，相当于锁住整个表，然后直到事务结束才会释放锁。")]),t._v(" "),s("p",[t._v("所以在线上千万不要执行没有带索引条件的 update 语句，不然会造成业务停滞，我有个读者就因为干了这个事情，然后被老板教育了一波，详细可以看这篇："),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/update_index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("update 没加索引会锁全表？(opens new window)"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("回到前面死锁的例子。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/90c1e01d0345de639e3426cea0390e80-20230309222252447.png",alt:"img"}})]),t._v(" "),s("p",[t._v("事务 A 在执行下面这条语句的时候：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t_order "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" order_no "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1007")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我们可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务执行 SQL 过程中加了什么锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/1cf8614eba3b45b9874dc6204b4d0cd1.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图可以看到，共加了两个锁，分别是：")]),t._v(" "),s("ul",[s("li",[t._v("表锁：X 类型的意向锁；")]),t._v(" "),s("li",[t._v("行锁：X 类型的间隙锁；")])]),t._v(" "),s("p",[t._v("这里我们重点关注行锁，图中 LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思，通过 LOCK_MODE 可以确认是 next-key 锁，还是间隙锁，还是记录锁：")]),t._v(" "),s("ul",[s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X")]),t._v("，说明是 X 型的 next-key 锁；")]),t._v(" "),s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X, REC_NOT_GAP")]),t._v("，说明是 X 型的记录锁；")]),t._v(" "),s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X, GAP")]),t._v("，说明是 X 型的间隙锁；")])]),t._v(" "),s("p",[s("strong",[t._v("因此，此时事务 A 在二级索引（INDEX_NAME : index_order）上加的是 X 型的 next-key 锁，锁范围是"),s("code",[t._v("(1006, +∞]")])]),t._v("。")]),t._v(" "),s("p",[t._v("next-key 锁的范围 (1006, +∞]，是怎么确定的？")]),t._v(" "),s("p",[t._v("根据我的经验，如果 LOCK_MODE 是 next-key 锁或者间隙锁，那么 LOCK_DATA 就表示锁的范围最右值，此次的事务 A 的 LOCK_DATA 是 supremum pseudo-record，表示的是 +∞。然后锁范围的最左值是 t_order 表中最后一个记录的 index_order 的值，也就是 1006。因此，next-key 锁的范围 (1006, +∞]。")]),t._v(" "),s("p",[t._v("TIP")]),t._v(" "),s("p",[t._v("有的读者问，"),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/how_to_lock.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 是怎么加锁的？ (opens new window)"),s("OutboundLink")],1),t._v("这篇文章讲非唯一索引等值查询时，说「当查询的记录不存在时，加 next-key lock，然后会退化为间隙锁」。为什么上面事务 A 的 next-key lock 并没有退化为间隙锁？")]),t._v(" "),s("p",[t._v("如果表中最后一个记录的 order_no 为 1005，那么等值查询 order_no = 1006（不存在），就是 next key lock，如上面事务 A 的情况。")]),t._v(" "),s("p",[t._v("如果表中最后一个记录的 order_no 为 1010，那么等值查询 order_no = 1006（不存在），就是间隙锁，比如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/fb6709207ac445ddbc175e3cdf993ff2.png",alt:"img"}})]),t._v(" "),s("p",[t._v("当事务 B 往事务 A next-key 锁的范围 (1006, +∞] 里插入 id = 1008 的记录就会被锁住：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" t_order "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order_no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" create_date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1008")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("因为当我们执行以下插入语句时，会在插入间隙上获取插入意向锁，"),s("strong",[t._v("而插入意向锁与间隙锁是冲突的，所以当其它事务持有该间隙的间隙锁时，需要等待其它事务释放间隙锁之后，才能获取到插入意向锁。而间隙锁与间隙锁之间是兼容的，所以所以两个事务中 "),s("code",[t._v("select ... for update")]),t._v(" 语句并不会相互影响")]),t._v("。")]),t._v(" "),s("p",[t._v("案例中的事务 A 和事务 B 在执行完后 "),s("code",[t._v("select ... for update")]),t._v(" 语句后都持有范围为"),s("code",[t._v("(1006,+∞]")]),t._v("的next-key 锁，而接下来的插入操作为了获取到插入意向锁，都在等待对方事务的间隙锁释放，于是就造成了循环等待，导致死锁。")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么间隙锁与间隙锁之间是兼容的？")])]),t._v(" "),s("p",[t._v("在MySQL官网上还有一段非常关键的描述：")]),t._v(" "),s("p",[s("em",[t._v("Gap locks in InnoDB are “purely inhibitive”, which means that their only purpose is to prevent other transactions from Inserting to the gap. Gap locks can co-exist. A gap lock taken by one transaction does not prevent another transaction from taking a gap lock on the same gap. There is no difference between shared and exclusive gap locks. They do not conflict with each other, and they perform the same function.")])]),t._v(" "),s("p",[s("strong",[t._v("间隙锁的意义只在于阻止区间被插入")]),t._v("，因此是可以共存的。"),s("strong",[t._v("一个事务获取的间隙锁不会阻止另一个事务获取同一个间隙范围的间隙锁")]),t._v("，共享和排他的间隙锁是没有区别的，他们相互不冲突，且功能相同，即两个事务可以同时持有包含共同间隙的间隙锁。")]),t._v(" "),s("p",[t._v("这里的共同间隙包括两种场景：")]),t._v(" "),s("ul",[s("li",[t._v("其一是两个间隙锁的间隙区间完全一样；")]),t._v(" "),s("li",[t._v("其二是一个间隙锁包含的间隙区间是另一个间隙锁包含间隙区间的子集。")])]),t._v(" "),s("p",[t._v("但是有一点要注意，"),s("strong",[t._v("next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的")]),t._v("。")]),t._v(" "),s("p",[t._v("比如，一个事务持有了范围为 (1, 10] 的 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，就会被阻塞。")]),t._v(" "),s("p",[t._v("虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系。X 型的记录锁与 X 型的记录锁是冲突的，比如一个事务执行了 select ... where id = 1 for update，后一个事务在执行这条语句的时候，就会被阻塞的。")]),t._v(" "),s("p",[t._v("但是还要注意！对于这种范围为 (1006, +∞] 的 next-key lock，两个事务是可以同时持有的，不会冲突。因为 +∞ 并不是一个真实的记录，自然就不需要考虑 X 型与 S 型关系。")]),t._v(" "),s("blockquote",[s("p",[t._v("插入意向锁是什么？")])]),t._v(" "),s("p",[t._v("注意！插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁。")]),t._v(" "),s("p",[t._v("在MySQL的官方文档中有以下重要描述：")]),t._v(" "),s("p",[s("em",[t._v("An Insert intention lock is a type of gap lock set by Insert operations prior to row Insertion. This lock signals the intent to Insert in such a way that multiple transactions Inserting into the same index gap need not wait for each other if they are not Inserting at the same position within the gap. Suppose that there are index records with values of 4 and 7. Separate transactions that attempt to Insert values of 5 and 6, respectively, each lock the gap between 4 and 7 with Insert intention locks prior to obtaining the exclusive lock on the Inserted row, but do not block each other because the rows are nonconflicting.")])]),t._v(" "),s("p",[t._v("这段话表明尽管"),s("strong",[t._v("插入意向锁是一种特殊的间隙锁，但不同于间隙锁的是，该锁只用于并发插入操作")]),t._v("。")]),t._v(" "),s("p",[t._v("如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。")]),t._v(" "),s("p",[t._v("插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。")]),t._v(" "),s("p",[t._v("另外，我补充一点，插入意向锁的生成时机：")]),t._v(" "),s("ul",[s("li",[t._v("每插入一条新记录，都需要看一下待插入记录的下一条记录上是否已经被加了间隙锁，如果已加间隙锁，此时会生成一个插入意向锁，然后锁的状态设置为等待状态（"),s("em",[t._v("PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁")]),t._v("），现象就是 Insert 语句会被阻塞。")])]),t._v(" "),s("h2",{attrs:{id:"insert-语句是怎么加行级锁的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#insert-语句是怎么加行级锁的"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#insert-%E8%AF%AD%E5%8F%A5%E6%98%AF%E6%80%8E%E4%B9%88%E5%8A%A0%E8%A1%8C%E7%BA%A7%E9%94%81%E7%9A%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Insert 语句是怎么加行级锁的？")]),t._v(" "),s("p",[t._v("Insert 语句在正常执行时是不会生成锁结构的，它是靠聚簇索引记录自带的 trx_id 隐藏列来作为"),s("strong",[t._v("隐式锁")]),t._v("来保护记录的。")]),t._v(" "),s("blockquote",[s("p",[t._v("什么是隐式锁？")])]),t._v(" "),s("p",[t._v("当事务需要加锁的时，如果这个锁不可能发生冲突，InnoDB会跳过加锁环节，这种机制称为隐式锁。隐式锁是 InnoDB 实现的一种延迟加锁机制，其特点是只有在可能发生冲突时才加锁，从而减少了锁的数量，提高了系统整体性能。")]),t._v(" "),s("p",[t._v("隐式锁就是在 Insert 过程中不加锁，只有在特殊情况下，才会将隐式锁转换为显示锁，这里我们列举两个场景。")]),t._v(" "),s("ul",[s("li",[t._v("如果记录之间加有间隙锁，为了避免幻读，此时是不能插入记录的；")]),t._v(" "),s("li",[t._v("如果 Insert 的记录和已有记录存在唯一键冲突，此时也不能插入记录；")])]),t._v(" "),s("h3",{attrs:{id:"_1、记录之间加有间隙锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、记录之间加有间隙锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#_1%E3%80%81%E8%AE%B0%E5%BD%95%E4%B9%8B%E9%97%B4%E5%8A%A0%E6%9C%89%E9%97%B4%E9%9A%99%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("1、记录之间加有间隙锁")]),t._v(" "),s("p",[t._v("每插入一条新记录，都需要看一下待插入记录的下一条记录上是否已经被加了间隙锁，如果已加间隙锁，此时会生成一个插入意向锁，然后锁的状态设置为等待状态（"),s("em",[t._v("PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁")]),t._v("），现象就是 Insert 语句会被阻塞。")]),t._v(" "),s("p",[t._v("举个例子，现在 t_order 表中，只有这些数据，"),s("strong",[t._v("order_no 是二级索引")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/5%E6%9D%A1%E6%95%B0%E6%8D%AE.png",alt:"img"}})]),t._v(" "),s("p",[t._v("现在，事务 A 执行了下面这条语句。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 事务 A")]),t._v("\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t_order "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" order_no "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1006")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nEmpty "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("接着，我们执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 语句 ，确定事务 A 加了什么类型的锁，这里只关注在记录上加锁的类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1A%E9%97%B4%E9%9A%99%E9%94%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("本次的例子加的是 next-key 锁（记录锁+间隙锁），锁范围是"),s("code",[t._v("（1005, +∞]")]),t._v("。")]),t._v(" "),s("p",[t._v("然后，有个事务 B 在这个间隙锁中，插入了一个记录，那么此时该事务 B 就会被阻塞：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 事务 B 插入一条记录")]),t._v("\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" t_order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order_no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" create_date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### 阻塞状态。。。。")]),t._v("\n")])])]),s("p",[t._v("接着，我们执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 语句 ，确定事务 B 加了什么类型的锁，这里只关注在记录上加锁的类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1b%E6%8F%92%E5%85%A5%E6%84%8F%E5%90%91%E9%94%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，事务 B 的状态为等待状态（LOCK_STATUS: WAITING），因为向事务 A 生成的 next-key 锁（记录锁+间隙锁）范围"),s("code",[t._v("（1005, +∞]")]),t._v(" 中插入了一条记录，所以事务 B 的插入操作生成了一个插入意向锁（"),s("code",[t._v("LOCK_MODE: X,INSERT_INTENTION")]),t._v("），锁的状态是等待状态，意味着事务 B 并没有成功获取到插入意向锁，因此事务 B 发生阻塞。")]),t._v(" "),s("h3",{attrs:{id:"_2、遇到唯一键冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、遇到唯一键冲突"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#_2%E3%80%81%E9%81%87%E5%88%B0%E5%94%AF%E4%B8%80%E9%94%AE%E5%86%B2%E7%AA%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("2、遇到唯一键冲突")]),t._v(" "),s("p",[t._v("如果在插入新记录时，插入了一个与「已有的记录的主键或者唯一二级索引列值相同」的记录（不过可以有多条记录的唯一二级索引列的值同时为NULL，这里不考虑这种情况），此时插入就会失败，然后对于这条记录加上了 "),s("strong",[t._v("S 型的锁")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("如果主键索引重复，插入新记录的事务会给已存在的主键值重复的聚簇索引记录"),s("strong",[t._v("添加 S 型记录锁")]),t._v("。")]),t._v(" "),s("li",[t._v("如果唯一二级索引重复，插入新记录的事务都会给已存在的二级索引列值重复的二级索引记录"),s("strong",[t._v("添加 S 型 next-key 锁")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"主键索引冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主键索引冲突"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E5%86%B2%E7%AA%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("主键索引冲突")]),t._v(" "),s("p",[t._v("下面举个「主键冲突」的例子，MySQL 8.0 版本，事务隔离级别为可重复读（默认隔离级别）。")]),t._v(" "),s("p",[t._v("t_order 表中的 id 字段为主键索引，并且已经存在 id 值为 5 的记录，此时有个事务，插入了一条 id 为 5 的记录，就会报主键索引冲突的错误。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%B8%BB%E9%94%AE%E5%86%B2%E7%AA%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("但是除了报错之外，还做一个很重要的事情，就是对 id 为 5 的这条记录加上了 "),s("strong",[t._v("S 型的记录锁")]),t._v("。")]),t._v(" "),s("p",[t._v("可以执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 语句，确定事务加了什么锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%B8%BB%E9%94%AE%E5%86%B2%E7%AA%81%E9%94%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，主键索引为 5 （LOCK_DATA）的这条记录中加了锁类型为 S 型的记录锁。注意，这里 LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思。如果是 S 型记录锁的话，LOCK_MODE 会显示 "),s("code",[t._v("S, REC_NOT_GAP")]),t._v("。")]),t._v(" "),s("p",[t._v("所以，在隔离级别是「可重复读」的情况下，如果在插入数据的时候，发生了主键索引冲突，插入新记录的事务会给已存在的主键值重复的聚簇索引记录"),s("strong",[t._v("添加 S 型记录锁")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"唯一二级索引冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#唯一二级索引冲突"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#%E5%94%AF%E4%B8%80%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%86%B2%E7%AA%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("唯一二级索引冲突")]),t._v(" "),s("p",[t._v("下面举个「唯一二级索引冲突」的例子，MySQL 8.0 版本，事务隔离级别为可重复读（默认隔离级别）。")]),t._v(" "),s("p",[t._v("t_order 表中的 order_no 字段为唯一二级索引，并且已经存在 order_no 值为 1001 的记录，此时事务 A，插入了 order_no 为 1001 的记录，就出现了报错。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5.png",alt:"img"}})]),t._v(" "),s("p",[t._v("但是除了报错之外，还做一个很重要的事情，就是对 order_no 值为 1001 这条记录加上了 "),s("strong",[t._v("S 型的 next-key 锁")]),t._v("。")]),t._v(" "),s("p",[t._v("我们可以执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 语句 ，确定事务加了什么类型的锁，这里只关注在记录上加锁的类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/s%E7%B1%BB%E5%9E%8B%E9%94%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，"),s("strong",[t._v("index_order 二级索引加了 S 型的 next-key 锁，范围是(-∞, 1001]")]),t._v("。注意，这里 LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思。如果是记录锁的话，LOCK_MODE 会显示 "),s("code",[t._v("S, REC_NOT_GAP")]),t._v("。")]),t._v(" "),s("p",[t._v("此时，事务 B 执行了 select * from t_order where order_no = 1001 for update; 就会阻塞，因为这条语句想加 X 型的锁，是与 S 型的锁是冲突的，所以就会被阻塞。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%86%B2%E7%AA%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("我们也可以从 performance_schema.data_locks 这个表中看到，事务 B 的状态（LOCK_STATUS）是等待状态，加锁的类型 X 型的记录锁（LOCK_MODE: X,REC_NOT_GAP ）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1b%E7%AD%89%E5%BE%85%E7%8A%B6%E6%80%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("上面的案例是针对唯一二级索引重复而插入失败的场景。")]),t._v(" "),s("blockquote",[s("p",[t._v("接下来，分析两个事务执行过程中，执行了相同的 insert 语句的场景。")])]),t._v(" "),s("p",[t._v("现在 t_order 表中，只有这些数据，"),s("strong",[t._v("order_no 为唯一二级索引")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/5%E6%9D%A1%E6%95%B0%E6%8D%AE.png",alt:"img"}})]),t._v(" "),s("p",[t._v("在隔离级别可重复读的情况下，开启两个事务，前后执行相同的 Insert 语句，此时"),s("strong",[t._v("事务 B 的 Insert 语句会发生阻塞")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%8A%A0%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("两个事务的加锁过程：")]),t._v(" "),s("ul",[s("li",[t._v("事务 A 先插入 order_no 为 1006 的记录，可以插入成功，此时对应的唯一二级索引记录被「隐式锁」保护，此时还没有实际的锁结构（执行完这里的时候，你可以看查 performance_schema.data_locks 信息，可以看到这条记录是没有加任何锁的）；")]),t._v(" "),s("li",[t._v("接着，事务 B 也插入 order_no 为 1006 的记录，由于事务 A 已经插入 order_no 值为 1006 的记录，所以事务 B 在插入二级索引记录时会遇到重复的唯一二级索引列值，此时事务 B 想获取一个 S 型 next-key 锁，但是事务 A 并未提交，"),s("strong",[t._v("事务 A 插入的 order_no 值为 1006 的记录上的「隐式锁」会变「显示锁」且锁类型为 X 型的记录锁，所以事务 B 向获取 S 型 next-key 锁时会遇到锁冲突，事务 B 进入阻塞状态")]),t._v("。")])]),t._v(" "),s("p",[t._v("我们可以执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 语句 ，确定事务加了什么类型的锁，这里只关注在记录上加锁的类型。")]),t._v(" "),s("p",[t._v("先看事务 A 对 order_no 为 1006 的记录加了什么锁？")]),t._v(" "),s("p",[t._v("从下图可以看到，"),s("strong",[t._v("事务 A 对 order_no 为 1006 记录加上了类型为 X 型的记录锁")]),t._v("（"),s("em",[t._v("注意，这个是在执行事务 B 之后才产生的锁，没执行事务 B 之前，该记录还是隐式锁")]),t._v("）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1a%E6%98%BE%E7%A4%BA%E9%94%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("然后看事务 B 想对 order_no 为 1006 的记录加什么锁？")]),t._v(" "),s("p",[t._v("从下图可以看到，"),s("strong",[t._v("事务 B 想对 order_no 为 1006 的记录加 S 型的 next-key 锁，但是由于事务 A 在该记录上持有了 X 型的记录锁，这两个锁是冲突的，所以导致事务 B 处于等待状态")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1b%E7%AD%89%E5%BE%85.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从这个实验可以得知，并发多个事务的时候，第一个事务插入的记录，并不会加锁，而是会用隐式锁保护唯一二级索引的记录。")]),t._v(" "),s("p",[t._v("但是当第一个事务还未提交的时候，有其他事务插入了与第一个事务相同的记录，第二个事务就会"),s("strong",[t._v("被阻塞")]),t._v("，"),s("strong",[t._v("因为此时第一事务插入的记录中的隐式锁会变为显示锁且类型是 X 型的记录锁，而第二个事务是想对该记录加上 S 型的 next-key 锁，X 型与 S 型的锁是冲突的")]),t._v("，所以导致第二个事务会等待，直到第一个事务提交后，释放了锁。")]),t._v(" "),s("p",[t._v("如果 order_no 不是唯一二级索引，那么两个事务，前后执行相同的 Insert 语句，是不会发生阻塞的，就如前面的这个例子。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/8ae18f10f1a89aac5e93f0e9794e469e-20230310003449585.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"如何避免死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何避免死锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/deadlock.html#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("如何避免死锁？")]),t._v(" "),s("p",[t._v("死锁的四个必要条件："),s("strong",[t._v("互斥、占有且等待、不可强占用、循环等待")]),t._v("。只要系统发生死锁，这些条件必然成立，但是只要破坏任意一个条件就死锁就不会成立。")]),t._v(" "),s("p",[t._v("在数据库层面，有两种策略通过「打破循环等待条件」来解除死锁状态：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("设置事务等待锁的超时时间")]),t._v("。当一个事务的等待时间超过该值后，就对这个事务进行回滚，于是锁就释放了，另一个事务就可以继续执行了。在 InnoDB 中，参数 "),s("code",[t._v("innodb_lock_wait_timeout")]),t._v(" 是用来设置超时时间的，默认值时 50 秒。")]),t._v(" "),s("p",[t._v("当发生超时后，就出现下面这个提示：")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/c296c1889f0101d335699311b4ef20a8.png",alt:"图片"}})]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("开启主动死锁检测")]),t._v("。主动死锁检测在发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 "),s("code",[t._v("innodb_deadlock_detect")]),t._v(" 设置为 on，表示开启这个逻辑，默认就开启。")]),t._v(" "),s("p",[t._v("当检测到死锁后，就会出现下面这个提示：")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/f380ef357d065498d8d54ad07f145e09.png",alt:"图片"}})]),t._v(" "),s("p",[t._v("上面这个两种策略是「当有死锁发生时」的避免方式。")]),t._v(" "),s("p",[t._v("我们可以回归业务的角度来预防死锁，对订单做幂等性校验的目的是为了保证不会出现重复的订单，那我们可以直接将 order_no 字段设置为唯一索引列，利用它的唯一性来保证订单表不会出现重复的订单，不过有一点不好的地方就是在我们插入一个已经存在的订单记录时就会抛出异常。")]),t._v(" "),s("h1",{attrs:{id:"字节面试-加了什么锁-导致死锁的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字节面试-加了什么锁-导致死锁的"}},[t._v("#")]),t._v(" 字节面试：加了什么锁，导致死锁的？")]),t._v(" "),s("p",[t._v("大家好，我是小林。")]),t._v(" "),s("p",[t._v("之前收到读者面试字节时，被问到一个关于 MySQL 的问题。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E5%AD%97%E8%8A%82mysql%E9%9D%A2%E8%AF%95%E9%A2%98.png",alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E6%8F%90%E9%97%AE.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如果对 MySQL 加锁机制比较熟悉的同学，应该一眼就能看出"),s("strong",[t._v("会发生死锁")]),t._v("，但是具体加了什么锁而导致死锁，是需要我们具体分析的。")]),t._v(" "),s("p",[t._v("接下来，就跟聊聊上面两个事务执行 SQL 语句的过程中，加了什么锁，从而导致死锁的。")]),t._v(" "),s("h2",{attrs:{id:"准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("准备工作")]),t._v(" "),s("p",[t._v("先创建一张 t_student 表，假设除了 id 字段，其他字段都是普通字段。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t_student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("no"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("然后，插入相关的数据后，t_student 表中的记录如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/t_student.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"开始实验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始实验"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#%E5%BC%80%E5%A7%8B%E5%AE%9E%E9%AA%8C",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("开始实验")]),t._v(" "),s("p",[t._v("在实验开始前，先说明下实验环境：")]),t._v(" "),s("ul",[s("li",[t._v("MySQL 版本：8.0.26")]),t._v(" "),s("li",[t._v("隔离级别：可重复读（RR）")])]),t._v(" "),s("p",[t._v("启动两个事务，按照题目的 SQL 执行顺序，过程如下表格：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/ab%E4%BA%8B%E5%8A%A1%E6%AD%BB%E9%94%81.drawio.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，事务 A 和 事务 B 都在执行 insert 语句后，都陷入了等待状态（前提没有打开死锁检测），也就是发生了死锁，因为都在相互等待对方释放锁。")]),t._v(" "),s("h2",{attrs:{id:"为什么会发生死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么会发生死锁"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E7%94%9F%E6%AD%BB%E9%94%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("为什么会发生死锁？")]),t._v(" "),s("p",[t._v("我们可以通过 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务执行 SQL 过程中加了什么锁。")]),t._v(" "),s("p",[t._v("接下来，针对每一条 SQL 语句分析具体加了什么锁。")]),t._v(" "),s("h3",{attrs:{id:"time-1-阶段加锁分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-1-阶段加锁分析"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#time-1-%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Time 1 阶段加锁分析")]),t._v(" "),s("p",[t._v("Time 1 阶段，事务 A 执行以下语句：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 事务 A")]),t._v("\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" t_student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Rows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("matched")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  Changed: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Warnings")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("p",[t._v("然后执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务 A 此时加了什么锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1a%E7%9A%84%E9%94%81.png",alt:"img"}})]),t._v(" "),s("p",[t._v("从上图可以看到，共加了两个锁，分别是：")]),t._v(" "),s("ul",[s("li",[t._v("表锁：X 类型的意向锁；")]),t._v(" "),s("li",[t._v("行锁：X 类型的间隙锁；")])]),t._v(" "),s("p",[t._v("这里我们重点关注行锁，图中 LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思，通过 LOCK_MODE 可以确认是 next-key 锁，还是间隙锁，还是记录锁：")]),t._v(" "),s("ul",[s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X")]),t._v("，说明是 next-key 锁；")]),t._v(" "),s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X, REC_NOT_GAP")]),t._v("，说明是记录锁；")]),t._v(" "),s("li",[t._v("如果 LOCK_MODE 为 "),s("code",[t._v("X, GAP")]),t._v("，说明是间隙锁；")])]),t._v(" "),s("p",[s("strong",[t._v("因此，此时事务 A 在主键索引（INDEX_NAME : PRIMARY）上加的是间隙锁，锁范围是"),s("code",[t._v("(20, 30)")])]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("间隙锁的范围"),s("code",[t._v("(20, 30)")]),t._v(" ，是怎么确定的？")])]),t._v(" "),s("p",[t._v("根据我的经验，如果 LOCK_MODE 是 next-key 锁或者间隙锁，那么 LOCK_DATA 就表示锁的范围最右值，此次的事务 A 的 LOCK_DATA 是 30。")]),t._v(" "),s("p",[t._v("然后锁范围的最左值是 t_student 表中 id 为 30 的上一条记录的 id 值，即 20。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/403f9c1012e84a4c83bfb2fc3990f177.png",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("因此，间隙锁的范围"),s("code",[t._v("(20, 30)")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"time-2-阶段加锁分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-2-阶段加锁分析"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#time-2-%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Time 2 阶段加锁分析")]),t._v(" "),s("p",[t._v("Time 2 阶段，事务 B 执行以下语句：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 事务 B")]),t._v("\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" t_student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQuery OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rows")]),t._v(" affected "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Rows")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("matched")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  Changed: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Warnings")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("p",[t._v("然后执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务 B 此时加了什么锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/44277cfefbd6446db861bfb81a1e4a59.png",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("从上图可以看到，行锁是 X 类型的间隙锁，间隙锁的范围是"),s("code",[t._v("(20, 30)")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("事务 A 和 事务 B 的间隙锁范围都是一样的，为什么不会冲突？")])]),t._v(" "),s("p",[t._v("两个事务的间隙锁之间是相互兼容的，不会产生冲突。")]),t._v(" "),s("p",[t._v("在MySQL官网上还有一段非常关键的描述：")]),t._v(" "),s("p",[s("em",[t._v("Gap locks in InnoDB are “purely inhibitive”, which means that their only purpose is to prevent other transactions from Inserting to the gap. Gap locks can co-exist. A gap lock taken by one transaction does not prevent another transaction from taking a gap lock on the same gap. There is no difference between shared and exclusive gap locks. They do not conflict with each other, and they perform the same function.")])]),t._v(" "),s("p",[s("strong",[t._v("间隙锁的意义只在于阻止区间被插入")]),t._v("，因此是可以共存的。"),s("strong",[t._v("一个事务获取的间隙锁不会阻止另一个事务获取同一个间隙范围的间隙锁")]),t._v("，共享（S型）和排他（X型）的间隙锁是没有区别的，他们相互不冲突，且功能相同。")]),t._v(" "),s("h3",{attrs:{id:"time-3-阶段加锁分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-3-阶段加锁分析"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#time-3-%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Time 3 阶段加锁分析")]),t._v(" "),s("p",[t._v("Time 3，事务 A 插入了一条记录：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Time 3 阶段，事务 A 插入了一条记录")]),t._v("\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" t_student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("no")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'S0025'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sony'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 阻塞等待......")]),t._v("\n")])])]),s("p",[t._v("此时，事务 A 就陷入了等待状态。")]),t._v(" "),s("p",[t._v("然后执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务 A 在获取什么锁而导致被阻塞。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1a%E7%AD%89%E5%BE%85%E4%B8%AD.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，事务 A 的状态为等待状态（LOCK_STATUS: WAITING），因为向事务 B 生成的间隙锁（范围 "),s("code",[t._v("(20, 30)")]),t._v("）中插入了一条记录，所以事务 A 的插入操作生成了一个插入意向锁（"),s("code",[t._v("LOCK_MODE:INSERT_INTENTION")]),t._v("）。")]),t._v(" "),s("blockquote",[s("p",[t._v("插入意向锁是什么？")])]),t._v(" "),s("p",[t._v("注意！插入意向锁名字里虽然有意向锁这三个字，但是它并不是意向锁，它属于行级锁，是一种特殊的间隙锁。")]),t._v(" "),s("p",[t._v("在MySQL的官方文档中有以下重要描述：")]),t._v(" "),s("p",[s("em",[t._v("An Insert intention lock is a type of gap lock set by Insert operations prior to row Insertion. This lock signals the intent to Insert in such a way that multiple transactions Inserting into the same index gap need not wait for each other if they are not Inserting at the same position within the gap. Suppose that there are index records with values of 4 and 7. Separate transactions that attempt to Insert values of 5 and 6, respectively, each lock the gap between 4 and 7 with Insert intention locks prior to obtaining the exclusive lock on the Inserted row, but do not block each other because the rows are nonconflicting.")])]),t._v(" "),s("p",[t._v("这段话表明尽管"),s("strong",[t._v("插入意向锁是一种特殊的间隙锁，但不同于间隙锁的是，该锁只用于并发插入操作")]),t._v("。")]),t._v(" "),s("p",[t._v("如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。")]),t._v(" "),s("p",[t._v("插入意向锁与间隙锁的另一个非常重要的差别是："),s("strong",[t._v("尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。所以，插入意向锁和间隙锁之间是冲突的")]),t._v("。")]),t._v(" "),s("p",[t._v("另外，我补充一点，插入意向锁的生成时机：")]),t._v(" "),s("ul",[s("li",[t._v("每插入一条新记录，都需要看一下待插入记录的下一条记录上是否已经被加了间隙锁，如果已加间隙锁，此时会生成一个插入意向锁，然后锁的状态设置为等待状态（"),s("em",[t._v("PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁")]),t._v("），现象就是 Insert 语句会被阻塞。")])]),t._v(" "),s("h3",{attrs:{id:"time-4-阶段加锁分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-4-阶段加锁分析"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#time-4-%E9%98%B6%E6%AE%B5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("Time 4 阶段加锁分析")]),t._v(" "),s("p",[t._v("Time 4，事务 B 插入了一条记录：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Time 4 阶段，事务 B 插入了一条记录")]),t._v("\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" t_student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("no")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'S0026'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ace'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 阻塞等待......")]),t._v("\n")])])]),s("p",[t._v("此时，事务 B 就陷入了等待状态。")]),t._v(" "),s("p",[t._v("然后执行 "),s("code",[t._v("select * from performance_schema.data_locks\\G;")]),t._v(" 这条语句，查看事务 B 在获取什么锁而导致被阻塞。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E4%BA%8B%E5%8A%A1b%E7%AD%89%E5%BE%85%E4%B8%AD.png",alt:"img"}})]),t._v(" "),s("p",[t._v("可以看到，事务 B 在生成插入意向锁时而导致被阻塞，这是因为事务 B 向事务 A 生成的范围为 (20, 30) 的间隙锁插入了一条记录，而插入意向锁和间隙锁是冲突的，所以事务 B 在获取插入意向锁时就陷入了等待状态。")]),t._v(" "),s("blockquote",[s("p",[t._v("最后回答，为什么会发生死锁？")])]),t._v(" "),s("p",[t._v("本次案例中，事务 A 和事务 B 在执行完后 update 语句后都持有范围为"),s("code",[t._v("(20, 30）")]),t._v("的间隙锁，而接下来的插入操作为了获取到插入意向锁，都在等待对方事务的间隙锁释放，于是就造成了循环等待，满足了死锁的四个条件："),s("strong",[t._v("互斥、占有且等待、不可强占用、循环等待")]),t._v("，因此发生了死锁。")]),t._v(" "),s("h2",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#%E6%80%BB%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("总结")]),t._v(" "),s("p",[t._v("两个事务即使生成的间隙锁的范围是一样的，也不会发生冲突，因为间隙锁目的是为了防止其他事务插入数据，因此间隙锁与间隙锁之间是相互兼容的。")]),t._v(" "),s("p",[t._v("在执行插入语句时，如果插入的记录在其他事务持有间隙锁范围内，插入语句就会被阻塞，因为插入语句在碰到间隙锁时，会生成一个插入意向锁，然后插入意向锁和间隙锁之间是互斥的关系。")]),t._v(" "),s("p",[t._v("如果两个事务分别向对方持有的间隙锁范围内插入一条记录，而插入操作为了获取到插入意向锁，都在等待对方事务的间隙锁释放，于是就造成了循环等待，满足了死锁的四个条件："),s("strong",[t._v("互斥、占有且等待、不可强占用、循环等待")]),t._v("，因此发生了死锁。")]),t._v(" "),s("h2",{attrs:{id:"读者问答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读者问答"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/lock/show_lock.html#%E8%AF%BB%E8%80%85%E9%97%AE%E7%AD%94",target:"_blank",rel:"noopener noreferrer"}},[t._v("#"),s("OutboundLink")],1),t._v("读者问答")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.xiaolincoding.com//mysql/other/f4d4d7fdb9074b098b1077acff698aea.png",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);