(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{371:function(n,t,v){"use strict";v.r(t);var _=v(14),e=Object(_.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"软件测试52讲"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件测试52讲"}},[n._v("#")]),n._v(" 软件测试52讲")]),n._v(" "),t("p",[n._v("https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%9552%E8%AE%B2/")]),n._v(" "),t("p",[n._v('你的测试职业发展是什么？\n　　测试经验越多，测试能力越高。所以我的职业发展是需要时间积累的，一步步向着高级测试工程师奔去。而且我也有初步的职业规划，前3年积累测试经验，按如何做好测试工程师的要点去要求自己，不断更新自己改正自己，做好测试任务。\n　　2、你认为测试人员需要具备哪些素质\n　　做测试应该要有一定的协调能力，因为测试人员经常要与开发接触处理一些问题，如果处理不好的话会引起一些冲突，这样的话工作上就会不好做。还有测试人员要有一定的耐心，有的时候做测试很枯燥乏味。除了耐心，测试人员不能放过每一个可能的错误。\n　　3、你为什么能够做测试这一行\n　　虽然我的测试技术还不是很成熟，但是我觉得我还是可以胜任软件测试这个工作的，因为做软件测试不仅是要求技术好，还有有一定的沟通能力，耐心、细心等外在因素。综合起来看我认为我是胜任这个工作的。\n　　4、测试的目的是什么？\n　　测试的目的是找出软件产品中的错误，是软件尽可能的符合用户的要求。当然软件测试是不可能找出全部错误的。\n　　5、测试分为哪几个阶段？\n　　一般来说分为5个阶段：单元测试、集成测试、确认测试、系统测试、验收测试\n　　6、单元测试的测试对象、目的、测试依据、测试方法？\n　　测试对象是模块内部的程序错误，目的是消除局部模块逻辑和功能上的错误和缺陷。测试依据是模块的详细设计，测试方法是采用白盒测试。\n　　7、怎样看待加班问题\n　　加班的话我没有太多意见，但是我还是觉得如果能够合理安排时间的话，不会有太多时候加班的。\n　　8、结合你以前的学习和工作经验，你认为如何做好测试。\n　　根据我以前的工作和学习经验，我认为做好工作首先要有一个良好的沟通，只有沟通无障碍了，才会有好的协作，才会有更好的效率，再一个就是技术一定要过关，做测试要有足够的耐心，和一个良好的工作习惯，不懂的就要问，实时与同事沟通这样的话才能做好测试工作。\n　　9、你为什么选择软件测试行业\n　　因为之前了解软件测试这个行业，觉得他的发展前景很好。\n　　10、根据你以前的工作或学习经验描述一下软件开发、测试过程，由哪些角色负责，你做什么\n　　要有架构师、开发经理、测试经理、程序员、测试员。我在里面主要是负责所分到的模块执行测试用例。\n　　11、根据你的经验说说你对软件测试/质量保证的理解\n　　软件质量保证与测试是根据软件开发阶段的规格说明和程序的内部结构而精心设计的一批测试用例(即输入数据和预期的输出结果)，并根据这些测试用例去运行程序，以发现错误的过程。它是对应用程序的各个方面进行测试以检查其功能、语言有效性及其外观排布。\n　　12、软件测试的流程是什么？\n　　需求调查：全面了解系统概况、应用领域、软件开发周期、软件开发环境、开发组织、时间安排、功能需求、性能需求、质量需求及测试要求等。根据系统概况进行项目所需的人员、时间和工作量估计以及项目报价。\n　　制定初步的项目计划。\n　　测试准备：组织测试团队、培训、建立测试和管理环境等。\n　　测试设计：按照测试要求进行每个测试项的测试设计，包括测试用例的设计和测试脚本的开发等。\n　　测试实施：按照测试计划实施测试。\n　　测试评估：根据测试的结果，出具测试评估报告。\n　　13、你对SQA的职责和工作活动(如软件度量)的理解?\n　　SQA就是独立于软件开发的项目组，通过对软件开发过程的监控，来保证软件的开发流程按照指定的CMM规程(如果有相应的CMM规程),对于不符合项及时提出建议和改进方案，必要时可以向高层经理汇报以求问题的解决。通过这样的途径来预防缺陷的引入，从而减少后期软件的维护成本。SQA主要的工作活动包括制定SQA工作计划，参与阶段产物的评审，进行过程质量、功能配置及物理配置的审计等；对项目开发过程中产生的数据进行度量等等。\n　　14、说说你对软件配置管理的理解\n　　项目在开发过程中要用相应的配置管理工具对配置项(包括各个阶段的产物)进行变更控制，配置管理的使用取决于项目规模和复杂性及风险的水平。软件的规模越大，配置管理就越显得重要。还有在配置管理中，有一个很重要的概念，那就是基线，是在一定阶段各个配置项的组合，一个基线就提供了一个正式的标准，随后的工作便基于此标准，并只有经过授权后才能变更这个标准。配置管理工具主要有CC，VSS,CVS,SVN等，我只用过SVN，对其他的工具不是很熟悉。\n　　15、怎样写测试计划和测试用例\n　　简单点，测试计划里应有详细的测试策略和测试方法，合理详尽的资源安排等，至于测试用例，那是依赖于需求(包括功能与非功能需求)是否细化到功能点，是否可测试等。\n　　16、说说主流的软件工程思想(如CMM、CMMI、RUP,XP,PSP,TSP等)的大致情况及对他们的理解\n　　CMM:SW Capability Maturity Model软件能力成熟度模型，其作用是软件过程的改进、评估及软件能力的评鉴。\n　　CMMI:Capability Maturity Model Integration能力成熟度模型集成 CMMI融入了大部分最新的软件管理实践，同时弥补了SW-CMM模型中的缺陷。\n　　RUP:rational unified process是软件工程话过程。\n　　XP:extreme program，即极限编程的意思，适用于小型团队的软件开发，像上面第三个问题就可以结合原型法采用这样的开发流程。要明白测试对于xp开发的重要性，强调测试(重点是单元测试)先行的理念。编程可以明显提高代码的质量，持续集成对于快速定位问题有好处。\n　　PSP，TSP分别是个体软件过程和群体软件过程。大家都知道，CMM只是告诉你做什么但并没有告诉你如何做，所以PSP/TSP就是告诉你企业在实施CMM的过程中如何做，PSP强调建立个人技能(如何制定计划、控制质量及如何与其他人相互协作等等)。而TSP着重于生产并交付高质量的软件产品(如何有效的规划和管理所面临的项目开发任务等等)。总之，实施CMM，永远不能真正做到能力成熟度的提升，只有将实施CMM与实施PSP和TSP有机结合起来，才能发挥最大的效力。因此，软件过程框架应该是CMM/PSP/TSP的有机集成。\n　　17、你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度的保证软件的质量？\n　　测试并不能够最大限度的保证软件的质量，软件的高质量是开发和设计出来的，而不是测试出来的，它不仅要通过对软件开发流程的监控，使得软件开发的各个阶段都要按照指定的规程进行，通过对各个阶段产物的评审，QA对流程的监控，对功能及配置的审计来达到开发的最优化。当然测试也是保证软件质量的一个重要方式，是软件质量保证工程的一个重要组成部分。\n　　18、基于目前中国的国情，大多数公司的项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况--既不想投入过多又想保证质量)\n　　出现以上的情况，如果仅仅想通过测试来提高软件质量，那几乎是不可能的，原因是没有足够的时间让你去测试，少而不规范的文档导致测试需求无法细化到足够且有针对行的测试。所以，作为公司质量保证的因该和项目经理确定符合项目本身是和的软件生命周期模型(比如RUP的建材，原型法)，明确项目的开发流程并督促项目组按照此流程开展工作，所有项目组成员(项目经理更加重要)都要制定出合理的工作计划，加强代码的单元测试，在客户既定的产品交付日期范围内，进行产品的持续集成等等，如果时间允许可以再配合客户进行必要的系统功能测试。\n　　19、一个测试工程师应该具备哪些素质和技能？\n　　1-掌握基本的测试基础理论\n　　2-本着找出软件存在的问题的态度进行测试，不要以挑刺的形象出现\n　　3-可熟练阅读需求规格说明书等文档\n　　4-以用户的观点看问题\n　　5-有强烈的质量意识\n　　6-细心和责任心\n　　7-良好的有效的沟通方式(与开发人员及客户)\n　　8-具有以往的测试经验能够及时准确的判断出高危险区在何处\n　　20、做好软件测试的一些关键点\n　　1-测试人员必须经过测试基础知识和理论的相关培训\n　　2-测试人员必须熟悉系统功能和业务\n　　3-测试要有计划，而且测试方案要和整个项目计划协调好\n　　4-必须实现编写测试用例，测试执行阶段必须根据测试用例进行\n　　5-易用性，功能，分支，边界，性能等功能行和非功能性需求都要进行测试\n　　6-对于复杂的流程一定要进行流程分支，组合条件分析，再进行等价类划分准备相关测试数据\n　　7-测试设计的一个重要内容是要准备好具体的测试数据，清楚这个测试数据是测试那个场景或分支的。\n　　8-个人任务平均每三个测试用例至少应该发现一个BUG，否则只能说明测试用例质量不好\n　　9-除了每天构建的重复测试可以考虑测试自动化外，其他暂时都不要考虑去自动话\n　　21、软件测试员自身素质培养\n　　1-首先，应对软件测试感兴趣和对自己有自信，如果具备了这两点，那么在开发过程中不管遇到什么样的困难，相信一定能克服\n　　2-善于怀疑，实际上没有绝对正确的，总有错误的地方，具有叛逆心理，别人认为不可能发生的事情，我却认为可能发生，别人认为是对的，我却认为不是对的。\n　　3-打破沙锅问到底的精神，对于只出现过一次的BUG一定要找出原因，不解决誓不罢休。\n　　4-保持一个良好的心情，否则可能无法把测试做好。不要把生活中的不愉快的情绪带到工作中来。\n　　5-做测试时要细心，不是所有的BUG都能很容易找出，一定要细心才能找到这些BUG。\n　　6-灵活一些，聪明一点，多造一些容易产生BUG的例子。\n　　7-在有条件的情况下，多和客户沟通，他们身上有你所需要的。\n　　8-设身处地为客户着想，从他们的角度去测试系统。\n　　9-不要让程序员，以“这种情况不可能发生”这句话说服你，相反，你应该去说服他，告诉他在客户心理，并不是这样的\n　　10-考虑问题要全面，结合客户的需求，业务流程和系统的架构等多方面考虑问题。\n　　11-提出问题不要复杂化，这点和前面矛盾，如果你是一个新手，暂时不要管这点，因为最终将有你的小组成员讨论解决。\n　　12-追求完美，对于新测试员来说，努力追求完美，这对你很好，尽管有些事情无法做到，但你应该尝试。\n　　13-幽默感，能和开发小组很好的沟通是关键，试着给你的开发小组找一个BUG杀手，或对他们说“我简直不敢相信，你写的程序居然到现在没有找到BUG”。\n　　22、为什要在一个团队中开展测试工作？\n　　因为没有经过测试的软件很难在发布之前知道该软件的质量，就好比ISO质量认证一样，测试同样也需要质量认证，这个时候就需要在团队中开展软件测试的工作。在测试的过程中发现软件中存在的问题，及时让开发人员得知并修改问题，在即将发布时，从测试报告中得出软件的质量情况。\n　　23、你所熟悉的软件测试类型有哪些?\n　　测试类型有：功能测试、性能测试、界面测试\n　　功能测试在测试工作中占有比例最大，功能测试也叫黑盒测试。\n　　性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。\n　　界面测试，界面是软件与用户交互的最直接的层，界面的好坏决定用户对软件的第一印象。\n　　区别在于，功能测试关注产品的所有功能，要考虑到每个细节功能，每个可能存在的功能问题。性能测试主要关注产品整体的多用户并发下的稳定性和健壮性。界面测试则关注与用户体验相关内容，用户使用该产品的时候是否已用，是否易懂，是否规范(用户无意输入无效的数据，当然考虑到体验性，不能太粗鲁的弹出警告)。做某个性能测试的时候，首先它可能是个功能点，首先要保证她的功能是没有问题的，然后再考虑性能的问题。\n　　24、你认为做好测试用例设计工作的关键是什么\n　　白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结构。黑盒测试用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题。软件的黑盒测试意味着测试要在软件的接口处进行，这种方法是把测试对象看作是一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试或者数据驱动测试。黑盒测试主要是为了发现以下几类错误：、\n　　1-是否有不正确或遗漏的功能\n　　2-在接口上，输入是否能正确的接受？能否输出正确的结果。\n　　3-是否有数据结构错误或外部信息(例如数据文件)访问错误\n　　4-性能上是否能够满足要求\n　　5-是否有初始化或终止性错误\n　　软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看作一个打开的盒子，它允许测试人员利用程序内部的逻辑结构和有关信息，设计或者选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一直。因此白盒测试又称为结合测试或逻辑驱动测试。白盒测试主要是想对程序模块进行如下检查：\n　　1-对程序模块的所有独立的执行路径至少测试一遍。\n　　2-对所有的逻辑判定，取“真”与取“假”的两种情况都能至少测一遍。\n　　3-在循环的边界和运行的界限内执行循环体。\n　　4-测试内部数据结构的有效性，等等。\n　　25、请详细介绍一下各种测试类型的含义\n　　1-单元测试(模块测试)是开发者编写的一小段代码，用于检验被测试代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件(或者场景)下某个特定函数的行为。单元测试是由程序员自己来完成，最终受益的也是程序员自己。可以这么说，程序员有责任编写功能代码，同时也就有责任为自己的代码编写单元测试。执行单元测试，就是为了证明这段代码的行为和我们期望的一致。\n　　2-集成测试(也叫组装测试、联合测试)是单元测试的逻辑扩展。它最简单的形式是：两个已经经过测试的单元组合成一个组件，并且测试它们之间的接口。从这一层上讲，组件是指多个单元的集成聚合。在现实方案中，许多单元组合成组件，而这些组件又聚合成程序的更大部分。方法是测试片段的组合，并最终扩展进程，将您的模块与其他组的模块一起测试。最后，将构成进程的所有模块一起测试。\n　　3-系统测试是将经过测试的子系统装配成一个完整系统来测试。它是检验系统是否确实能提供系统方案说明书中制定功能的有效方法。(常见的联调测试)。系统测试的目的是对最终软件系统进行全面的测试，确保最终软件系统满足产品需求而遵循系统设计。\n　　4-验收测试是部署软件之前的最后一个测试操作。验收测试的目的是确保软件准备就绪，并且可以让用户将其执行软件的既定功能和任务。验收测试是向未来的用户表明系统能够像预订要求那样工作。经集成测试后，已经按照设计把所有的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是验收测试的任务，即软件的功能和性能如同用户所合理期待的那样。\n　　26、测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？\n　　软件测试计划是知道测试过程的纲领性文件，包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。\n　　测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试策略和测试方法(最好能先评审)。\n　27、您认为做好测试计划工作的关键是什么？\n　　1-明确测试的目标，增强测试计划的实用性\n　　编写软件测试计划的重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果准确\n　　2-坚持“5W”规则，明确内容与过程\n　　“5W”规则指的是“WHAT(做什么)”、“WHY(为什么做)”、"WHEN(何时做)"、"WHERE(在哪里)"、"HOW(如何做)"。利用“5W"规则创建软件测试计划，可以帮助测试团队理解测试的目的(WHY)，明确测试的范围和内容(WHAT)，确定测试的开始和结束日期(WHEN)，指出测试的方法和工具(HOW)，给出测试文档和软件存放的位置(WHERE)。\n　　3-采用评审和更新机制，保证测试计划满足实际需求\n　　测试计划完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。\n　　4-分别创建测试计划与测试详细规格、测试用例\n　　应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。\n　　28、当开发人员说不是BUG时，你如何应付？\n　　开发人员说不是BUG，有2种情况，一是需求没有确定，所以我可以这么做，这个时候可以找来产品经理进行确认，需不需要改动。3方商量确定好后再看要不要改。二是这种情况不可能发生，所以不需要修改，这个时候，我可以先尽可能的说出是BUG的一句是什么？如果被用户发现或出了问题，会有什么不良结果？程序员可能会给你很多理由，你可以对他的解释进行反驳。如果还是不行，那我可以给这个问题提出来，跟开发经理和测试经理进行确认，如果要修改就改，如果不要修改就不改。其实有些真的不是BUG，我也只是建议的方式写进测试文档中，如果开发人员不修改也没有大问题。如果不是BUG的话，一定要坚持自己的立场，让问题得到最后的确认。\n　　29、你自认为测试的优势在哪里？\n　　优势在于我对测试坚定不移的信心和热情，虽然经验还不足，但测试需要的基本技能我有信心在工作中得以发挥。\n　　30、什么是系统瓶颈？\n　　瓶颈主要是指整个软硬件构成的软件系统某一方面或者几个方面能力不能满足用户的特定业务要求，“特定”是指瓶颈会在某些条件下会出现，因为毕竟大多数系统在投入前。\n　　严格的从技术角度讲，所有的系统都会有瓶颈，因为大多数系统的资源配置不是协调的，例如CPU使用率刚好达到100％时，内存也正好耗尽的系统不是很多见。因此我们讨论系统瓶颈要从应用的角度讨论：关键是看系统能否满足用户需求。在用户极限使用系统的情况下，系统的响应仍然正常，我们可以认为改系统没有瓶颈或者瓶颈不会影响用户工作。\n　　因此我们测试系统瓶颈主要是实现下面两个目的：\n　　-发现“表面”的瓶颈。主要是模拟用户的操作，找出用户极限使用系统时的瓶颈，然后解决瓶颈，这是性能测试的基本目标。\n　　-发现潜在的瓶颈并解决，保证系统的长期稳定性。主要是考虑用户在将来扩展系统或者业务发生变化时，系统能够适应变化。满足用户目前需求的系统不是最好的，我们设计系统的目标是在保证系统整个软件生命周期能够不断适应用户的变化，或者通过简单扩展系统就可以适应新的变化。\n　　31、文档测试主要包含什么内容？\n　　在国内软件开发管理中，文档管理几乎是最弱的一项，因而在测试工作中特别容易忽略文档测试也就不足为奇了。要想给用户提供完整的产品，文档测试是必不可少的。文档测试一般注重下面几个方面：\n　　文档的完整性：主要是测试文档内容的全面性与完整性，从总体上把握文档的质量。例如用户手册应该包括软件的所有功能模块。\n　　描述与软件实际情况的一致性：主要测试软件文档与软件实际的一致程度。例如用户手册基本完整后，我们还要注意用户手册与实际功能描述是否一致。因为文档往往跟不上软件版本的更新速度。\n　　易理解性：主要是检查文档对关键、重要的操作有无图文说明，文字、图表是否易于理解。对于关键、重要的操作仅仅只有文字说明肯定是不够的，应该附有图表使说明更为直观和明了。\n　　文档中提供操作的实例：这项检查内容主要针对用户手册。对主要功能和关键操作提供的应用实例是否丰富，提供的实例描述是否详细。只有简单的图文说明，而无实例的用户手册看起来就像是软件界面的简单拷贝，对于用户来说，实际上没有什么帮助。\n　　印刷与包装质量：主要是检查软件文档的商品化程度。有些用户手册是简单打印、装订而成，过于粗糙，不易于用户保存。优秀的文档例如用户手册和技术白皮书，应提供商品化包装，并且印刷精美。\n　　32、功能测试用例需要详细到什么程度才是合格的？\n　　这个问题也是测试工程师经常问的问题。有人主张测试用例详细到每个步骤执行什么都要写出来，目的是即使一个不了解系统的新手都可以按照测试用例来执行工作。主张这类写法的人还可以举出例子：欧美、日本等软件外包文档都是这样做的。\n　　另外一种观点就是主张写的粗些，类似于编写测试大纲。主张这种观点的人是因为软件开发需求管理不规范，变动十分频繁，因而不能按照欧美的高标准来编写测试用例。这样的测试用例容易维护，可以让测试执行人员有更大的发挥空间。\n　　实际上，软件测试用例的详细程度首先要以覆盖到测试点为基本要求。举个例子：“用户登陆系统”的测试用例可以不写出具体的执行数据，但是至少要写出五种以上情况（），如果只用一句话覆盖了这个功能是不合格的测试用例。覆盖功能点不是指列出功能点，而是要写出功能点的各个方面（如果组合情况较多时可以采用等价划分）。\n　　另一个影响测试用例的就是组织的开发能力和测试对象特点。如果开发力量比较落后，编写较详细的测试用例是不现实的，因为根本没有那么大的资源投入，当然这种情况很随着团队的发展而逐渐有所改善。测试对象特点重点是指测试对象在进度、成本等方面的要求，如果进度较紧张的情况下，是根本没有时间写出高质量的测试用例的，甚至有些时候测试工作只是一种辅助工作，因而不编写测试用例。\n　　因此，测试用例的编写要根据测试对象特点、团队的执行能力等各个方面综合起来决定编写策略。最后要注意的是测试人员一定不能抱怨，力争在不断提高测试用例编写水平的同时，不断地提高自身能力。\n　　33、配置和兼容性测试的区别是什么？\n　　配置测试的目的是保证软件在其相关的硬件上能够正常运行，而兼容性测试主要是测试软件能否与不同的软件正确协作。\n　　配置测试的核心内容就是使用各种硬件来测试软件的运行情况，一般包括：\n　　（1）软件在不同的主机上的运行情况，例如Dell和Apple；\n　　（2）软件在不同的组件上的运行情况，例如开发的拨号程序要测试在不同厂商生产的Modem上的运行情况；\n　　（3）不同的外设；\n　　（4）不同的接口；\n　　（5）不同的可选项，例如不同的内存大小；\n　　兼容性测试的核心内容：\n　　（1）测试软件是否能在不同的操作系统平台上兼容；\n　　（2）测试软件是否能在同一操作系统平台的不同版本上兼容；\n　　（3）软件本身能否向前或者向后兼容；\n　　（4）测试软件能否与其它相关的软件兼容；\n　　（5）数据兼容性测试，主要是指数据能否共享；\n　　配置和兼容性测试通称对开发系统类软件比较重要，例如驱动程序、操作系统、数据库管理系统等。具体进行时仍然按照测试用例来执行。\n　　34、软件文档测试主要包含什么？\n　　随着软件文档系统日益庞大，文档测试已经成为软件测试的重要内容。文档测试对象主要如下：\n　　-包装文字和图形；\n　　-市场宣传材料、广告以及其它插页；\n　　-授权、注册登记表；\n　　-最终用户许可协议；\n　　-安装和设置向导；\n　　-用户手册；\n　　-联机帮助；\n　　-样例、示范例子和模板；\n　　-……\n　　文档测试的目的是提高易用性和可靠性，降低支持费用，因为用户通过文档就可以自己解决问题。因文档测试的检查内容主要如下：\n　　-读者对象——主要是文档的内容是否能让该级别的读者理解；\n　　-术语——主要是检查术语是否适合读者；\n　　-内容和主题——检查主题是否合适、是否丢失、格式是否规范等；\n　　-图标和屏幕抓图——检查图表的准确度和精确度；\n　　-样例和示例——是否与软件功能一致；\n　　-拼写和语法；\n　　-文档的关联性——是否与其它相关文档的内容一致，例如与广告信息是否一致；\n　　文档测试是相当重要的一项测试工作，不但要给予充分的重视，更要要认真的完成，象做功能测试一样来对待文档测试。\n　　35、没有产品说明书和需求文档地情况下能够进行黑盒测试吗？\n　　这个问题是国内测试工程师经常遇到的问题，根源就是国内软件开发文档管理不规范，对变更的管理方法就更不合理了。实际上没有任何文档的时候，测试人员是能够进行黑盒测试的，这种测试方式我们可以称之为探索测试，具体做法就是测试工程师根据自己的专业技能、领域知识等不断的深入了解测试对象、理解软件功能，进而发现缺陷。\n　　在这种做法基本上把软件当成了产品说明书，测试过程中要和开发人员不断的进行交流。尤其在作项目的时候，进度压力比较大，可以作为加急测试方案。最大的风险是不知道有些特性是否被遗漏。\n　　36、测试中的“杀虫剂怪事”是指什么？\n　　“杀虫剂怪事”一词由BorisBeizer在其编著的《软件测试技术》第二版中提出。用于描述测试人员对同一测试对象进行的测试次数越多，发现的缺陷就会越来越少的现象。就像老用一种农药，害虫就会有免疫力，农药发挥不了效力。这种现象的根本原因就是测试人员对测试软件过于熟悉，形成思维定势。\n　　为了克服这种现象，测试人员需要不断编写新的测试程序或者测试用例，对程序的不同部分进行测试，以发现更多的缺陷。也可以引用新人来测试软件，刚刚进来的新手往往能发现一些意想不到的问题。\n　　37、在配置测试中，如何判断发现的缺陷是普通问题还是特定的配置问题？\n　　在进行配置测试时，测试工程师仍然会发现一些普通的缺陷，也就是与配置环境无关的缺陷。因此判断新发现的问题，需要在不同的配置中重新执行发现软件缺陷的步骤，如果软件缺陷不出现了，就可能是配置缺陷；如果在所有的配置中都出现，就可能是普通缺陷。\n　　需要注意的是，配置问题可以在一大类配置中出现。例如，拨号程序可能在所有的外置Modem中都存在问题，而内置的Modem不会有任何问题。\n　　38、为什么尽量不要让时间有富裕的员工去做一些测试？\n　　表面上看这体现了管理的效率和灵活性，但实际上也体现了管理者对测试的轻视。测试和测试的人有很大关系。测试工作人员应该是勤奋并富有耐心，善于学习、思考和发现问题，细心有条理，总结问题，如果具备这样的优点，做其它工作同样也会很出色，因此这里还有一个要求，就是要喜欢测试这项工作。如果他是专职的，那么肯定更有经验和信心。国内的小伙子好象都喜欢做程序员，两者工作性质不同，待遇不同，地位不同，对自我实现的价值的认识也不同，这是行业的一个需要改善的问题。如果只是为了完成任务而完成任务，或者发现了几个问题就觉得满意了，这在任何其它工作中都是不行的。\n　　39、完全测试程序是可能的吗？\n　　软件测试初学者可能认为拿到软件后需要进行完全测试，找到全部的软件缺陷，使软件“零缺陷”发布。实际上完全测试是不可能的。主要有以下一个原因：\n　　-完全测试比较耗时，时间上不允许；\n　　-完全测试通常意味着较多资源投入，这在现实中往往是行不通的；\n　　-输入量太大，不能一一进行测试；\n　　-输出结果太多，只能分类进行验证；\n　　-软件实现途径太多；\n　　-软件产品说明书没有客观标准，从不同的角度看，软件缺陷的标准不同；\n　　因此测试的程度要根据实际情况确定。\n　　40、软件测试的风险主要体现在哪里？\n　　我们没有对软件进行完全测试，实际就是选择了风险，因为缺陷极有可能存在没有进行测试的部分。举个例子，程序员为了方便，在调试程序时会弹出一些提示信息框，而这些提示只在某种条件下会弹出，碰巧程序发布前这些代码中的一些没有被注释掉。在测试时测试工程师又没有对其进行测试。如果客户碰到它，这将是代价昂贵的缺陷，因为交付后才被客户发现。\n　　因此，我们要尽可能的选择最合适的测试量，把风险降低到最小。')]),n._v(" "),t("p",[n._v("等价类划分-边界值分析-错误推理")]),n._v(" "),t("p",[n._v("传统软件的开发阶段通常会有"),t("strong",[n._v("单元测试")]),n._v("，软件模块集成阶段会有代码级"),t("strong",[n._v("集成测试")]),n._v("，打包部署后会有面向终端用户的GUI测试；再比如，电商网站的测试会分为服务器端"),t("strong",[n._v("基于API的测试、中间件测试、前端GUI测试")]),n._v("等。")]),n._v(" "),t("p",[n._v("测试开发工程师在需求分析和设计阶段就开始介入，因为这个阶段是理解和掌握软件的原始业务需求的最好时机。")]),n._v(" "),t("ol",[t("li",[t("strong",[n._v("从软件功能需求出发，全面地、无遗漏地识别出测试需求是至关重要的，这将直接关系到用例的测试覆盖率。")]),n._v(" 比如，如果你没有识别出用户登录功能的安全性测试需求，那么后续设计的测试用例就完全不会涉及安全性，最终造成重要测试漏洞。")]),n._v(" "),t("li",[t("strong",[n._v("对于识别出的每个测试需求点，需要综合运用等价类划分、边界值分析和错误推测方法来全面地设计测试用例。")]),n._v(" 这里需要注意的是，要综合运用这三种方法，并针对每个测试需求点的具体情况，进行灵活选择。- 以“用户登录”的功能性测试需求为例，你首先应该对“用户名”和“密码”这两个输入项分别进行等价类划分，列出对应的有效等价类和无效等价类，对于无效等价类的识别可以采用错误猜测法（比如，用户名包含特殊字符等），然后基于两者可能的组合，设计出第一批测试用例。- 等价类划分完后，你需要补充“用户名”和“密码”这两个输入项的边界值的测试用例，比如用户名为空（NULL）、用户名长度刚刚大于允许长度等。")])]),n._v(" "),t("p",[n._v("单元测试是指，对软件中的最小可测试单元在与程序其他部分相隔离的情况下进行检查和验证的工作，这里的最小可测试单元通常是指函数或者类。")]),n._v(" "),t("p",[n._v("持续集成：多个开发人员对代码进行了修改，同时合并可能会产生代码冲突，不易长时间相隔较大的提交（冲突会更加明显），于是会经常性的短时间提交修改后的代码，当代码提交之后，合并进主分支的代码会自动运行单元测试和集成测试，如果测试发现问题，可以及时发现。")]),n._v(" "),t("p",[n._v("测试覆盖率通常被用来衡量测试的充分性和完整性，从广义的角度来讲，测试覆盖率主要分为两大类，一类是面向项目的需求覆盖率，另一类是更偏向技术的代码覆盖率。")]),n._v(" "),t("p",[t("strong",[n._v("简单来说，代码覆盖率是指，至少被执行了一次的条目数占整个条目数的百分比。")])]),n._v(" "),t("ul",[t("li",[n._v("行覆盖率又称为语句覆盖率，指已经被执行到的语句占总可执行语句（不包含类似C++的头文件声明、代码注释、空行等等）的百分比。这是最常用也是要求最低的覆盖率指标。实际项目中通常会结合判定覆盖率或者条件覆盖率一起使用。")]),n._v(" "),t("li",[n._v("判定覆盖又称分支覆盖，用以度量程序中每一个判定的分支是否都被测试到了，即代码中每个判断的取真分支和取假分支是否各被覆盖至少各一次。比如，对于if(a>0 && b>0)，就要求覆盖“a>0 && b>0”为TURE和FALSE各一次。")]),n._v(" "),t("li",[n._v("条件覆盖是指，判定中的每个条件的可能取值至少满足一次，度量判定中的每个条件的结果TRUE和FALSE是否都被测试到了。比如，对于if(a>0 && b>0)，就要求“a>0”取TRUE和FALSE各一次，同时要求“b>0”取TRUE和FALSE各一次。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);