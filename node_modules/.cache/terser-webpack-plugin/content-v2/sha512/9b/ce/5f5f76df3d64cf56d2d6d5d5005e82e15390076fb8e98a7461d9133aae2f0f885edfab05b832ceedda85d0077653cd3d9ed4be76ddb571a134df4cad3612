{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{281:function(_,o,v){\"use strict\";v.r(o);var e=v(14),t=Object(e.a)({},(function(){var _=this,o=_._self._c;return o(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[o(\"h1\",{attrs:{id:\"应用层协议\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用层协议\"}},[_._v(\"#\")]),_._v(\" 应用层协议\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"应用层协议(application-layer protocol)定义了运行在不同 端系统上的应用程序进程如何相互传递报文\")])]),_._v(\" \"),o(\"ul\",[o(\"li\",[_._v(\"交换的报文类型，例如请求报文和响应报文。\")]),_._v(\" \"),o(\"li\",[_._v(\"各种报文类型的语法，如报文中的各个字段及这些字段是如何描述的.\")]),_._v(\" \"),o(\"li\",[_._v(\"字段的语义，即这些字段中的信息的含义。\")]),_._v(\" \"),o(\"li\",[_._v(\"确定一个进程何时以及如何发送报文，对报文进行响应的规则。\")])]),_._v(\" \"),o(\"h2\",{attrs:{id:\"_1-web\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-web\"}},[_._v(\"#\")]),_._v(\" 1.Web\")]),_._v(\" \"),o(\"h3\",{attrs:{id:\"_1-1-http\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-http\"}},[_._v(\"#\")]),_._v(\" 1.1 HTTP\")]),_._v(\" \"),o(\"p\",[_._v(\"Web的应用层协议是超文本传输协议(HyperText Transfer Protocol, HTTP),它是Web 的核心，在[RFC 1945]和[RFC 2616]中进行了定义。HTTP由两个程序实现:一个客户程序和一个服务器程序。客户程序和服务器程序运行在不同的端系统中，通过交换 HTTP报文进行会话。HTTP定义了这些报文的结构以及客户和服务器进行报文交换的方式。\")]),_._v(\" \"),o(\"p\",[_._v(\"分层体系结构最大的优点，即 HTTP协议不用担心数据丢失，也不关注TCP从网络的数据丢失和乱序故障中恢复的细节。那是TCP以及协议栈较低层协议的工作。\")]),_._v(\" \"),o(\"p\",[_._v(\"服务器向客户发送被请求的文件，而不存储任何关于该客户的状态信息。假如某个特定的客户在短短的几秒内两次请求同一个对象，服务器并不会因 为刚刚为该客户提供了该对象就不再做出反应，而是重新发送该对象，就像服务器已经完全忘记不久之前所做过的事一样。因为HTTP服务器并不保存关于客户的任何信息，所以 我们说HTTP是一个\"),o(\"strong\",[_._v(\"无状态协议\")]),_._v(\"(stateless protocol)。\")]),_._v(\" \"),o(\"hr\"),_._v(\" \"),o(\"h4\",{attrs:{id:\"_1-1-1持久连接和非持久连接\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-1持久连接和非持久连接\"}},[_._v(\"#\")]),_._v(\" 1.1.1持久连接和非持久连接\")]),_._v(\" \"),o(\"p\",[_._v(\"HTTP既能够使用非持续连接，也能够使用持续连接。尽管HTTP在其默认方式下使用持续连接，HTTP客户和服务器也能配置成使用非持续连接。\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"非持续连接\")]),_._v(\"：假设该页面含有一个HTML基本文件和10个JPEG图形，并且这11个对象位于同一台服务器上。上面的步骤举例说明了非持续连接的使用，其中每个TCP连接在服务器发送一个对象后关闭，即该连接并不为其他的对象而持续下来。值得注意的是每个TCP连接只传输一个请求 报文和一个响应报文。因此在本例中，当用户请求该Web页面时，要产生\"),o(\"strong\",[_._v(\"11个TCP连接\")]),_._v(\"。\")]),_._v(\" \"),o(\"p\",[_._v(\"事实上，用户能够配置现代 浏览器来控制连接的并行度。在默认方式下，大部分浏览器打开5 ~ 10个并行的TCP连接，而 每条连接处理一个请求响应事务。如果用户愿意，最大并行连接数可以设置为1,这样10条连接就会串行建立。我们在下一章会看到，使 用并行连接可以缩短响应时间。\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"往返时间（Round-trip time）RTT\")]),_._v(\"：该时间是指一个短分组从客户到服务器然后再返回客户所花费的时间。RTT包括分组传 播时延、分组在中间路由器和交换机上的排队时延以及分组处理时延。\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"非持续连接\")]),_._v(\"有一些缺点。第一，必须为每一个请求的对象建立和维护一个全新的连接。对于每个这样的连接，在客户和服务器中都要分配TCP的缓冲区和保持TCP变量, 这给Web服务器带来了严重的负担，因为一台Web服务器可能同时服务于数以百计不同的客户的请求。第二，就像我们刚描述的那样，每一个对象经受两倍RTT的交付时延, 即一个RTT用于创建TCP,另一个RTT用于请求和接收一个对象。\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"持续连接\")]),_._v(\"：\")]),_._v(\" \"),o(\"p\",[_._v(\"在采用HTTP 1.1持续连接的情况下，服务器在发送响应后保持该TCP连接打开。在 相同的客户与服务器之间，后续的请求和响应报文能够通过相同的连接进行传送。特别 是，一个完整的Web页面(上例中的HTML基本文件加上10个图形)可以用单个持续TCP连接进行传送。更有甚者，位于同一台服务器的多个Web页面在从该服务器发送给同 一个客户时，可以在单个持续TCP连接上进行。对对象的这些请求可以一个接一个地发 出，而不必等待对未决请求(流水线)的回答。一般来说，如果一条连接经过一定时间间隔 (一个可配置的超时间隔)仍未被使用，HTTP服务器就关闭该连接。\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"HTTP/2\")]),_._v(\" [RFC 7540]是在HTTP 1. 1基础上构建的，它允许在相同连接中多个请求和回答交错，并增加了在该连接中优化HTTP报文请求 和回答的机制。\")]),_._v(\" \"),o(\"hr\"),_._v(\" \"),o(\"h4\",{attrs:{id:\"_1-1-2-cookie\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-2-cookie\"}},[_._v(\"#\")]),_._v(\" 1.1.2 cookie\")]),_._v(\" \"),o(\"p\",[_._v(\"一个Web站点通 常希望能够识别用户，可能是因为服务器希望限制用户的访问，或者因为它希望把内容与用户身份联系起来。为此，HTTP使用了 cookie。cookie在 [RFC 6265 ]中定义，它允许 站点对用户进行跟踪。目前大多数商务Web站点都使用了cookie。\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"cookie\")]),_._v(\"技术有4个组件:\")]),_._v(\" \"),o(\"ul\",[o(\"li\",[_._v(\"在HTTP响应报文中的一个cookie首部行;\")]),_._v(\" \"),o(\"li\",[_._v(\"在HTTP请求报文中的一个cookie首部行;\")]),_._v(\" \"),o(\"li\",[_._v(\"在用户端系统中保留有一个cookie文件，并由用户的浏览器进行管理;\")]),_._v(\" \"),o(\"li\",[_._v(\"位于Web站点的一个后端数据库。\")])]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"cookie\")]),_._v(\"使用场景：\")]),_._v(\" \"),o(\"p\",[_._v(\"假设Susan总是从家中PC使用Internet Explorer ± 网，她首次与Amazon, com联系。我们假定过去她已经访问过eBay站点。当请 求报文到达该Amazon Web服务器时，该Web站点将产生一个唯一识别码，并以此作为索引在它的后端数据库中产生一个表项。接下来Amazon Web服务器用一个包含Set-cookie:首部的HTTP响应报文对Susan的浏览器进行响应，其中Set-cookie:首部含有该识别码。\")]),_._v(\" \"),o(\"p\",[_._v(\"例如，该首部行可能是 \"),o(\"strong\",[_._v(\"SET-Cookie：1234\")])]),_._v(\" \"),o(\"p\",[_._v(\"当Susan的浏览器收到了该HTTP响应报文时，它会看到该Set-cookie:首部。该浏览器在它管理的特定cookie文件中添加一行，该行包含服务器的主机名和在Set-cookie: 首部 中的识别码。值得注意的是该cookie文件已经有了用于eBay的表项，因为Susan过去访问过 该站点。当Susan继续浏览Amazon网站时，每请求一个Web页面，其浏览器就会查询该cookie文件并抽取她对这个网站的识别码，并放到HTTP请求报文中包括识别码的cookie首部行中。特别是，发往该Amazon服务器的每个HTTP请求报文都包括以下首部行:\")]),_._v(\" \"),o(\"p\",[o(\"strong\",[_._v(\"cookie：1234\")])]),_._v(\" \"),o(\"p\",[_._v(\"在这种方式下，Amazon服务器可以跟踪Susan在Amazon站点的活动。尽管Amazon Web站点不必知道Susan的名字，但它确切地知道用户1234按照什么顺序、在什么时间、访问了哪些页面! Amazon使用cookie来提供它的购物车服务，即Amazon能够维护Susan 希望购买的物品列表，这样在Susan结束会话时可以一起为它们付费。\")]),_._v(\" \"),o(\"p\",[_._v(\"当用户向一个基于Web的电子邮件系统(如Hotmail)注册时，浏览器向服务器发送cookie信息，允许该服务器在用户与应用程序会话的过程中标识该用户。\")]),_._v(\" \"),o(\"hr\"),_._v(\" \"),o(\"h4\",{attrs:{id:\"_1-2-3-web缓存\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-3-web缓存\"}},[_._v(\"#\")]),_._v(\" 1.2.3 Web缓存\")]),_._v(\" \"),o(\"p\",[_._v(\"Web缓存器(Webcache)也叫代理服务器(proxy server),它是能够代表初始Web服务器来满足HTTP请求的网络实体。Web缓存器有自己的磁盘存储空间, 并在存储空间中保存最近请求过的对象的副本。\")]),_._v(\" \"),o(\"p\",[_._v(\"Web缓存器能从整体上大大减低因特网上的Web流量，从而改善了所有应用的性能。\")]),_._v(\" \"),o(\"p\",[_._v(\"通过使用\"),o(\"strong\",[_._v(\"内容分发网络(Content Distribution Network, CDN)\")]),_._v(\" , Web缓存器正在因特网 中发挥着越来越重要的作用。CDN公司在因特网上安装了许多地理上分散的缓存器，因而 使大量流量实现了本地化。有多个共享的CDN (例如Akamai和Limelight)和专用的CDN(例如谷歌和Netflix)\")]),_._v(\" \"),o(\"h4\",{attrs:{id:\"_1-2-4-smtp\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-4-smtp\"}},[_._v(\"#\")]),_._v(\" 1.2.4 SMTP\")]),_._v(\" \"),o(\"p\",[_._v(\"SMTP是因特网电子邮件中主要的应用层协议。它使用TCP可靠数据传输服务，从发 送方的邮件服务器向接收方的邮件服务器发送邮件。像大多数应用层协议一样，SMTP也 有两个部分:运行在发送方邮件服务器的客户端和运行在接收方邮件服务器的服务器端。\")]),_._v(\" \"),o(\"p\",[_._v(\"每台邮件服务器上既运行SMTP的客户端也运行SMTP的服务器端。当一个邮件服务器向 其他邮件服务器发送邮件时，它就表现为SMTP的客户;当邮件服务器从其他邮件服务器 上接收邮件时，它就表现为一个SMTP的服务器。\")]),_._v(\" \"),o(\"p\",[_._v(\"SMTP用于从发送方的邮件服务器发送报文到接收方的邮件服务器。\")]),_._v(\" \"),o(\"p\",[_._v(\"一些流行的邮件访问协议，包括第三版的\"),o(\"strong\",[_._v(\"邮局协议(Post Office Protocol—Version 3 , POP3)、因特网邮件访问协议(Internet Mail Access Protocol, IMAP)以及 HTTP。\")])]),_._v(\" \"),o(\"p\",[_._v(\"SMTP用来将邮件从发送方的邮件 服务器传输到接收方的邮件服务器;SMTP也用来将邮件从发送方的用户代理传送到发送 方的邮件服务器。如 POP3这样的邮件访问协议用来将邮件从接收方的邮件服务器传送到 接收方的用户代理。\")])])}),[],!1,null,null,null);o.default=t.exports}}]);","extractedComments":[]}