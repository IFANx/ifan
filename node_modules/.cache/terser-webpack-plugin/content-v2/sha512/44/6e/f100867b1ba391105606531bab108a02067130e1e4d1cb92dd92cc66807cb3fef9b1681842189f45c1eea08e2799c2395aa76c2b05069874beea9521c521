{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{333:function(t,a,s){\"use strict\";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"面试题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面试题\"}},[t._v(\"#\")]),t._v(\" 面试题\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-高并发秒杀超卖问题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-高并发秒杀超卖问题\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"1.高并发秒杀超卖问题\")])]),t._v(\" \"),a(\"p\",[t._v(\"1.数据库层面的互斥锁，2.应用层面的分布式锁，3.redis的单线程特性+内存运行（预减库存，但存在缓存数据一致性问题）\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-测试-淘宝购物车\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-测试-淘宝购物车\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"2.测试-淘宝购物车\")])]),t._v(\" \"),a(\"p\",[t._v(\"界面测试-功能测试-性能测试-兼容性测试-网络环境测试-异常测试（内存，网络，商品操作是清理后台应用有何影响）-本地-国际化测试（习俗，文化，语言）\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-典型电商促销场景下的云端压力测试实战\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-典型电商促销场景下的云端压力测试实战\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"3.典型电商促销场景下的云端压力测试实战\")])]),t._v(\" \"),a(\"p\",[t._v(\"瞬间集中并发，传统压测工具Loadrunner和Jmeter，基础数据，热点数据，缓存数据，一次性数据\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"压测场景建模\")])]),t._v(\" \"),a(\"p\",[t._v(\"完成业务场景建模后，基于其进行压测场景建模，这里要考虑到采用的测试策略，当然，测试策略的制定需要结合系统架构（需要梳理清各服务间的依赖和调用关系）和业务特点来说。\")]),t._v(\" \"),a(\"p\",[t._v(\"比如抽奖抢券秒杀场景，就需要采用并发测试以及超卖验证等测试策略。\")]),t._v(\" \"),a(\"p\",[t._v(\"考虑到业务配比的情况，我们还需要进行单接口的基准测试以及单机混合场景容量测试。\")]),t._v(\" \"),a(\"p\",[t._v(\"核心业务流程，其特性要求系统具备高可用和稳定性，那么测试策略就需要采用高可用测试和稳定性测试。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"1、压测\")])]),t._v(\" \"),a(\"p\",[t._v(\"压测工作主要有如下几种情景，按照预先制定的测试策略执行即可（不排除临时特殊情况，这里需灵活调整）。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"①、单机单接口测试\")]),t._v(\"：该策略主要是为了验证单接口的性能基准，避免整个调用链路过程中某个服务/接口成为瓶颈；\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"②、单机多接口测试\")]),t._v(\"：相较于微服务架构的服务解耦，有时候某些服务间互相调用依赖的强关系可能会造成资源竞争等情况，需要通过这种方式来排查验证；\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"③、单机混合场景测试\")]),t._v(\"：这种测试方式的主要作用是得到一个单机混合场景下的最优性能表现，为服务扩容和线上容量规划提供参考数据；\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"④、多节点测试\")]),t._v(\"：现在大多数的互联网企业都采用的集群/分布式/微服务架构，在多节点部署时候，考虑到SLB的边际递减效应，需要进行多节点测试；\")]),t._v(\" \"),a(\"p\",[t._v(\"通过该种方式，来验证负载均衡递减比率，为生产扩容提供精确的参考依据；\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"⑤、高可用测试\")]),t._v(\"：高可用主要验证2点：\"),a(\"strong\",[t._v(\"服务异常/宕机是否可以恢复\")]),t._v(\"以及\"),a(\"strong\",[t._v(\"恢复到正常水*所耗费的时间\")]),t._v(\"（越短越好）。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"⑥、稳定性测试\")]),t._v(\"：前面提到了核心业务流程必须保证稳定性，稳定性测试一般根据系统特点和业务类型，分为两类：5d\"),a(\"em\",[t._v(\"12h、7d\")]),t._v(\"24h。\")]),t._v(\" \"),a(\"p\",[t._v(\"一般来说，稳定性测试的执行时间，12h即可（当然，24h或者更长也可以，根据具体情况灵活调整）。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://img2018.cnblogs.com/blog/983980/201906/983980-20190624003458858-843470018.png\",alt:\"983980-20190624003458858-843470018\"}})]),t._v(\" \"),a(\"p\",[t._v(\"临时扩容或者服务降级限流甚至熔断等机制，保证系统在峰值流量下保持服务可用。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4-liunx下怎么查进程-怎么查端口\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-liunx下怎么查进程-怎么查端口\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"4.liunx下怎么查进程，怎么查端口\")])]),t._v(\" \"),a(\"p\",[t._v(\"1、利用lsof命令查看，当命令参数设置为“-i”时用以显示符合条件的进程情况，语法为“lsof -i:端口号”；\")]),t._v(\" \"),a(\"p\",[t._v(\"2、利用netstat命令查看，该命令会列出端口所有状态的连接，语法为“netstat-tunlp|grep 端口号”。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5-线程池核心参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-线程池核心参数\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"5.线程池核心参数\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"corePoolSize：核心线程数。\")]),t._v(\" \"),a(\"li\",[t._v(\"maximumPoolSize：最大线程数。\"),a(\"strong\",[t._v(\"线程池允许创建的最大线程数量，当线程池的任务队列满了之后，可以创建的最大线程数。\")])]),t._v(\" \"),a(\"li\",[t._v(\"keepAliveTime：空闲线程存活时间。\")]),t._v(\" \"),a(\"li\",[t._v(\"TimeUnit：时间单位。\")]),t._v(\" \"),a(\"li\",[t._v(\"BlockingQueue：线程池任务队列。\")]),t._v(\" \"),a(\"li\",[t._v(\"ThreadFactory：创建线程的工厂。\")]),t._v(\" \"),a(\"li\",[t._v(\"RejectedExecutionHandler：拒绝策略。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"拒绝策略：当线程池的任务超出线程池队列可以存储的最大值之后，执行的策略。\")]),t._v(\"\\n默认的拒绝策略有以下 4 种：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"AbortPolicy：拒绝并抛出异常。\")]),t._v(\" \"),a(\"li\",[t._v(\"CallerRunsPolicy：使用当前调用的线程来执行此任务。\")]),t._v(\" \"),a(\"li\",[t._v(\"DiscardOldestPolicy：抛弃队列头部（最旧）的一个任务，并执行当前任务。\")]),t._v(\" \"),a(\"li\",[t._v(\"DiscardPolicy：忽略并抛弃当前任务。\")])]),t._v(\" \"),a(\"p\",[t._v(\"线程池的默认策略是 AbortPolicy 拒绝并抛出异常。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_6-spring-涉及到的设计模式汇总\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-spring-涉及到的设计模式汇总\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"6.Spring-涉及到的设计模式汇总\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"1. 简单工厂\")])]),t._v(\" \"),a(\"p\",[t._v(\"简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类。\")]),t._v(\" \"),a(\"p\",[t._v(\"Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"2. 工厂方法（Factory Method）\")])]),t._v(\" \"),a(\"p\",[t._v(\"定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"3. 单例（Singleton）\")])]),t._v(\" \"),a(\"p\",[t._v(\"保证一个类仅有一个实例，并提供一个访问它的全局访问点。\")]),t._v(\" \"),a(\"p\",[t._v(\"Spring中的单例模式完成了后半句话，即提供了全局的访问点BeanFactory。但没有从构造器级别去控制单例，这是因为Spring管理的是是任意的Java对象。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"4. 适配器（Adapter）\")])]),t._v(\" \"),a(\"p\",[t._v(\"将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\")]),t._v(\" \"),a(\"p\",[t._v(\"Spring中在对于AOP的处理中有Adapter模式的例子\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"5.包装器（Decorator）\")])]),t._v(\" \"),a(\"p\",[t._v(\"动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"6. 代理（Proxy）\")])]),t._v(\" \"),a(\"p\",[t._v(\"为其他对象提供一种代理以控制对这个对象的访问。\")]),t._v(\" \"),a(\"p\",[t._v(\"从结构上来看和Decorator模式类似，但Proxy是控制，更像是一种对功能的限制，而Decorator是增加职责。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"7.观察者（Observer）\")])]),t._v(\" \"),a(\"p\",[t._v(\"定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"8. 策略（Strategy）\")])]),t._v(\" \"),a(\"p\",[t._v(\"定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"9.模板方法（Template Method）\")])]),t._v(\" \"),a(\"p\",[t._v(\"定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\")]),t._v(\" \"),a(\"p\",[t._v(\"Template Method模式一般是需要继承的。这里想要探讨另一种对Template Method的理解。Spring中的JdbcTemplate，在用这个类时并不想去继承这个类，因为这个类的方法太多，但是我们还是想用到JdbcTemplate已有的稳定的、公用的数据库连接，那么我们怎么办呢？我们可以把变化的东西抽出来作为一个参数传入JdbcTemplate的方法中。但是变化的东西是一段代码，而且这段代码会用到JdbcTemplate中的变量。怎么办？那我们就用回调对象吧。在这个回调对象中定义一个操纵JdbcTemplate中变量的方法，我们去实现这个方法，就把变化的东西集中到这里了。然后我们再传入这个回调对象到JdbcTemplate，从而完成了调用。这可能是Template Method不需要继承的另一种实现方式吧。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_7-jdbc建立连接流程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-jdbc建立连接流程\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"7. JDBC建立连接流程\")])]),t._v(\" \"),a(\"p\",[t._v(\"SPI（服务提供接口），定义标准，厂商实现接口，提供Jar包，ClassLoader记载对应的jar包，执行对应的方法。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_8-布隆过滤器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-布隆过滤器\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"8.布隆过滤器\")])]),t._v(\" \"),a(\"p\",[t._v(\"布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。\"),a(\"strong\",[t._v(\"它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难\")]),t._v(\"。(布隆过滤器使用了K个hash函数计算，所有可能在多个位置hash索引为1，这样可能会出现一个从未索引的值，在布隆过滤器中可以被查询到的情况，误判（可预测比例）)\"),a(\"strong\",[t._v(\"当我们搜索一个值的时候，若该值经过 K 个哈希函数运算后的任何一个索引位为 ”0“，那么该值肯定不在集合中。但如果所有哈希索引值均为 ”1“，则只能说该搜索的值可能存在集合中\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"利用布隆过滤器我们可以预先把数据查询的主键，比如用户 ID 或文章 ID 缓存到过滤器中。当根据 ID 进行数据查询的时候，我们先判断该 ID 是否存在，若存在的话，则进行下一步处理。若不存在的话，直接返回，这样就不会触发后续的数据库查询。需要注意的是缓存穿透不能完全解决，我们只能将其控制在一个可以容忍的范围内。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_9-threadlocal\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-threadlocal\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"9.ThreadLocal\")])]),t._v(\" \"),a(\"p\",[t._v(\"https://pdai.tech/md/java/thread/java-thread-x-threadlocal.html\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_10-session是什么-它与cookie有什么区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-session是什么-它与cookie有什么区别\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"10.\"),a(\"a\",{attrs:{href:\"https://segmentfault.com/a/1190000041429984\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Session是什么？它与Cookie有什么区别？\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"p\",[t._v(\"https://www.51cto.com/article/679219.html\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_11-tomcat如何以及为什么要打破双亲委派模型-顺带介绍一下双亲委派模型\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-tomcat如何以及为什么要打破双亲委派模型-顺带介绍一下双亲委派模型\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"11.tomcat如何以及为什么要打破双亲委派模型（顺带介绍一下双亲委派模型）\")])]),t._v(\" \"),a(\"p\",[t._v(\"双亲委派模型（Parent Delegation Model）是Java类加载器的一种工作机制，它是Java安全模型的核心之一。在Java中，类加载器（ClassLoader）负责将类的字节码加载到内存中，并生成对应的Class对象供程序使用。双亲委派模型规定了类加载器的工作流程和层次结构，保证了类的加载的安全性和一致性。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果一个类加载器收到了加载某个类的请求，则该类加载器并不会去加载该类，而是把这个请求委派给父类加载器，每一个层次的类加载器都是如此，因此所有的类加载请求最终都会传送到顶端的启动类加载器；只有当父类加载器在其搜索范围内无法找到所需的类，并将该结果反馈给子类加载器，子类加载器会尝试去自己加载。\")]),t._v(\" \"),a(\"p\",[t._v(\"双亲委派模型的基本原则是：当一个类加载器需要加载一个类时，它首先会将这个任务委托给父类加载器。如果父类加载器无法加载这个类，子类加载器才会尝试加载。这种委派机制一直向上追溯，直到顶层的启动类加载器（BootStrap ClassLoader）。\")]),t._v(\" \"),a(\"p\",[t._v(\"双亲委派模型的优势在于保证了类的加载的唯一性和一致性。当一个类被加载后，它会被缓存在加载器的缓存中，下次再次加载这个类时，直接从缓存中取出，不再重新加载。这样可以避免重复加载同一个类，节省了内存空间，提高了系统的性能。\")]),t._v(\" \"),a(\"p\",[t._v(\"双亲委派模型还增强了Java的安全性。通过委派机制，保证了核心类库的安全性，防止用户自定义的类替换核心类库中的类，避免了恶意代码的注入，提高了系统的稳定性和安全性。例如，当我们编写一个Java应用程序时，如果需要使用String类，那么首先会尝试从父类加载器中加载。只有当父类加载器无法加载时，才会尝试从当前类加载器中加载。这样就保证了我们使用的是JDK中的标准String类，而不是自己定义的String类。\")]),t._v(\" \"),a(\"p\",[t._v(\"双亲委派模型还可以实现类的隔离和防止类的冲突。例如，如果两个不同的类加载器加载了同一个类，由于类加载器是独立的，它们会生成两个不同的Class对象，因此这两个类是不相等的，可以实现类的隔离和防止类的冲突。\")]),t._v(\" \"),a(\"p\",[t._v(\"总结来说，双亲委派模型是Java类加载器的一种工作机制，通过委派机制和层次结构，保证了类的加载的安全性和一致性，增强了Java的安全性，实现了类的隔离和防止类的冲突。它是Java安全模型的重要组成部分，也是Java语言的一个重要特性。\")]),t._v(\" \"),a(\"p\",[t._v(\"打破双亲委派模型（JDBC和Tomcat）\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"因为类加载器受到加载范围的限制，在某些情况下父类加载器无法加载到需要的文件，这时候就需要委托子类加载器去加载class文件。\")])]),t._v(\" \"),a(\"p\",[t._v(\"JDBC的Driver接口定义在JDK中，其实现由各个数据库的服务商来提供，比如MySQL驱动包。DriverManager 类中要加载各个实现了Driver接口的类，然后进行管理，但是DriverManager位于 $JAVA_HOME中jre/lib/rt.jar 包，由BootStrap类加载器加载，而其Driver接口的实现类是位于服务商提供的 Jar 包，**根据类加载机制，当被装载的类引用了另外一个类的时候，虚拟机就会使用装载第一个类的类装载器装载被引用的类。**也就是说BootStrap类加载器还要去加载jar包中的Driver接口的实现类。我们知道，BootStrap类加载器默认只负责加载 $JAVA_HOME中jre/lib/rt.jar 里所有的class，所以需要由子类加载器去加载Driver实现，这就破坏了双亲委派模型。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Tomcat为什么要破坏双亲委派模型\"),a(\"a\",{attrs:{href:\"https://www.cnblogs.com/yueshutong/p/11430885.html#134638671\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1)])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"每个Tomcat的webappClassLoader加载自己的目录下的class文件，不会传递给父类加载器。\")])]),t._v(\" \"),a(\"p\",[t._v(\"事实上，tomcat之所以造了一堆自己的classloader，大致是出于下面三类目的：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"对于各个 \"),a(\"code\",[t._v(\"webapp\")]),t._v(\"中的 \"),a(\"code\",[t._v(\"class\")]),t._v(\"和 \"),a(\"code\",[t._v(\"lib\")]),t._v(\"，需要相互隔离，不能出现一个应用中加载的类库会影响另一个应用的情况，而对于许多应用，需要有共享的lib以便不浪费资源。\")]),t._v(\" \"),a(\"li\",[t._v(\"与 \"),a(\"code\",[t._v(\"jvm\")]),t._v(\"一样的安全性问题。使用单独的 \"),a(\"code\",[t._v(\"classloader\")]),t._v(\"去装载 \"),a(\"code\",[t._v(\"tomcat\")]),t._v(\"自身的类库，以免其他恶意或无意的破坏；\")]),t._v(\" \"),a(\"li\",[t._v(\"热部署。相信大家一定为 \"),a(\"code\",[t._v(\"tomcat\")]),t._v(\"修改文件不用重启就自动重新装载类库而惊叹吧。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_12-四种引用的应用场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-四种引用的应用场景\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"12.四种引用的应用场景\")])]),t._v(\" \"),a(\"p\",[t._v(\"Java中共有四种引用类型，包括强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference），它们各自有着不同的应用场景。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"强引用（Strong Reference）： 强引用是指在程序中普遍存在的引用方式，如果一个对象具有强引用，那么垃圾收集器就不会回收它。当一个对象被多个强引用所引用时，垃圾收集器也不会回收它，直到所有强引用都被释放掉。\")])]),t._v(\" \"),a(\"p\",[t._v(\"应用场景： 强引用通常用于对象的普通应用场景，例如在方法中创建对象并将其赋值给局部变量，或者在类中将对象作为成员变量存储。这些对象在程序运行期间一般都需要保持存在，因此使用强引用可以确保它们不会被垃圾收集器回收。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"软引用（Soft Reference）： 软引用是一种比较弱的引用类型，如果一个对象只有软引用，则在系统内存不足时，垃圾收集器会将其回收。软引用通常用于缓存，如果内存充足，则可以从缓存中获取对象，否则需要重新创建。\")])]),t._v(\" \"),a(\"p\",[t._v(\"应用场景： 软引用通常用于缓存和高速缓存的实现。在缓存中，一些经常使用的对象可以被存储在内存中，以便快速访问。如果系统内存不足，垃圾收集器会回收这些对象，从而释放内存。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"弱引用（Weak Reference）： 弱引用是比软引用更弱的引用类型，如果一个对象只有弱引用，则在下一次垃圾收集时，无论内存是否充足，都会被回收。弱引用通常用于实现缓存或对象注册表，这些对象的生命周期通常比较短。\")])]),t._v(\" \"),a(\"p\",[t._v(\"应用场景： 弱引用通常用于缓存或对象注册表中，这些对象的生命周期通常很短，但在某些情况下需要进行访问。通过使用弱引用，可以确保这些对象在不需要时可以被回收，从而避免内存泄漏。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"虚引用（Phantom Reference）： 虚引用是最弱的一种引用关系，如果一个对象仅持有虚引用，那么它就和没有任何引用一样，它随时可能会被回收，在 JDK1.2 之后，用 PhantomReference 类来表示，通过查看这个类的源码，发现它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 ReferenceQueue 引用队列一起使用。虚引用是最弱的引用类型，它无法通过引用访问到对象，也无法通过引用获取到对象的状态。虚引用主要用于跟踪对象被垃圾回收的状态，可以通过虚引用观察到一个对象是否已经被垃圾收集器回收。\")])]),t._v(\" \"),a(\"p\",[t._v(\"五，引用队列（ReferenceQueue）\")]),t._v(\" \"),a(\"p\",[t._v(\"引用队列可以与软引用、弱引用以及虚引用一起配合使用，当垃圾回收器准备回收一个对象时，如果发现它还有引用，那么就会在回收对象之前，把这个引用加入到与之关联的引用队列中去。程序可以通过判断引用队列中是否已经加入了引用，来判断被引用的对象是否将要被垃圾回收，这样就可以在对象被回收之前采取一些必要的措施。\")]),t._v(\" \"),a(\"p\",[t._v(\"与软引用、弱引用不同，虚引用必须和引用队列一起使用。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"四种引用比较\")])]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"引用类型\")]),t._v(\" \"),a(\"th\",[t._v(\"被垃圾回收时间\")]),t._v(\" \"),a(\"th\",[t._v(\"用途\")]),t._v(\" \"),a(\"th\",[t._v(\"生存时间\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"强引用\")]),t._v(\" \"),a(\"td\",[t._v(\"从来不会\")]),t._v(\" \"),a(\"td\",[t._v(\"对象的一般状态\")]),t._v(\" \"),a(\"td\",[t._v(\"JVM停止运行时终止\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"软引用\")]),t._v(\" \"),a(\"td\",[t._v(\"当内存不足时\")]),t._v(\" \"),a(\"td\",[t._v(\"对象缓存\")]),t._v(\" \"),a(\"td\",[t._v(\"内存不足时终止\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"弱引用\")]),t._v(\" \"),a(\"td\",[t._v(\"正常垃圾回收时\")]),t._v(\" \"),a(\"td\",[t._v(\"对象缓存\")]),t._v(\" \"),a(\"td\",[t._v(\"垃圾回收后终止\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"虚引用\")]),t._v(\" \"),a(\"td\",[t._v(\"正常垃圾回收时\")]),t._v(\" \"),a(\"td\",[t._v(\"跟踪对象的垃圾回收\")]),t._v(\" \"),a(\"td\",[t._v(\"垃圾回收后终止\")])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_13-redis哨兵如何实现通信-结点宕机如何处理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-redis哨兵如何实现通信-结点宕机如何处理\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"13.Redis哨兵如何实现通信，结点宕机如何处理\")])]),t._v(\" \"),a(\"p\",[t._v(\"心跳机制-通信（master或者slave宕机）\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_14-spring如何解决ioc时的循环依赖问题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_14-spring如何解决ioc时的循环依赖问题\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"14.Spring如何解决IOC时的循环依赖问题\")])]),t._v(\" \"),a(\"p\",[t._v(\"如果不考虑Spring，循环依赖并不是问题，因为对象之间相互依赖是很正常的事情。比如\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-ini extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-ini\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token key attr-name\"}},[t._v(\"A a\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token value attr-value\"}},[t._v(\"new A();\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token key attr-name\"}},[t._v(\"B b\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token value attr-value\"}},[t._v(\"new B();\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token key attr-name\"}},[t._v(\"a.b\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token value attr-value\"}},[t._v(\"b;\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token key attr-name\"}},[t._v(\"b.a\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token value attr-value\"}},[t._v(\"a;\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"这样，A,B就依赖上了。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Bean的生命周期\")])]),t._v(\" \"),a(\"p\",[t._v(\"这里不会对Bean的生命周期进行详细的描述，只描述一下大概的过程。\")]),t._v(\" \"),a(\"p\",[t._v(\"Bean的生命周期指的就是：在Spring中，Bean是如何生成的？\")]),t._v(\" \"),a(\"p\",[t._v(\"被Spring管理的对象叫做Bean。Bean的生成步骤如下：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"Spring扫描class得到BeanDefinition\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"根据得到的BeanDefinition去生成bean\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"首先根据class推断构造方法\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"根据推断出来的构造方法，反射，得到一个对象（暂时叫做原始对象）\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"填充原始对象中的属性（依赖注入）\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如果原始对象中的某个方法被AOP了，那么则需要根据原始对象生成一个代理对象（这个是AOP切面类的对象）\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"把最终生成的代理对象放入单例池（源码中叫做singletonObjects）中，下次getBean时就直接从单例池拿即可\")])])]),t._v(\" \"),a(\"p\",[t._v(\"可以看到，对于Spring中的Bean的生成过程，步骤还是很多的，并且不仅仅只有上面的7步，还有很多很多，比如Aware回调、初始化等等，这里不详细讨论。\")]),t._v(\" \"),a(\"p\",[t._v(\"可以发现，在Spring中，构造一个Bean，包括了new这个步骤（第4步构造方法反射）。\")]),t._v(\" \"),a(\"p\",[t._v(\"得到一个原始对象后，Spring需要给对象中的属性进行依赖注入，那么这个注入过程是怎样的？\")]),t._v(\" \"),a(\"p\",[t._v(\"比如上文说的A类，A类中存在一个B类的b属性，所以，当A类生成了一个原始对象之后，就会去给b属性去赋值，此时就会根据b属性的类型和属性名去BeanFactory中去获取B类所对应的单例bean。如果此时BeanFactory中存在B对应的Bean，那么直接拿来赋值给b属性；如果此时BeanFactory中不存在B对应的Bean，则需要生成一个B对应的Bean，然后赋值给b属性。\")]),t._v(\" \"),a(\"p\",[t._v(\"问题就出现在第二种情况，如果此时B类在BeanFactory中还没有生成对应的Bean，那么就需要去生成，就会经过B的Bean的生命周期。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么在创建B类的Bean的过程中，如果B类中存在一个A类的a属性，那么在创建B的Bean的过程中就需要A类对应的Bean，但是，触发B类Bean的创建的条件是A类Bean在创建过程中的依赖注入，所以这里就出现了循环依赖：\")]),t._v(\" \"),a(\"p\",[t._v(\"ABean创建--\\x3e依赖了B属性--\\x3e触发BBean创建---\\x3eB依赖了A属性---\\x3e需要ABean（但ABean还在创建过程中）\")]),t._v(\" \"),a(\"p\",[t._v(\"从而导致ABean创建不出来，BBean也创建不出来。\")]),t._v(\" \"),a(\"p\",[t._v(\"这是循环依赖的场景，但是上文说了，在Spring中，通过某些机制帮开发者解决了部分循环依赖的问题，这个机制就是\"),a(\"strong\",[t._v(\"三级缓存\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"三级缓存\")])]),t._v(\" \"),a(\"p\",[t._v(\"三级缓存是通用的叫法。\")]),t._v(\" \"),a(\"p\",[t._v(\"一级缓存为：singletonObjects\")]),t._v(\" \"),a(\"p\",[t._v(\"二级缓存为：earlySingletonObjects\")]),t._v(\" \"),a(\"p\",[t._v(\"三级缓存为：singletonFactories\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"先稍微解释一下这三个缓存的作用，后面详细分析：\")])]),t._v(\" \"),a(\"p\",[t._v(\"singletonObjects中缓存的是已经经历了完整生命周期的bean对象。\")]),t._v(\" \"),a(\"p\",[t._v(\"earlySingletonObjects比singletonObjects多了一个early，表示缓存的是早期的bean对象。早期是什么意思？表示Bean的生命周期还没走完就把这个Bean放入earlySingletonObjects。\")]),t._v(\" \"),a(\"p\",[t._v(\"singletonFactories中缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f31926946e894c078a6857aa7729edeb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"jj\"}})]),t._v(\" \"),a(\"p\",[t._v(\"A的Bean在创建过程中，在进行依赖注入之前，先把A的原始Bean放入缓存（提早暴露，只要放到缓存了，其他Bean需要时就可以从缓存中拿了），放入缓存后，再进行依赖注入，此时A的Bean依赖了B的Bean，如果B的Bean不存在，则需要创建B的Bean，而创建B的Bean的过程和A一样，也是先创建一个B的原始对象，然后把B的原始对象提早暴露出来放入缓存中，然后在对B的原始对象进行依赖注入A，此时能从缓存中拿到A的原始对象（\"),a(\"strong\",[t._v(\"虽然是A的原始对象，还不是最终的Bean\")]),t._v(\"），B的原始对象依赖注入完了之后，B的生命周期结束，那么A的生命周期也能结束。\")]),t._v(\" \"),a(\"p\",[t._v(\"因为整个过程中，都只有一个A原始对象，所以对于B而言，就算在属性注入时，注入的是A原始对象，也没有关系，因为A原始对象在后续的生命周期中在堆中没有发生变化。\")]),t._v(\" \"),a(\"p\",[t._v(\"上面是在A和B都没有AOP面向切面方法的切面类的情况下，由于AOP的切面类也需要生成Bean，所以只有一集缓存是不够的。\")]),t._v(\" \"),a(\"p\",[t._v(\"从上面这个分析过程中可以得出，只需要一个缓存就能解决循环依赖了，那么为什么Spring中还需要singletonFactories呢？\")]),t._v(\" \"),a(\"p\",[t._v(\"这是难点，基于上面的场景想一个问题：\"),a(\"strong\",[t._v(\"如果A的原始对象注入给B的属性之后，A的原始对象进行了AOP产生了一个代理对象，此时就会出现，对于A而言，它的Bean对象其实应该是AOP之后的代理对象，而B的a属性对应的并不是AOP之后的代理对象，这就产生了冲突。B依赖的A和最终的A不是同一个对象。\")])]),t._v(\" \"),a(\"p\",[t._v(\"AOP就是通过一个BeanPostProcessor来实现的，这个BeanPostProcessor就是AnnotationAwareAspectJAutoProxyCreator，它的父类是AbstractAutoProxyCreator，而在Spring中AOP利用的要么是JDK动态代理，要么CGLib的动态代理，所以如果给一个类中的某个方法设置了切面，那么这个类最终就需要生成一个代理对象。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65b4b3f947444579b57c1a7e79049293~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"s\"}})]),t._v(\" \"),a(\"p\",[t._v(\"左边文字：\")]),t._v(\" \"),a(\"p\",[t._v(\"这个ObjectFactory就是上文说的labmda表达式，中间有getEarlyBeanReference方法，注意存入singletonFactories时并不会执行lambda表达式，也就是不会执行getEarlyBeanReference方法\")]),t._v(\" \"),a(\"p\",[t._v(\"右边文字：\")]),t._v(\" \"),a(\"p\",[t._v(\"从singletonFactories根据beanName得到一个ObjectFactory，然后执行ObjectFactory，也就是执行getEarlyBeanReference方法，此时会得到一个A原始对象经过AOP之后的代理对象，然后把该代理对象放入earlySingletonObjects中，注意此时并没有把代理对象放入singletonObjects中，那什么时候放入到singletonObjects中呢？\")]),t._v(\" \"),a(\"p\",[t._v(\"这个时候得来理解一下earlySingletonObjects的作用，此时，我们只得到了A原始对象的代理对象，这个对象还不完整，因为A原始对象还没有进行属性填充，所以此时不能直接把A的代理对象放入singletonObjects中，所以只能把代理对象放入earlySingletonObjects，假设现在有其他对象依赖了A，那么则可以从earlySingletonObjects中得到A原始对象的代理对象了，并且是A的同一个代理对象。\")]),t._v(\" \"),a(\"p\",[t._v(\"当B创建完了之后，A继续进行生命周期，而A在完成属性注入后，会按照它本身的逻辑去进行AOP，而此时我们知道A原始对象已经经历过了AOP，所以对于A本身而言，不会再去进行AOP了，那么怎么判断一个对象是否经历过了AOP呢？会利用上文提到的earlyProxyReferences，在AbstractAutoProxyCreator的postProcessAfterInitialization方法中，会去判断当前beanName是否在earlyProxyReferences，如果在则表示已经提前进行过AOP了，无需再次进行AOP。\")]),t._v(\" \"),a(\"p\",[t._v(\"对于A而言，进行了AOP的判断后，以及BeanPostProcessor的执行之后，就需要把A对应的对象放入singletonObjects中了，但是我们知道，应该是要A的代理对象放入singletonObjects中，所以此时需要从earlySingletonObjects中得到代理对象，然后入singletonObjects中。\")]),t._v(\" \"),a(\"p\",[t._v(\"整个循环依赖解决完毕。\")]),t._v(\" \"),a(\"p\",[t._v(\"总结一下三级缓存：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"singletonObjects：缓存某个beanName对应的经过了完整生命周期的bean\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"earlySingletonObjects：缓存提前拿原始对象进行了AOP之后得到的代理对象，原始对象还没有进行属性注入和后续的BeanPostProcessor等生命周期\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"singletonFactories：缓存的是一个ObjectFactory，主要用来去生成原始对象进行了AOP之后得到的代理对象，在每个Bean的生成过程中，都会提前暴露一个工厂，这个工厂可能用到，也可能用不到，如果没有出现循环依赖依赖本bean，那么这个工厂无用，本bean按照自己的生命周期执行，执行完后直接把本bean放入singletonObjects中即可，如果出现了循环依赖依赖了本bean，则另外那个bean执行ObjectFactory提交得到一个AOP之后的代理对象(如果有AOP的话，如果无需AOP，则直接得到一个原始对象)。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"其实还要一个缓存，就是earlyProxyReferences，它用来记录某个原始对象是否进行过AOP了。\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_15-一般是怎么创建线程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_15-一般是怎么创建线程\"}},[t._v(\"#\")]),t._v(\" 15.一般是怎么创建线程?\")]),t._v(\" \"),a(\"p\",[t._v(\"1、继承 Thread 类\")]),t._v(\" \"),a(\"p\",[t._v(\"通过继承 Thread 类，并重写它的 run 方法，我们就可以创建一个线程。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"首先定义一个类来继承 Thread 类，重写 run 方法。\")]),t._v(\" \"),a(\"li\",[t._v(\"然后创建这个子类对象，并调用 start 方法启动线程。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://ask.qcloudimg.com/http-save/yehe-2219188/uaa1zy9cb5.png?imageView2/2/w/1200\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"2、实现 Runnable 接口\")])]),t._v(\" \"),a(\"p\",[t._v(\"通过实现 Runnable ，并实现 run 方法，也可以创建一个线程。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"首先定义一个类实现 Runnable 接口，并实现 run 方法。\")]),t._v(\" \"),a(\"li\",[t._v(\"然后创建 Runnable 实现类对象，并把它作为 target 传入 Thread 的构造函数中\")]),t._v(\" \"),a(\"li\",[t._v(\"最后调用 start 方法启动线程。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://ask.qcloudimg.com/http-save/yehe-2219188/qucp8pstk7.png?imageView2/2/w/1200\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"3、实现 Callable 接口，并结合 Future 实现\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"首先定义一个 Callable 的实现类，并实现 call 方法。call 方法是带返回值的。\")]),t._v(\" \"),a(\"li\",[t._v(\"然后通过 FutureTask 的构造方法，把这个 Callable 实现类传进去。\")]),t._v(\" \"),a(\"li\",[t._v(\"把 FutureTask 作为 Thread 类的 target ，创建 Thread 线程对象。\")]),t._v(\" \"),a(\"li\",[t._v(\"通过 FutureTask 的 get 方法获取线程的执行结果。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://ask.qcloudimg.com/http-save/yehe-2219188/zglut4qdvh.png?imageView2/2/w/1200\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"4、通过线程池创建线程\")])]),t._v(\" \"),a(\"p\",[t._v(\"此处用 JDK 自带的 Executors 来创建线程池对象。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"首先，定一个 Runnable 的实现类，重写 run 方法。\")]),t._v(\" \"),a(\"li\",[t._v(\"然后创建一个拥有固定线程数的线程池。\")]),t._v(\" \"),a(\"li\",[t._v(\"最后通过 ExecutorService 对象的 execute 方法传入线程对象。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://ask.qcloudimg.com/http-save/yehe-2219188/grx8pgz81h.png?imageView2/2/w/1200\",alt:\"img\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_16-线程池类型\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_16-线程池类型\"}},[t._v(\"#\")]),t._v(\" 16.线程池类型\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"1、newCachedThreadPool\")])]),t._v(\" \"),a(\"p\",[t._v(\"创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\")]),t._v(\" \"),a(\"p\",[t._v(\"这种类型的线程池特点是：\")]),t._v(\" \"),a(\"p\",[t._v(\"工作线程的创建数量几乎没有限制(其实也有限制的,数目为Interger. MAX_VALUE), 这样可灵活的往线程池中添加线程。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间(默认为1分钟)，则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。\")]),t._v(\" \"),a(\"p\",[t._v(\"在使用CachedThreadPool时，一定要注意控制任务的数量，否则，由于大量线程同时运行，很有会造成系统OOM。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"2、newFixedThreadPool\")])]),t._v(\" \"),a(\"p\",[t._v(\"创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。\")]),t._v(\" \"),a(\"p\",[t._v(\"FixedThreadPool是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但是，在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"3、newSingleThreadExecutor\")])]),t._v(\" \"),a(\"p\",[t._v(\"创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"4、newScheduleThreadPool\")])]),t._v(\" \"),a(\"p\",[t._v(\"创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"5、newSingleThreadScheduledExecutor\")])]),t._v(\" \"),a(\"p\",[t._v(\"创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。线程池中最多执行1个线程，之后提交的线程活动将会排在队列中以此执行并且可定时或者延迟执行线程活动。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_17-对象的生命周期\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_17-对象的生命周期\"}},[t._v(\"#\")]),t._v(\" 17.对象的生命周期\")]),t._v(\" \"),a(\"p\",[t._v(\"在JVM运行空间中，对象的整个生命周期大致可以分为7个阶段：\"),a(\"strong\",[t._v(\"创建阶段（Creation）、应用阶段（Using）、不可视阶段（Invisible）、不可到达阶段（Unreachable）、可收集阶段（Collected）、终结阶段（Finalized）与释放阶段（Free）\")]),t._v(\"。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_18-线程池中后备队列满了的任务拒绝策略\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_18-线程池中后备队列满了的任务拒绝策略\"}},[t._v(\"#\")]),t._v(\" 18.线程池中后备队列满了的任务拒绝策略\")]),t._v(\" \"),a(\"p\",[t._v(\"关于线程池的任务拒绝策略，我们要理解并记住，有如下的四种：\")]),t._v(\" \"),a(\"p\",[t._v(\"1、直接丢弃（DiscardPolicy）\")]),t._v(\" \"),a(\"p\",[t._v(\"2、丢弃队列中最老的任务(DiscardOldestPolicy)。\")]),t._v(\" \"),a(\"p\",[t._v(\"3、抛异常\")]),t._v(\" \"),a(\"p\",[t._v(\"4、将任务分给调用线程来执行。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_19-redis如何实现分布式锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_19-redis如何实现分布式锁\"}},[t._v(\"#\")]),t._v(\" 19.redis如何实现分布式锁\")]),t._v(\" \"),a(\"p\",[t._v(\"我们在系统中修改已有数据时，需要先读取，然后进行修改保存，此时很容易遇到并发问题。由于修改和保存不是原子操作，在并发场景下，部分对数据的操作可能会丢失。在单服务器系统我们常用本地锁来避免并发带来的问题，然而，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。\")]),t._v(\" \"),a(\"p\",[t._v(\"Redis 锁主要利用 Redis 的 setnx 命令。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"加锁命令：SETNX key value，当键不存在时，对键进行设置操作并返回成功，否则返回失败。KEY 是锁的唯一标识，一般按业务来决定命名。\")]),t._v(\" \"),a(\"li\",[t._v(\"解锁命令：DEL key，通过删除键值对释放锁，以便其他线程可以通过 SETNX 命令来获取锁。\")]),t._v(\" \"),a(\"li\",[t._v(\"锁超时：EXPIRE key timeout, 设置 key 的超时时间，以保证即使锁没有被显式释放，锁也可以在一定时间后自动释放，避免资源被永远锁住。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_20-autowired和-resource区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_20-autowired和-resource区别\"}},[t._v(\"#\")]),t._v(\" 20.@Autowired和@Resource区别\")]),t._v(\" \"),a(\"p\",[t._v(\"https://juejin.cn/post/7022507865701089317\")]),t._v(\" \"),a(\"p\",[t._v(\"共同点：@Resource和@Autowired都可以作为注入属性的修饰，在接口仅有单一实现类时，两个注解的修饰效果相同，可以互相替换，不影响使用。\")]),t._v(\" \"),a(\"p\",[t._v(\"不同点：\")]),t._v(\" \"),a(\"p\",[t._v(\"1、@Resource是JDK原生的注解，@Autowired是Spring2.5 引入的注解\")]),t._v(\" \"),a(\"p\",[t._v(\"2、@Resource有两个属性name和type。Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。\")]),t._v(\" \"),a(\"p\",[t._v(\"@Autowired只根据type进行注入，不会去匹配name。如果涉及到type无法辨别注入对象时，那需要依赖@Qualifier或@Primary注解一起来修饰。\")]),t._v(\" \"),a(\"p\",[t._v(\"总结\")]),t._v(\" \"),a(\"p\",[t._v(\"@Autowired功能虽说非常强大，但是也有些不足之处。比如它跟Spring强耦合了，如果换成了其他框架，功能就会失效。而@Resource是JSR-250提供的，它是Java标准，绝大部分框架都支持。\")]),t._v(\" \"),a(\"p\",[t._v(\"除此之外，有些场景使用@Autowired无法满足的要求，改成@Resource却能解决问题。\")]),t._v(\" \"),a(\"p\",[t._v(\"1、@Autowired默认按byType自动装配，而@Resource默认byName自动装配。\")]),t._v(\" \"),a(\"p\",[t._v(\"2、@Autowired只包含一个参数：required，表示是否开启自动准入，默认是true。而@Resource包含七个参数，其中最重要的两个参数是：name 和 type。\")]),t._v(\" \"),a(\"p\",[t._v(\"3、@Autowired如果要使用byName，需要使用@Qualifier一起配合。而@Resource如果指定了name，则用byName自动装配，如果指定了type，则用byType自动装配。\")]),t._v(\" \"),a(\"p\",[t._v(\"4、@Autowired能够用在：构造器、方法、参数、成员变量和注解上，而@Resource能用在：类、成员变量和方法上。\")]),t._v(\" \"),a(\"p\",[t._v(\"5、@Autowired是Spring定义的注解，而@Resource是JSR-250定义的注解。\")]),t._v(\" \"),a(\"p\",[t._v(\"6、二者装配顺序不同\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"@Autowired\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8fabb988e2d4fcb87e592cd8846be68~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"@Resource\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e987c1684435481bbaf3b270dfdbaf59~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_21-spring-注解\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_21-spring-注解\"}},[t._v(\"#\")]),t._v(\" 21.Spring 注解\")]),t._v(\" \"),a(\"p\",[t._v(\"@Repository和@Controller、@Service、@\"),a(\"a\",{attrs:{href:\"https://so.csdn.net/so/search?q=Component&spm=1001.2101.3001.7020\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Component\"),a(\"OutboundLink\")],1),t._v(\"的作用差不多，都是把对象交给spring管理。@Repository用在持久层的接口上，这个注解是将接口的一个实现类交给spring管理。\")]),t._v(\" \"),a(\"p\",[t._v(\"为什么有时候我们不用@Repository来注解接口,我们照样可以注入到这个接口的实现类呢?\\n1、spring配置文件中配置了MapperScannerConfigurer这个bean，它会扫描持久层接口创建实现类并交给spring管理。\")]),t._v(\" \"),a(\"p\",[t._v(\"2、接口上使用了@Mapper注解或者springboot中主类上使用了@MapperScan注解，和MapperScannerConfigurer作用一样。\")]),t._v(\" \"),a(\"p\",[t._v(\"注：不使用@Repository注解，idea会报警告，提示找不到这个bean，直接忽略即可。\")]),t._v(\" \"),a(\"p\",[t._v(\"@Repository的作用：\\n这是因为该注解的作用不只是将类识别为Bean，同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。 Spring本身提供了一个丰富的并且是与具体的数据访问技术无关的数据访问异常结构，用于封装不同的持久层框架抛出的异常，使得异常独立于底层的框架。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_22-spring注解分类\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_22-spring注解分类\"}},[t._v(\"#\")]),t._v(\" 22.Spring注解分类\")]),t._v(\" \"),a(\"p\",[t._v(\"1、Spring注解分类\\n从广义上Spring注解可以分为两类：\")]),t._v(\" \"),a(\"p\",[t._v(\"一类注解是用于注册Bean\")]),t._v(\" \"),a(\"p\",[t._v(\"假如IOC容器就是一间空屋子，首先这间空屋子啥都没有，我们要吃大餐，我们就要从外部搬运食材和餐具进来。这里把某一样食材或者某一样餐具搬进空屋子的操作就相当于每个注册Bean的注解作用类似。注册Bean的注解作用就是往IOC容器中放（注册）东西！\\n用于注册Bean的注解： 比如@Component , @Repository , @ Controller , @Service , @Configration这些注解就是用于注册Bean，放进IOC容器中，一来交给spring管理方便解耦，二来还可以进行二次使用，啥是二次使用呢？这里的二次使用可以理解为：在你开始从外部搬运食材和餐具进空屋子的时候，一次性搬运了猪肉、羊肉、铁勺、筷子四样东西，这个时候你要开始吃大餐，首先你吃东西的时候肯定要用筷子或者铁勺，别说你手抓，只要你需要，你就会去找，这个时候发现你已经把筷子或者铁勺放进了屋子，你就不用再去外部拿筷子进屋子了，意思就是IOC容器中已经存在，就可以只要拿去用，而不必再去注册！而拿屋子里已有的东西的操作就是下面要讲的用于使用Bean的注解！\")]),t._v(\" \"),a(\"p\",[t._v(\"一类注解是用于使用Bean\")]),t._v(\" \"),a(\"p\",[t._v(\"用于使用Bean的注解：比如@Autowired , @Resource注解，这些注解就是把屋子里的东西自己拿来用，如果你要拿，前提一定是屋子（IOC）里有的，不然就会报错，比如你要做一道牛肉拼盘需要五头牛做原材料才行，你现在锅里只有四头牛，这个时候你知道，自己往屋子里搬过五头牛，这个时候就直接把屋子里的那头牛直接放进锅里，完成牛肉拼盘的组装。是的这些注解就是需要啥想要啥，只要容器中有就往容器中拿！而这些注解又有各自的区别，比如@Autowired用在筷子上，这筷子你可能只想用木质的，或许只想用铁质的，@Autowired作用在什么属性的筷子就那什么筷子，而@Resource如果用在安格斯牛肉上面，就指定要名字就是安格斯牛肉的牛肉。\\nSpring的@Bean注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。 产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中。@Bean明确地指示了一种方法，什么方法呢？产生一个bean的方法，并且交给Spring容器管理；从这我们就明白了为啥@Bean是放在方法的注释上了，因为它很明确地告诉被注释的方法，你给我产生一个Bean，然后交给Spring容器，剩下的你就别管了。记住，@Bean就放在方法上，就是让方法去产生一个Bean，然后交给Spring容器。\")]),t._v(\" \"),a(\"p\",[t._v(\"如下就能让accountDao方法产生一个AccountDao 对象，然后这个AccountDao 对象交给Spring管理\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"A\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Bean\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AccountDao\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"accountDao\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AccountDao\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"实际上，@Bean注解和xml配置中的bean标签的作用是一样的。\")]),t._v(\" \"),a(\"p\",[t._v(\"为什么要有@Bean注解？\\n不知道大家有没有想过，用于注册Bean的注解的有那么多个，为何还要出现@Bean注解？\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"原因很简单：类似@Component , @Repository , @ Controller , @Service 这些注册Bean的注解存在局限性，只能局限作用于自己编写的类，如果是一个jar包第三方库要加入IOC容器的话，这些注解就手无缚鸡之力了，是的，@Bean注解就可以做到这一点！当然除了@Bean注解能做到还有@Import也能把第三方库中的类实例交给spring管理，而且@Import更加方便快捷，只是@Import注解并不在本篇范围内，这里就不再概述。\")])]),t._v(\" \"),a(\"p\",[t._v(\"使用@Bean注解的另一个好处就是能够动态获取一个Bean对象，能够根据环境不同得到不同的Bean对象。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_23-repository和-controller、-service、-component\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_23-repository和-controller、-service、-component\"}},[t._v(\"#\")]),t._v(\" 23.@Repository和@Controller、@Service、@Component\")]),t._v(\" \"),a(\"p\",[t._v(\"@Component\")]),t._v(\" \"),a(\"p\",[t._v(\"@Component注解表明一个类会作为组件类，并告知Spring要为这个类创建bean。\")]),t._v(\" \"),a(\"p\",[t._v(\"@Component有几个衍生注解，按照三处架构分层\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"dao[ @Repository ]\")]),t._v(\" \"),a(\"li\",[t._v(\"service[ @service ]\")]),t._v(\" \"),a(\"li\",[t._v(\"controller[ @Controller]\")])]),t._v(\" \"),a(\"p\",[t._v(\"因此，当你的一个类被\"),a(\"code\",[t._v(\"@Component\")]),t._v(\"所注解，那么就意味着同样可以用\"),a(\"code\",[t._v(\"@Repository\")]),t._v(\", \"),a(\"code\",[t._v(\"@Service\")]),t._v(\", \"),a(\"code\",[t._v(\"@Controller\")]),t._v(\"来替代它，同时这些注解会具备有更多的功能，而且功能各异。\")]),t._v(\" \"),a(\"p\",[t._v(\"@Controller控制层\")]),t._v(\" \"),a(\"p\",[t._v(\"用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller对象，分发处理器会扫描使用该注解的类的方法，并检测该方法是否使用了@RequestMapping注解。@Controller只是定义了一个控制器类，而使用@RequestMapping注解的方法才是处理请求的处理器。\")]),t._v(\" \"),a(\"p\",[t._v(\"@RequestMapping\")]),t._v(\" \"),a(\"p\",[t._v(\"它可以注解类也可以注解方法，注解类时标注请求的路径，标注方法时表示将特定的URL映射到指定的方法。\")]),t._v(\" \"),a(\"p\",[t._v(\"@Service业务逻辑层\")]),t._v(\" \"),a(\"p\",[t._v(\"应用于业务层，用于标注业务层组件,表示定义一个bean，自动根据bean的类名实例化一个首写字母为小写的bean。\")]),t._v(\" \"),a(\"p\",[t._v(\"@Repository持久层\")]),t._v(\" \"),a(\"p\",[t._v(\"用于标注数据访问组件，即DAO组件，表示将Dao类声明为bean\")]),t._v(\" \"),a(\"p\",[t._v(\"@Repository 只能标注在 DAO 类，因为该注解的作用不只是将类识别为Bean，同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"总结\")])]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"@Component\")]),t._v(\", \"),a(\"code\",[t._v(\"@Service\")]),t._v(\", \"),a(\"code\",[t._v(\"@Controller\")]),t._v(\", \"),a(\"code\",[t._v(\"@Repository\")]),t._v(\"是spring注解，注解后可以被spring框架所扫描并注入到spring容器来进行管理。虽然你可以全部使用\"),a(\"code\",[t._v(\"@Component\")]),t._v(\"注解，但使用其他注解，则你的类更适合于通过工具进行处理或与其他方面相关联。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"@Component\")]),t._v(\"是通用注解，其他三个注解是这个注解的衍生注解，并且具有了特定的功能。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"@Controller\")]),t._v(\"层是spring-mvc的注解，用于标注控制层组件，并查看是否处理请求转发，重定向。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"@Service\")]),t._v(\"层是业务逻辑层注解，这个注解只是标注该类处于业务逻辑层。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"@Repository\")]),t._v(\"注解在持久层中，标注 DAO 类，具有将数据库操作抛出的数据访问异常自动转换(封装)为spring的持久层异常的功能。\")])]),t._v(\" \"),a(\"p\",[t._v(\"用这些注解对应用进行分层之后，就能将请求处理，义务逻辑处理，数据库操作处理分离出来，为代码解耦，也方便了以后项目的维护和开发。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_24-spring中-component和-bean的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_24-spring中-component和-bean的区别\"}},[t._v(\"#\")]),t._v(\" 24.Spring中@Component和@Bean的区别\")]),t._v(\" \"),a(\"p\",[t._v(\"1、@Component注解表明一个类会作为组件类，并告知Spring要为这个类创建bean。\")]),t._v(\" \"),a(\"p\",[t._v(\"2、@Bean注解告诉Spring这个方法将会返回一个对象，这个对象要注册为Spring应用上下文中的bean。通常方法体中包含了最终产生bean实例的逻辑。\")]),t._v(\" \"),a(\"p\",[t._v(\"两者的目的是一样的，都是注册bean到Spring容器中。\")]),t._v(\" \"),a(\"p\",[t._v(\"区别：\")]),t._v(\" \"),a(\"p\",[t._v(\"@Component（@Controller、@Service、@Repository）通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中。\")]),t._v(\" \"),a(\"p\",[t._v(\"而@Bean注解通常是我们在标有该注解的方法中定义产生这个bean的逻辑。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"@Component 作用于类，@Bean作用于方法。\")])]),t._v(\" \"),a(\"p\",[t._v(\"总结：\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"@Component和@Bean都是用来注册Bean并装配到Spring容器中，但是Bean比Component的自定义性更强。可以实现一些Component实现不了的自定义加载类。\")])]),t._v(\" \"),a(\"p\",[t._v(\"@Bean示例：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Configuration\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AppConfig\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Bean\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TransferService\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"transferService\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TransferServiceImpl\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"h3\",{attrs:{id:\"_25-spring-factories-springboot如何自动注入-装配-maven引入的第三方库jar\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_25-spring-factories-springboot如何自动注入-装配-maven引入的第三方库jar\"}},[t._v(\"#\")]),t._v(\" 25.Spring.factories(SpringBoot如何自动注入(装配)Maven引入的第三方库jar)\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"理解自动装配的核心原理\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"能手写一个EnableAutoConfiguration注解\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"理解SPI机制的原理\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"第1章 集成Redis\")]),t._v(\"\\n1.引入依赖包\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-markup extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-markup\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"dependency\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"groupId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"org.springframework.boot\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"groupId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"artifactId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"spring-boot-starter-data-redis\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"artifactId\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"dependency\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"2.配置参数\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-markup extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-markup\"}},[a(\"code\",[t._v(\"spring.redis.host=192.168.8.74\\nspring.redis.password=123456\\nspring.redis.database=0\\n\")])])]),a(\"p\",[t._v(\"3.controller\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"package\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"com\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"example\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springbootvipjtdemo\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"redisdemo\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token import\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"beans\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"factory\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"annotation\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Autowired\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token import\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"data\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"redis\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"core\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RedisTemplate\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token import\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"web\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"bind\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"annotation\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"GetMapping\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token import\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"web\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"bind\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"annotation\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RequestMapping\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token import\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"web\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"bind\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"annotation\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RequestParam\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"import\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token import\"}},[a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"org\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"springframework\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"web\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"bind\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"annotation\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")])]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RestController\")])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RestController\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RequestMapping\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"/redis\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RedisController\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Autowired\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RedisTemplate\")]),t._v(\" redisTemplate\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@GetMapping\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"/save\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"save\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RequestParam\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" key\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RequestParam\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" value\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        redisTemplate\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"opsForValue\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"set\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"key\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"value\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"添加成功\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@GetMapping\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"/get\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@RequestParam\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" key\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" value \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"redisTemplate\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"opsForValue\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"get\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"key\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" value\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"通过上面的案例，我们就能看出来，RedisTemplate这个类的bean对象，我们并没有通过XML的方式也没有通过注解的方式注入到IoC容器中去，但是我们就是可以通过@Autowired注解自动从容器里面拿到相应的Bean对象，再去进行属性注入。\")]),t._v(\" \"),a(\"p\",[t._v(\"最关键的要属@Import(AutoConfigurationImportSelector.class)，借助AutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件(\"),a(\"strong\",[t._v(\"spring.factories\")]),t._v(\")的bean定义（如Java Config@Configuration配置）都加载到当前SpringBoot创建并使用的IoC容器。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"http://8.130.25.175:8080/img/image-20230717152629496.png\",alt:\"image-20230717152629496\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"SpringFactoriesLoader\")]),t._v(\"\\n其实SpringFactoriesLoader的底层原理就是借鉴于JDK的SPI机制，所以，在将SpringFactoriesLoader之前，我们现在发散一下SPI机制。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"SPI\")]),t._v(\"\\nSPI ，全称为 Service Provider Interface，是一种服务发现机制。它通过在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。这一机制为很多框架扩展提供了可能，比如在Dubbo、JDBC中都使用到了SPI机制。我们先通过一个很简单的例子来看下它是怎么用的。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_26-springboot的自动装配原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_26-springboot的自动装配原理\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"26.SpringBoot的自动装配原理\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"SpringBootApplication注解是入口\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"@SpringBootConfiguration：继承了Configuration，表示当前是注解类\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"@EnableAutoConfiguration： 开启springboot的注解功能，springboot的四大神器之一，其借助@import的帮助\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"@ComponentScan(excludeFilters = { // 扫描路径设置（具体使用待确认）\\nComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义；并将这些bean定义加载到IoC容器中.\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"我们可以通过\"),a(\"strong\",[t._v(\"basePackages\")]),t._v(\"等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。\")]),t._v(\" \"),a(\"p\",[t._v(\"注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages\")])])])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"SpringFactoriesLoader\")])]),t._v(\" \"),a(\"p\",[t._v(\"借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！\")]),t._v(\" \"),a(\"p\",[t._v(\"SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置,加载工厂类。\")]),t._v(\" \"),a(\"p\",[t._v(\"SpringFactoriesLoader为Spring工厂加载器，该对象提供了loadFactoryNames方法，入参为factoryClass和classLoader即需要传入工厂类名称和对应的类加载器，方法会根据指定的classLoader，加载该类加器搜索路径下的指定文件，即spring.factories文件；\")]),t._v(\" \"),a(\"p\",[t._v(\"传入的工厂类为接口，而文件中对应的类则是接口的实现类，或最终作为实现类。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-markup extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-markup\"}},[a(\"code\",[t._v(\"public abstract class SpringFactoriesLoader {\\n//...\\n　　public static \"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"T\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" List\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"T\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" loadFactories(Class\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"T\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" factoryClass, ClassLoader classLoader) {\\n　　　　...\\n　　}\\n　　public static List\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" loadFactoryNames(Class\"),a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"?\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" factoryClass, ClassLoader classLoader) {\\n　　　　....\\n　　}\\n}1.2.3.4.5.6.7.8.9.\\n\")])])]),a(\"p\",[t._v(\"复制\")]),t._v(\" \"),a(\"p\",[t._v(\"配合@EnableAutoConfiguration使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration的完整类名\\norg.springframework.boot.autoconfigure.EnableAutoConfiguration作为查找的Key,获取对应的一组@Configuration类!(https://dl-harmonyos.51cto.com/images/202207/036d3b788cb7864aaf5532dc0458db47c4c517.jpg)上图就是从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。\")]),t._v(\" \"),a(\"p\",[t._v(\"（重点）所以，@EnableAutoConfiguration自动配置的魔法其实就变成了：\")]),t._v(\" \"),a(\"p\",[t._v(\"从classpath中搜寻所有的META-INF/spring.factories配置文件，并将其中\\norg.springframework.boot.autoconfigure.EnableAutoConfiguration对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"http://8.130.25.175:8080/img/image-20230717153236810.png\",alt:\"image-20230717153236810\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_27-单点登录\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_27-单点登录\"}},[t._v(\"#\")]),t._v(\" 27.单点登录\")]),t._v(\" \"),a(\"p\",[t._v(\"单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一\")]),t._v(\" \"),a(\"p\",[t._v(\"SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统\")]),t._v(\" \"),a(\"p\",[t._v(\"SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过\"),a(\"code\",[t._v(\"passport\")]),t._v(\"，子系统本身将不参与登录操作\")]),t._v(\" \"),a(\"p\",[t._v(\"当一个系统成功登录以后，\"),a(\"code\",[t._v(\"passport\")]),t._v(\"将会颁发一个令牌给各个子系统，子系统可以拿着令牌会获取各自的受保护资源，为了减少频繁认证，各个子系统在被\"),a(\"code\",[t._v(\"passport\")]),t._v(\"授权以后，会建立一个局部会话，在一定时间内可以无需再次向\"),a(\"code\",[t._v(\"passport\")]),t._v(\"发起认证\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://camo.githubusercontent.com/e8a925d41d93b9bc35b77a9ce5a09740e42da226c3ca283e48fa127bf432fd80/68747470733a2f2f7374617469632e7675652d6a732e636f6d2f32623962306537302d386334622d313165622d383566362d3666616337376330633962332e706e67\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"上图有四个系统，分别是\"),a(\"code\",[t._v(\"Application1\")]),t._v(\"、\"),a(\"code\",[t._v(\"Application2\")]),t._v(\"、\"),a(\"code\",[t._v(\"Application3\")]),t._v(\"、和\"),a(\"code\",[t._v(\"SSO\")]),t._v(\"，当\"),a(\"code\",[t._v(\"Application1\")]),t._v(\"、\"),a(\"code\",[t._v(\"Application2\")]),t._v(\"、\"),a(\"code\",[t._v(\"Application3\")]),t._v(\"需要登录时，将跳到\"),a(\"code\",[t._v(\"SSO\")]),t._v(\"系统，\"),a(\"code\",[t._v(\"SSO\")]),t._v(\"系统完成登录，其他的应用系统也就随之登录了\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"如何实现单点登录：\")])]),t._v(\" \"),a(\"p\",[t._v(\"方式1:\")]),t._v(\" \"),a(\"p\",[t._v(\"我们可以部署一个认证中心，用于专门处理登录请求的独立的 \"),a(\"code\",[t._v(\"Web\")]),t._v(\"服务\")]),t._v(\" \"),a(\"p\",[t._v(\"用户统一在认证中心进行登录，登录成功后，认证中心记录用户的登录状态，并将 \"),a(\"code\",[t._v(\"token\")]),t._v(\" 写入 \"),a(\"code\",[t._v(\"Cookie\")]),t._v(\"（注意这个 \"),a(\"code\",[t._v(\"Cookie\")]),t._v(\"是认证中心的，应用系统是访问不到的）\")]),t._v(\" \"),a(\"p\",[t._v(\"应用系统检查当前请求有没有 \"),a(\"code\",[t._v(\"Token\")]),t._v(\"，如果没有，说明用户在当前系统中尚未登录，那么就将页面跳转至认证中心\")]),t._v(\" \"),a(\"p\",[t._v(\"由于这个操作会将认证中心的 \"),a(\"code\",[t._v(\"Cookie\")]),t._v(\" 自动带过去，因此，认证中心能够根据 \"),a(\"code\",[t._v(\"Cookie\")]),t._v(\" 知道用户是否已经登录过了\")]),t._v(\" \"),a(\"p\",[t._v(\"如果认证中心发现用户尚未登录，则返回登录页面，等待用户登录\")]),t._v(\" \"),a(\"p\",[t._v(\"如果发现用户已经登录过了，就不会让用户再次登录了，而是会跳转回目标 \"),a(\"code\",[t._v(\"URL\")]),t._v(\"，并在跳转前生成一个 \"),a(\"code\",[t._v(\"Token\")]),t._v(\"，拼接在目标\"),a(\"code\",[t._v(\"URL\")]),t._v(\" 的后面，回传给目标应用系统\")]),t._v(\" \"),a(\"p\",[t._v(\"应用系统拿到 \"),a(\"code\",[t._v(\"Token\")]),t._v(\"之后，还需要向认证中心确认下 \"),a(\"code\",[t._v(\"Token\")]),t._v(\" 的合法性，防止用户伪造。确认无误后，应用系统记录用户的登录状态，并将 \"),a(\"code\",[t._v(\"Token\")]),t._v(\"写入\"),a(\"code\",[t._v(\"Cookie\")]),t._v(\"，然后给本次访问放行。（注意这个 \"),a(\"code\",[t._v(\"Cookie\")]),t._v(\" 是当前应用系统的）当用户再次访问当前应用系统时，就会自动带上这个 \"),a(\"code\",[t._v(\"Token\")]),t._v(\"，应用系统验证 Token 发现用户已登录，于是就不会有认证中心什么事了\")]),t._v(\" \"),a(\"p\",[t._v(\"此种实现方式相对复杂，支持跨域，扩展性好，是单点登录的标准做法\")]),t._v(\" \"),a(\"p\",[t._v(\"方式2:\")]),t._v(\" \"),a(\"p\",[t._v(\"可以选择将 \"),a(\"code\",[t._v(\"Session ID\")]),t._v(\" （或 \"),a(\"code\",[t._v(\"Token\")]),t._v(\" ）保存到浏览器的 \"),a(\"code\",[t._v(\"LocalStorage\")]),t._v(\" 中，让前端在每次向后端发送请求时，主动将\"),a(\"code\",[t._v(\"LocalStorage\")]),t._v(\"的数据传递给服务端\")]),t._v(\" \"),a(\"p\",[t._v(\"这些都是由前端来控制的，后端需要做的仅仅是在用户登录成功后，将 \"),a(\"code\",[t._v(\"Session ID\")]),t._v(\"（或 \"),a(\"code\",[t._v(\"Token\")]),t._v(\"）放在响应体中传递给前端\")]),t._v(\" \"),a(\"p\",[t._v(\"单点登录完全可以在前端实现。前端拿到 \"),a(\"code\",[t._v(\"Session ID\")]),t._v(\"（或 \"),a(\"code\",[t._v(\"Token\")]),t._v(\" ）后，除了将它写入自己的 \"),a(\"code\",[t._v(\"LocalStorage\")]),t._v(\" 中之外，还可以通过特殊手段将它写入多个其他域下的 \"),a(\"code\",[t._v(\"LocalStorage\")]),t._v(\" 中\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_28-零拷贝\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_28-零拷贝\"}},[t._v(\"#\")]),t._v(\" 28.零拷贝\")]),t._v(\" \"),a(\"p\",[t._v(\"https://juejin.cn/post/6995519558475841550\")]),t._v(\" \"),a(\"p\",[t._v(\"零拷贝（Zero-Copy）是一种 \"),a(\"code\",[t._v(\"I/O\")]),t._v(\" 操作优化技术，可以快速高效地将数据从文件系统移动到网络接口，而不需要将其从内核空间复制到用户空间。其在 \"),a(\"code\",[t._v(\"FTP\")]),t._v(\" 或者 \"),a(\"code\",[t._v(\"HTTP\")]),t._v(\" 等协议中可以显著地提升性能。但是需要注意的是，并不是所有的操作系统都支持这一特性，目前只有在使用 \"),a(\"code\",[t._v(\"NIO\")]),t._v(\" 和 \"),a(\"code\",[t._v(\"Epoll\")]),t._v(\" 传输时才可使用该特性。\")]),t._v(\" \"),a(\"p\",[t._v(\"需要注意，它不能用于实现了数据加密或者压缩的文件系统上，只有传输文件的原始内容。这类原始内容也包括加密了的文件内容。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先，期间共\"),a(\"strong\",[t._v(\"发生了 4 次用户态与内核态的上下文切换\")]),t._v(\"，因为发生了两次系统调用，一次是 \"),a(\"code\",[t._v(\"read()\")]),t._v(\" ，一次是 \"),a(\"code\",[t._v(\"write()\")]),t._v(\"，每次系统调用都得先从用户态切换到内核态，等内核完成任务后，再从内核态切换回用户态。\")]),t._v(\" \"),a(\"p\",[t._v(\"上下文切换到成本并不小，一次切换需要耗时几十纳秒到几微秒，虽然时间看上去很短，但是在高并发的场景下，这类时间容易被累积和放大，从而影响系统的性能。\")]),t._v(\" \"),a(\"p\",[t._v(\"其次，还\"),a(\"strong\",[t._v(\"发生了 4 次数据拷贝\")]),t._v(\"，其中两次是 DMA 的拷贝，另外两次则是通过 CPU 拷贝的，下面说一下这个过程：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"第一次拷贝\")]),t._v(\"，把磁盘上的数据拷贝到操作系统内核的缓冲区里，这个拷贝的过程是通过 DMA 搬运的。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"第二次拷贝\")]),t._v(\"，把内核缓冲区的数据拷贝到用户的缓冲区里，于是我们应用程序就可以使用这部分数据了，这个拷贝到过程是由 CPU 完成的。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"第三次拷贝\")]),t._v(\"，把刚才拷贝到用户的缓冲区里的数据，再拷贝到内核的 socket 的缓冲区里，这个过程依然还是由 CPU 搬运的。\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"第四次拷贝\")]),t._v(\"，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程又是由 DMA 搬运的。\")])]),t._v(\" \"),a(\"p\",[t._v(\"这种简单又传统的文件传输方式，存在冗余的上文切换和数据拷贝，在高并发系统里是非常糟糕的，多了很多不必要的开销，会严重影响系统性能。\")]),t._v(\" \"),a(\"p\",[t._v(\"无论是传统的 I/O 方式，还是引入了零拷贝之后，2 次 \"),a(\"code\",[t._v(\"DMA copy\")]),t._v(\"是都少不了的。因为两次 DMA 都是依赖硬件完成的。所以，所谓的零拷贝，都是为了减少 CPU copy 及减少了上下文的切换。\")]),t._v(\" \"),a(\"p\",[t._v(\"三个层次的文件拷贝优化：\")]),t._v(\" \"),a(\"p\",[t._v(\"零拷贝技术原理\")]),t._v(\" \"),a(\"p\",[t._v(\"零拷贝主要是用来解决操作系统在处理 I/O 操作时，频繁复制数据的问题。关于零拷贝主要技术有 \"),a(\"code\",[t._v(\"mmap+write\")]),t._v(\"、\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"和\"),a(\"code\",[t._v(\"splice\")]),t._v(\"等几种方式。\")]),t._v(\" \"),a(\"p\",[t._v(\"虚拟内存\")]),t._v(\" \"),a(\"p\",[t._v(\"在了解零拷贝技术之前，先了解虚拟内存的概念。\")]),t._v(\" \"),a(\"p\",[t._v(\"所有现代操作系统都使用虚拟内存，使用虚拟地址取代物理地址，主要有以下几点好处：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"多个虚拟内存可以指向同一个物理地址。\")]),t._v(\" \"),a(\"li\",[t._v(\"虚拟内存空间可以远远大于物理内存空间。\")])]),t._v(\" \"),a(\"p\",[t._v(\"利用上述的第一条特性可以优化，可以把内核空间和用户空间的虚拟地址映射到同一个物理地址，这样在 I/O 操作时就不需要来回复制了。\")]),t._v(\" \"),a(\"p\",[t._v(\"如下图展示了虚拟内存的原理。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f93635b183ef49828843c0f50518449a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"image-20210812181924274\"}})]),t._v(\" \"),a(\"p\",[t._v(\"mmap/write 方式\")]),t._v(\" \"),a(\"p\",[t._v(\"使用\"),a(\"code\",[t._v(\"mmap/write\")]),t._v(\"方式替换原来的传统I/O方式，就是利用了虚拟内存的特性。下图展示了\"),a(\"code\",[t._v(\"mmap/write\")]),t._v(\"原理：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3747aca11884a1a85708c0163c79a99~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"image-20210812201839908\"}})]),t._v(\" \"),a(\"p\",[t._v(\"整个流程的核心区别就是，把数据读取到内核缓冲区后，应用程序进行写入操作时，直接把内核的\"),a(\"code\",[t._v(\"Read Buffer\")]),t._v(\"的数据复制到\"),a(\"code\",[t._v(\"Socket Buffer\")]),t._v(\"以便写入，这次内核之间的复制也是需要CPU的参与的。\")]),t._v(\" \"),a(\"p\",[t._v(\"上述流程就是少了一个 CPU COPY，提升了 I/O 的速度。不过发现上下文的切换还是4次并没有减少，这是因为还是要应用程序发起\"),a(\"code\",[t._v(\"write\")]),t._v(\"操作。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"那能不能减少上下文切换呢?这就需要\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"方式来进一步优化了。\")])]),t._v(\" \"),a(\"p\",[t._v(\"sendfile 方式\")]),t._v(\" \"),a(\"p\",[t._v(\"从 Linux 2.1 版本开始，Linux 引入了 \"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"来简化操作。\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"方式可以替换上面的\"),a(\"code\",[t._v(\"mmap/write\")]),t._v(\"方式来进一步优化。\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"sendfile\")]),t._v(\"将以下操作：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[t._v(\"java\\n复制代码  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"mmap\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"write\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n替换为：\\njava\\n复制代码 \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"sendfile\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"这样就减少了上下文切换，因为少了一个应用程序发起\"),a(\"code\",[t._v(\"write\")]),t._v(\"操作，直接发起\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"操作。\")]),t._v(\" \"),a(\"p\",[t._v(\"下图展示了\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"原理：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d221a3a90a754ca9842f6324455638ea~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"image-20210812201905046\"}})]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"sendfile\")]),t._v(\"方式只有三次数据复制（其中只有一次 CPU COPY）以及2次上下文切换。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"那能不能把 CPU COPY 减少到没有呢？这样需要带有 \"),a(\"code\",[t._v(\"scatter/gather\")]),t._v(\"的\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"方式了。\")])]),t._v(\" \"),a(\"p\",[t._v(\"带有 scatter/gather 的 sendfile方式\")]),t._v(\" \"),a(\"p\",[t._v(\"Linux 2.4 内核进行了优化，提供了带有 \"),a(\"code\",[t._v(\"scatter/gather\")]),t._v(\" 的 sendfile 操作，这个操作可以把最后一次 \"),a(\"code\",[t._v(\"CPU COPY\")]),t._v(\" 去除。其原理就是在内核空间 Read BUffer 和 Socket Buffer 不做数据复制，而是将 Read Buffer 的内存地址、偏移量记录到相应的 Socket Buffer 中，这样就不需要复制。其本质和虚拟内存的解决方法思路一致，就是内存地址的记录。\")]),t._v(\" \"),a(\"p\",[t._v(\"下图展示了scatter/gather 的 sendfile 的原理：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/133430c1aedc4e22a6e340efc29e4239~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"image-20210812201922193\"}})]),t._v(\" \"),a(\"p\",[t._v(\"scatter/gather 的 sendfile 只有两次数据复制（都是 DMA COPY）及 2 次上下文切换。CUP COPY 已经完全没有。不过这一种收集复制功能是需要硬件及驱动程序支持的。\")]),t._v(\" \"),a(\"p\",[t._v(\"splice 方式\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"splice\")]),t._v(\" 调用和\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\" 非常相似，用户应用程序必须拥有两个已经打开的文件描述符，一个表示输入设备，一个表示输出设备。与\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"不同的是，\"),a(\"code\",[t._v(\"splice\")]),t._v(\"允许任意两个文件互相连接，而并不只是文件与\"),a(\"code\",[t._v(\"socket\")]),t._v(\"进行数据传输。对于从一个文件描述符发送数据到\"),a(\"code\",[t._v(\"socket\")]),t._v(\"这种特例来说，一直都是使用\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"系统调用，而\"),a(\"code\",[t._v(\"splice\")]),t._v(\"一直以来就只是一种机制，它并不仅限于\"),a(\"code\",[t._v(\"sendfile\")]),t._v(\"的功能。也就是说 sendfile 是 splice 的一个子集。\")]),t._v(\" \"),a(\"p\",[t._v(\"在 Linux 2.6.17 版本引入了 splice，而在 Linux 2.6.23 版本中， sendfile 机制的实现已经没有了，但是其 API 及相应的功能还在，只不过 API 及相应的功能是利用了 splice 机制来实现的。\")]),t._v(\" \"),a(\"p\",[t._v(\"和 sendfile 不同的是，splice 不需要硬件支持。\")]),t._v(\" \"),a(\"p\",[t._v(\"总结\")]),t._v(\" \"),a(\"p\",[t._v(\"无论是传统的 I/O 方式，还是引入了零拷贝之后，2 次 \"),a(\"code\",[t._v(\"DMA copy\")]),t._v(\"是都少不了的。因为两次 DMA 都是依赖硬件完成的。所以，所谓的零拷贝，都是为了减少 CPU copy 及减少了上下文的切换。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_29-tcp建立连接为什么是三次握手-而不是两次或四次\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_29-tcp建立连接为什么是三次握手-而不是两次或四次\"}},[t._v(\"#\")]),t._v(\" 29.TCP建立连接为什么是三次握手，而不是两次或四次？\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"三次握手才可以阻止重复历史连接的初始化（主要原因）\")]),t._v(\" \"),a(\"li\",[t._v(\"三次握手才可以同步双方的初始序列号\")]),t._v(\" \"),a(\"li\",[t._v(\"三次握手才可以避免资源浪费\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_30-tcp四次挥手为什么有时会是三次挥手\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_30-tcp四次挥手为什么有时会是三次挥手\"}},[t._v(\"#\")]),t._v(\" 30.TCP四次挥手为什么有时会是三次挥手？\")]),t._v(\" \"),a(\"p\",[t._v(\"当被动关闭方在 TCP 挥手过程中，如果「没有数据要发送」，同时「没有开启 TCP_QUICKACK（默认情况就是没有开启，没有开启 TCP_QUICKACK，等于就是在使用 TCP 延迟确认机制）」，那么第二和第三次挥手就会合并传输，这样就出现了三次挥手。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"所以，出现三次挥手现象，是因为 TCP 延迟确认机制导致的。\")]),t._v(\"（ACK不携带数据，浪费网络资源，TCP往往会延迟一段时间放松ACK，如果再延迟这短时间内，发送ACK这侧的服务器或者客户端有数据要发送，就可以一起发送了，节约了网络资源。）\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_31-如何对app做安全测试\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_31-如何对app做安全测试\"}},[t._v(\"#\")]),t._v(\" 31.如何对app做安全测试\")]),t._v(\" \"),a(\"p\",[t._v(\"任意用户登录\")]),t._v(\" \"),a(\"p\",[t._v(\"日志安全\")]),t._v(\" \"),a(\"p\",[t._v(\"值符绕过\")]),t._v(\" \"),a(\"p\",[t._v(\"信息泄漏\")]),t._v(\" \"),a(\"p\",[t._v(\"权限问题\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_32-这四种隔离级别具体是如何实现的呢\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_32-这四种隔离级别具体是如何实现的呢\"}},[t._v(\"#\")]),t._v(\" 32.这四种隔离级别具体是如何实现的呢？\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\")]),t._v(\" \"),a(\"li\",[t._v(\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\")]),t._v(\" \"),a(\"li\",[t._v(\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 *\"),a(\"em\",[t._v(\"Read View *\"),a(\"em\",[t._v(\"来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。*\")]),t._v(\"「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_33-可重复读隔离级别如何用mvcc解决幻读问题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_33-可重复读隔离级别如何用mvcc解决幻读问题\"}},[t._v(\"#\")]),t._v(\" 33.可重复读隔离级别如何用mvcc解决幻读问题\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Innodb 引擎为了解决「可重复读」隔离级别使用「当前读（select for update当前读-----select 快照读）」而造成的幻读问题，就引出了间隙锁\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/3af285a8e70f4d4198318057eb955520.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"事务 A 执行了这面这条锁定读语句后，就在对表中的记录加上 id 范围为 (2, +∞] 的 next-key lock（next-key lock 是间隙锁+记录锁的组合）。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"可重复读隔离级别下虽然很大程度上避免了幻读，但是还是没有能完全解决幻读\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"第二个发生幻读现象的场景\")])]),t._v(\" \"),a(\"p\",[t._v(\"除了上面这一种场景会发生幻读现象之外，还有下面这个场景也会发生幻读现象。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"T1 时刻：事务 A 先执行「快照读语句」：select * from t_test where id > 100 得到了 3 条记录。\")]),t._v(\" \"),a(\"li\",[t._v(\"T2 时刻：事务 B 往插入一个 id= 200 的记录并提交；\")]),t._v(\" \"),a(\"li\",[t._v(\"T3 时刻：事务 A 再执行「当前读语句」 select * from t_test where id > 100 for update 就会得到 4 条记录，此时也发生了幻读现象。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select ... for update 这类当前读的语句\")]),t._v(\"，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_34-元数据锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_34-元数据锁\"}},[t._v(\"#\")]),t._v(\" 34.元数据锁\")]),t._v(\" \"),a(\"p\",[t._v(\"元数据锁主要是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。\")]),t._v(\" \"),a(\"p\",[t._v(\"我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"对一张表进行 CRUD 操作时，加的是 \"),a(\"strong\",[t._v(\"MDL 读锁\")]),t._v(\"；\")]),t._v(\" \"),a(\"li\",[t._v(\"对一张表做结构变更操作的时候，加的是 \"),a(\"strong\",[t._v(\"MDL 写锁\")]),t._v(\"；\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"MDL 不需要显示调用，那它是在什么时候释放的?\")])]),t._v(\" \"),a(\"p\",[t._v(\"MDL 是在事务提交后才会释放，这意味着\"),a(\"strong\",[t._v(\"事务执行期间，MDL 是一直持有的\")]),t._v(\"。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_35-意向锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_35-意向锁\"}},[t._v(\"#\")]),t._v(\" 35.意向锁\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；\")]),t._v(\" \"),a(\"li\",[t._v(\"在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables ... read*）和独占表锁（*lock tables ... write*）发生冲突。\")])]),t._v(\" \"),a(\"p\",[t._v(\"表锁和行锁是满足读读共享、读写互斥、写写互斥的。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。\")]),t._v(\" \"),a(\"p\",[t._v(\"所以，\"),a(\"strong\",[t._v(\"意向锁的目的是为了快速判断表里是否有记录被加锁\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_36-行级锁\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_36-行级锁\"}},[t._v(\"#\")]),t._v(\" 36.行级锁\")]),t._v(\" \"),a(\"p\",[t._v(\"行级锁的类型主要有三类：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"Record Lock，记录锁，也就是仅仅把一条记录锁上；\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;\")]),t._v(\" \"),a(\"li\",[t._v(\"当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。\")])]),t._v(\" \"),a(\"p\",[t._v(\"举个例子，当一个事务执行了下面这条语句：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[t._v(\"mysql \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"begin\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nmysql \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"select\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"from\")]),t._v(\" t_test \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"where\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"update\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"就是对 t_test 表中主键 id 为 1 的这条记录加上 X 型的记录锁，这样其他事务就无法对这条记录进行修改了。\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Gap Lock 称为间隙锁，只存在于\"),a(\"strong\",[t._v(\"可重复读隔离级别\")]),t._v(\"，目的是为了解决可重复读隔离级别下幻读的现象。\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身\")])])]),t._v(\" \"),a(\"p\",[t._v(\"LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思，通过 LOCK_MODE 可以确认是 next-key 锁，还是间隙锁，还是记录锁：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"如果 LOCK_MODE 为 \"),a(\"code\",[t._v(\"X\")]),t._v(\"，说明是 X 型的 next-key 锁；\")]),t._v(\" \"),a(\"li\",[t._v(\"如果 LOCK_MODE 为 \"),a(\"code\",[t._v(\"X, REC_NOT_GAP\")]),t._v(\"，说明是 X 型的记录锁；\")]),t._v(\" \"),a(\"li\",[t._v(\"如果 LOCK_MODE 为 \"),a(\"code\",[t._v(\"X, GAP\")]),t._v(\"，说明是 X 型的间隙锁；\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_37-mysql-log\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_37-mysql-log\"}},[t._v(\"#\")]),t._v(\" 37.MySQL Log\")]),t._v(\" \"),a(\"p\",[t._v(\"undo log（回滚日志）、redo log（重做日志） 、binlog （归档日志）这三种日志：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"undo log（回滚日志）\")]),t._v(\"：是 Innodb 存储引擎层生成的日志，实现了事务中的\"),a(\"strong\",[t._v(\"原子性\")]),t._v(\"，主要\"),a(\"strong\",[t._v(\"用于事务回滚和 MVCC\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"redo log（重做日志）\")]),t._v(\"：是 Innodb 存储引擎层生成的日志，实现了事务中的\"),a(\"strong\",[t._v(\"持久性\")]),t._v(\"，主要\"),a(\"strong\",[t._v(\"用于掉电等故障恢复\")]),t._v(\"；\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"binlog （归档日志）\")]),t._v(\"：是 Server 层生成的日志，主要\"),a(\"strong\",[t._v(\"用于数据备份和主从复制\")]),t._v(\"；\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"redo log 和 undo log 区别在哪？\")])]),t._v(\" \"),a(\"p\",[t._v(\"这两种日志是属于 InnoDB 存储引擎的日志，它们的区别在于：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"redo log 记录了此次事务「\"),a(\"strong\",[t._v(\"完成后\")]),t._v(\"」的数据状态，记录的是更新\"),a(\"strong\",[t._v(\"之后\")]),t._v(\"的值；\")]),t._v(\" \"),a(\"li\",[t._v(\"undo log 记录了此次事务「\"),a(\"strong\",[t._v(\"开始前\")]),t._v(\"」的数据状态，记录的是更新\"),a(\"strong\",[t._v(\"之前\")]),t._v(\"的值；\")])]),t._v(\" \"),a(\"p\",[t._v(\"undo log 和 redo log 这两个日志都是 \"),a(\"strong\",[t._v(\"Innodb 存储引擎\")]),t._v(\"生成的。\")]),t._v(\" \"),a(\"p\",[t._v(\"MySQL 在完成一条更新操作后，Server 层还会生成一条 binlog，等之后事务提交的时候，会将该事物执行过程中产生的所有 binlog 统一写 入 binlog 文件。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_38-redo-log-循环写-和binlog-全量日志-的-区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_38-redo-log-循环写-和binlog-全量日志-的-区别\"}},[t._v(\"#\")]),t._v(\" 38.redo log（循环写）和binlog（全量日志）的 区别\")]),t._v(\" \"),a(\"p\",[a(\"em\",[t._v(\"1、适用对象不同：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"binlog 是 MySQL 的 Server 层实现的日志，所有存储引擎都可以使用；\")]),t._v(\" \"),a(\"li\",[t._v(\"redo log 是 Innodb 存储引擎实现的日志；\")])]),t._v(\" \"),a(\"p\",[a(\"em\",[t._v(\"2、文件格式不同：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"binlog 有 3 种格式类型，分别是 STATEMENT（默认格式）、ROW、 MIXED，区别如下：\\n\"),a(\"ul\",[a(\"li\",[t._v(\"STATEMENT：每一条修改数据的 SQL 都会被记录到 binlog 中（相当于记录了逻辑操作，所以针对这种格式， binlog 可以称为逻辑日志），主从复制中 slave 端再根据 SQL 语句重现。但 STATEMENT 有动态函数的问题，比如你用了 uuid 或者 now 这些函数，你在主库上执行的结果并不是你在从库执行的结果，这种随时在变的函数会导致复制的数据不一致；\")]),t._v(\" \"),a(\"li\",[t._v(\"ROW：记录行数据最终被修改成什么样了（这种格式的日志，就不能称为逻辑日志了），不会出现 STATEMENT 下动态函数的问题。但 ROW 的缺点是每行数据的变化结果都会被记录，比如执行批量 update 语句，更新多少行数据就会产生多少条记录，使 binlog 文件过大，而在 STATEMENT 格式下只会记录一个 update 语句而已；\")]),t._v(\" \"),a(\"li\",[t._v(\"MIXED：包含了 STATEMENT 和 ROW 模式，它会根据不同的情况自动使用 ROW 模式和 STATEMENT 模式；\")])])]),t._v(\" \"),a(\"li\",[t._v(\"redo log 是物理日志，记录的是在某个数据页做了什么修改，比如对 XXX 表空间中的 YYY 数据页 ZZZ 偏移量的地方做了AAA 更新；\")])]),t._v(\" \"),a(\"p\",[a(\"em\",[t._v(\"3、写入方式不同：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"binlog 是追加写，写满一个文件，就创建一个新的文件继续写，不会覆盖以前的日志，保存的是全量的日志。\")]),t._v(\" \"),a(\"li\",[t._v(\"redo log 是循环写，日志空间大小是固定，全部写满就从头开始，保存未被刷入磁盘的脏页日志。\")])]),t._v(\" \"),a(\"p\",[a(\"em\",[t._v(\"4、用途不同：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"binlog 用于备份恢复、主从复制；\")]),t._v(\" \"),a(\"li\",[t._v(\"redo log 用于掉电等故障恢复。\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"如果不小心整个数据库的数据被删除了，能使用 redo log 文件恢复数据吗？\")])]),t._v(\" \"),a(\"p\",[t._v(\"不可以使用 redo log 文件恢复，只能使用 binlog 文件恢复。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_34-为什么redis选择使用跳表而不是红黑树来实现有序集合\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_34-为什么redis选择使用跳表而不是红黑树来实现有序集合\"}},[t._v(\"#\")]),t._v(\" 34.为什么Redis选择使用跳表而不是红黑树来实现有序集合？\")]),t._v(\" \"),a(\"p\",[t._v(\"Redis 中的有序集合(zset) 支持的操作：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"插入一个元素\")]),t._v(\" \"),a(\"li\",[t._v(\"删除一个元素\")]),t._v(\" \"),a(\"li\",[t._v(\"查找一个元素\")]),t._v(\" \"),a(\"li\",[t._v(\"有序输出所有元素\")]),t._v(\" \"),a(\"li\",[t._v(\"按照范围区间查找元素（比如查找值在 [100, 356] 之间的数据）\")])]),t._v(\" \"),a(\"p\",[t._v(\"其中，前四个操作红黑树也可以完成，且时间复杂度跟跳表是一样的。但是，按照区间来查找数据这个操作，红黑树的效率没有跳表高。按照区间查找数据时，跳表可以做到 O(logn) 的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了，非常高效。红黑树范围查找需要中序遍历。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_35-红黑树-二叉搜索树之一\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_35-红黑树-二叉搜索树之一\"}},[t._v(\"#\")]),t._v(\" 35.红黑树（二叉搜索树之一）\")]),t._v(\" \"),a(\"p\",[t._v(\"RBTree的插入操作\")]),t._v(\" \"),a(\"p\",[t._v(\"RBTree的插入与BST的插入方式是一致的，只不过是在插入过后，可能会导致树的不平衡，这时就需要对树进行旋转操作和颜色修复（在这里简称插入修复），使得它符合RBTree的定义。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"新插入的节点是红色的，插入修复操作如果遇到父节点的颜色为黑则修复操作结束\")]),t._v(\"。\"),a(\"strong\",[t._v(\"也就是说，只有在父节点为红色节点的时候是需要插入修复操作的。\")])]),t._v(\" \"),a(\"p\",[t._v(\"插入修复操作分为以下的三种情况，而且新插入的节点的父节点都是红色的：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"叔叔节点也为红色。\")]),t._v(\" \"),a(\"li\",[t._v(\"叔叔节点为空，且祖父节点、父节点和新节点处于一条斜线上。\")]),t._v(\" \"),a(\"li\",[t._v(\"叔叔节点为空，且祖父节点、父节点和新节点不处于一条斜线上。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_36-内存屏障\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_36-内存屏障\"}},[t._v(\"#\")]),t._v(\" 36.内存屏障\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"内存屏障（memory barrier）是一个CPU指令。基本上，它是这样一条指令： a) 确保一些特定操作执行的顺序； b) 影响一些数据的可见性(可能是某些指令执行后的结果)。\")])]),t._v(\" \"),a(\"p\",[t._v(\"编译器和CPU可以在保证输出结果一样的情况下对指令重排序，使性能得到优化。插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。内存屏障另一个作用是强制更新一次不同CPU的缓存。例如，一个写屏障会把这个屏障前写入的数据刷新到缓存，这样任何试图读取该数据的线程将得到最新值，而不用考虑到底是被哪个cpu核心或者哪颗CPU执行的。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"不同硬件实现内存屏障的方式不同，Java内存模型屏蔽了这种底层硬件平台的差异，由JVM来为不同的平台生成相应的机器码。\")]),t._v(\"\\nJava内存屏障主要有Load和Store两类。\\n对Load Barrier来说，在读指令前插入读屏障，可以让高速缓存中的数据失效，重新从主内存加载数据\\n对Store Barrier来说，在写指令之后插入写屏障，能让写入缓存的最新数据写回到主内存\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"Volatile基本介绍\")]),t._v(\"\\nJava语言规范第三版中对volatile的定义如下： java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。\\nJava语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。\\n\"),a(\"strong\",[t._v(\"volatile作用\")]),t._v(\" \"),a(\"strong\",[t._v(\"能保证可见性和防止指令重排序\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"volatile与synchronized对比\")]),t._v(\"\\nvolatile变量修饰符如果使用恰当的话，它比synchronized的使用和执行成本会更低，因为\"),a(\"strong\",[t._v(\"它不会引起线程上下文的切换和调度\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"volatile如何保证可见性、防止指令重排序\")]),t._v(\"\\nvolatile保持内存可见性和防止指令重排序的原理，本质上是同一个问题，也都\"),a(\"strong\",[t._v(\"依靠内存屏障得到解决\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"volatile关键字通过“内存屏障”来防止指令被重排序。\")]),t._v(\" \"),a(\"strong\",[t._v(\"为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序\")])]),t._v(\" \"),a(\"p\",[t._v(\"下面是基于保守策略的JMM内存屏障插入策略：\\n在每个volatile写操作的前面插入一个StoreStore屏障。\\n在每个volatile写操作的后面插入一个StoreLoad屏障。\\n在每个volatile读操作的后面插入一个LoadLoad屏障。\\n在每个volatile读操作的后面插入一个LoadStore屏障。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"volatile为什么不能保证原子性\")]),t._v(\"\\n原子操作是一些列的操作要么全做，要么全不做，而\"),a(\"strong\",[t._v(\"volatile 是一种弱的同步机制，只能确保共享变量的更新操作及时被其他线程看到\")]),t._v(\"，以最常用的i++来说吧，包含3个步骤\\n1，从内存读取i当前的值 2，加1 变成 3，把修改后的值刷新到内存，volatile无法保证这三个不被打断的执行完毕，如果在刷新到内存之前有中断，此时被其他线程修改了，之前的值就无效了\\n\"),a(\"strong\",[t._v(\"volatile的适用场景\")]),t._v(\"\\nvolatile是在synchronized性能低下的时候提出的。如今synchronized的效率已经大幅提升，所以volatile存在的意义不大。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"内存屏障类型\")]),t._v(\"：\")]),t._v(\" \"),a(\"p\",[t._v(\"为了保证内存可见性，java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM 把内存屏障指令分为下列四类：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"屏障类型\")]),t._v(\" \"),a(\"th\",[t._v(\"指令示例\")]),t._v(\" \"),a(\"th\",[t._v(\"说明\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"LoadLoad Barriers\")]),t._v(\" \"),a(\"td\",[t._v(\"Load1; LoadLoad; Load2\")]),t._v(\" \"),a(\"td\",[t._v(\"确保 Load1 数据的装载，之前于 Load2 及所有后续装载指令的装载。\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"StoreStore Barriers\")]),t._v(\" \"),a(\"td\",[t._v(\"Store1; StoreStore; Store2\")]),t._v(\" \"),a(\"td\",[t._v(\"确保 Store1 数据对其他处理器可见（刷新到内存），之前于 Store2 及所有后续存储指令的存储。\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"LoadStore Barriers\")]),t._v(\" \"),a(\"td\",[t._v(\"Load1; LoadStore; Store2\")]),t._v(\" \"),a(\"td\",[t._v(\"确保 Load1 数据装载，之前于 Store2 及所有后续的存储指令刷新到内存。\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"StoreLoad Barriers\")]),t._v(\" \"),a(\"td\",[t._v(\"Store1; StoreLoad; Load2\")]),t._v(\" \"),a(\"td\",[t._v(\"确保 Store1 数据对其他处理器变得可见（指刷新到内存），之前于 Load2 及所有后续装载指令的装载。\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"StoreLoad Barriers 会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。\")]),t._v(\" \"),a(\"p\",[t._v(\"StoreLoad Barriers 是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_37-三色标记法gc\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_37-三色标记法gc\"}},[t._v(\"#\")]),t._v(\" 37.三色标记法GC\")]),t._v(\" \"),a(\"p\",[t._v(\"GC 垃圾回收器其主要的目的是为了实现内存的回收，在这个过程中主要的两个步骤就是：内存标记，内存回收。\")]),t._v(\" \"),a(\"p\",[t._v(\"三色标记法，主要是为了高效的标记可被回收的内存块。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c35aa72bac744b15b008363cf42977ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"三色标记（Tri-color Marking）作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"对象在标记过程中，根据标记情况，分成三类：\\n\"),a(\"ol\",[a(\"li\",[t._v(\"白色对象，表示自身未被标记；\")]),t._v(\" \"),a(\"li\",[t._v(\"灰色对象，表示自身被标记，但内部引用未被处理；\")]),t._v(\" \"),a(\"li\",[t._v(\"黑色对象，表示自身被标记，内部引用都被处理；\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"三色标记过程\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23aea3d2c7ea43b6b9f39c45ddf68499~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"标记过程：\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"在  \"),a(\"code\",[t._v(\"GC\")]),t._v(\" 标记开始的时候，所有的对象均为白色；\")]),t._v(\" \"),a(\"li\",[t._v(\"在将所有的 \"),a(\"code\",[t._v(\"GC Roots\")]),t._v(\" 直接引用的对象标记为灰色集合；\")]),t._v(\" \"),a(\"li\",[t._v(\"如果判断灰色集合中的对象不存在子引用，则将其放入黑色集合，若存在子引用对象，则将其所有的子引用对象存放到灰色集合，当前对象放入黑色集合。\")]),t._v(\" \"),a(\"li\",[t._v(\"按照此步骤 3 ，依此类推，直至灰色集合中所有的对象变黑后，本轮标记完成，并且在白色集合内的对象称为不可达对象，即垃圾对象。\")]),t._v(\" \"),a(\"li\",[t._v(\"标记结束后，为白色的对象为 GC Roots 不可达，可以进行垃圾回收。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"误标\")])]),t._v(\" \"),a(\"p\",[t._v(\"三色标记的过程中，标记线程和用户线程是并发执行的，那么就有可能在我们标记过程中，用户线程修改了引用关系，把原本应该回收的对象错误标记成了存活。(简单来说就是 \"),a(\"code\",[t._v(\"GC\")]),t._v(\" 已经标黑的对象，在并发过程中用户线程引用链断掉，导致实际应该是垃圾的白色对象但却依旧是黑的，也就是\"),a(\"strong\",[t._v(\"浮动垃圾\")]),t._v(\")。这时产生的垃圾怎么办呢？答案是本次不处理，留给下次垃圾回收处理。\")]),t._v(\" \"),a(\"p\",[t._v(\"而\"),a(\"strong\",[t._v(\"误标\")]),t._v(\"问题，意思就是把本来应该存活的垃圾，标记为了死亡。这就会导致非常严重的错误。那么这类垃圾是怎么产生的呢?\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d907d5b2bc2342619931531d42651378~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?\",alt:\"误标的发生过程.png\"}})]),t._v(\" \"),a(\"p\",[t._v(\"途中对象 \"),a(\"code\",[t._v(\"A\")]),t._v(\" 被标记为了黑色，此时它所引用的两个对象 \"),a(\"code\",[t._v(\"B\")]),t._v(\",\"),a(\"code\",[t._v(\"C\")]),t._v(\" 都在被标记的灰色阶段。此时用户线程把\"),a(\"code\",[t._v(\"B->D\")]),t._v(\"之间的的引用关系删除，并且在\"),a(\"code\",[t._v(\"A->D\")]),t._v(\" 之间建立引用。此时\"),a(\"code\",[t._v(\"B\")]),t._v(\"对象依然未扫描结束，而A对象又已经被扫描过了，不会继续接着往下扫描了。因此 \"),a(\"code\",[t._v(\"D\")]),t._v(\"对象就会被当做垃圾回收掉。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"什么是误标？当下面两个条件同时满足，会产生误标：\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"赋值器插入了一条或者多条黑色对象到白色对象的引用\")]),t._v(\" \"),a(\"li\",[t._v(\"赋值器删除了全部从灰色对象到白色对象的直接引用或者间接引用\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"误标的解决方案\")])]),t._v(\" \"),a(\"p\",[t._v(\"要解决误标的问题，只需要破坏这两个条件中的任意一种即可，分别有两种解决方案：增量更新（Incremental Update） 和原始快照（Snapshot At The Beginning, STAB）\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"增量更新\")])]),t._v(\" \"),a(\"p\",[t._v(\"增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"原始快照 (STAB)\")])]),t._v(\" \"),a(\"p\",[t._v(\"原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_38-cms与g1收集器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_38-cms与g1收集器\"}},[t._v(\"#\")]),t._v(\" 38.CMS与G1收集器\")]),t._v(\" \"),a(\"p\",[t._v(\"CMS是老年代并发GC算法：(ConcurrentMark-SweepGC、CMS GC)。\")]),t._v(\" \"),a(\"p\",[t._v(\"算法总体逻辑：标记-清除（Mark-Sweep)\")]),t._v(\" \"),a(\"p\",[t._v(\"cms是最常用的垃圾垃圾回收器，下面分析下CMS垃圾回收器工作原理；\")]),t._v(\" \"),a(\"p\",[t._v(\"CMS 处理过程有七个步骤：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"初始标记(CMS-initial-mark) ,会导致swt；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"并发标记(CMS-concurrent-mark)，与用户线程同时运行；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"预清理（CMS-concurrent-preclean），与用户线程同时运行；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"可被终止的预清理（CMS-concurrent-abortable-preclean） 与用户线程同时运行；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"重新标记(CMS-remark) ，会导致swt；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"并发清除(CMS-concurrent-sweep)，与用户线程同时运行；\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"并发重置状态等待下次CMS的触发(CMS-concurrent-reset)，与用户线程同时运行；\")])])]),t._v(\" \"),a(\"p\",[t._v(\"cms运行流程图如下所示：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/19/16de2dc0e2f7982a~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp\",alt:\"CMS流程图\"}})]),t._v(\" \"),a(\"p\",[t._v(\"跨代引用-old->young 或者young->old\")]),t._v(\" \"),a(\"p\",[t._v(\"​\\t\\tCMS 主要负责回收年老代垃圾，使用CMS时新生代垃圾收集工作通常由Serial New 或 ParNew 完成，默认新生代垃圾回收器为ParNew。CMS回收年老代垃圾时，将整体垃圾回收的过程拆分为多个阶段，并且大部分阶段与应用线程都是并发不会发生STW。CMS整体垃圾回收过程可分为初始化标记（ Initial-mark）、并发标记（Concurrent Marking）、并发预清除（Concurrent Pre-cleaning）、重新标记（Remark）、并发清除（Concurrent Sweeping），初始化标记与重新标记都会发生STW，但通常时间都比较短。CMS早其版本中初始化标记与重新标记都是由单线程完成的，后期版本可以通过 -XX:+CMSParallelInitialMark 与 -XX:CMSParallelRemarkEnabled 分别将初始化标记与重新标记阶段指定为多线程。在CMS对年老代进行并发回收时很多可能新生代发生了Young GC，此时年老代垃圾回收将立刻中断，直到Young GC结束后又重新恢复。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"1、Young GC 时，Eden区域存活的对象过大Survivor区域无法存放导致promotion failed，此时对象只能放入年老代，但由于内存碎片问题年老代同样放不下该对象，最后将发生concurrent mode failure，这时会引发Full GC，Full GC会回收整个Heap 空间导致STW时长骤增。\\n\\n2、Young GC 时，Survivor 区域存活对象年龄超过了MaxTenuringThreshold，晋升到年老代，但由于内存碎片问题年老代放不下该对象，将发生concurrent mode failure，这时会引发Full GC。\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"G1垃圾收集器\")]),t._v(\" Garbage First   https://juejin.cn/post/7050324680875442183\")]),t._v(\" \"),a(\"p\",[t._v(\"G1开启了分区垃圾收集器的先河（虽然G1在逻辑上也有新生代与年老代的概念）。G1利用分治的思想将整体Heap划分为一块块大小相等的Region，在内存管理时可以针对这些Region进行管理，而不是笼统地对某个Generation进行管理。由于Region的大小通常远小于Generation，垃圾回收时处理多个Region效率通常高于处理某个Generation。\")]),t._v(\" \"),a(\"p\",[t._v(\"①. G1(Garbage-First)是一款面向服务端应用的垃圾收集器,主要针对配备多核CPU及大容量内存的机器,\"),a(\"strong\",[t._v(\"以极高概率满足GC停顿时间的同时\")]),t._v(\",还\"),a(\"strong\",[t._v(\"兼具高吞吐量的性能特征\")])]),t._v(\" \"),a(\"p\",[t._v(\"②. 在JDK1.7版本正式启用,是\"),a(\"strong\",[t._v(\"JDK 9以后的默认垃圾收集器,取代了CMS 回收器\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"为什么名字叫Garbage First？\")])]),t._v(\" \"),a(\"p\",[t._v(\"①. G1是一个并行回收器,它\"),a(\"strong\",[t._v(\"把堆内存分割为很多不相关的区域(region物理上不连续),把堆分为2048个区域\")]),t._v(\",每一个region的大小是1 - 32M不等,必须是\"),a(\"strong\",[t._v(\"2的整数次幂\")]),t._v(\"。使用不同的region可以来表示Eden、幸存者0区、幸存者1区、老年代等\")]),t._v(\" \"),a(\"p\",[t._v(\"②. 每次根据允许的收集时间,\"),a(\"strong\",[t._v(\"优先回收价值最大的Region\")]),t._v(\"\\n(每次回收完以后都有一个空闲的region,在后台维护一个优先列表)\")]),t._v(\" \"),a(\"p\",[t._v(\"③. 由于这种方式的侧重点在于回收垃圾最大量的区间(Region),所以我们给G1一个名字:\"),a(\"strong\",[t._v(\"垃圾优先(Garbage First)\")])]),t._v(\" \"),a(\"p\",[t._v(\"④. 下面说一个问题:\"),a(\"strong\",[t._v(\"既然我们已经有了前面几个强大的GC,为什么还要发布Garbage First(G1)GC？\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v('官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量,所以才担当起\"全功能收集器\"的重任与期望。')])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"分区Region：化整为零\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB,2MB, 4MB, 8MB, 1 6MB, 32MB。可以通过-XX :G1HeapRegionSize设定。\"),a(\"strong\",[t._v(\"所有的Region大小相同\")]),t._v(\"，且\"),a(\"strong\",[t._v(\"在JVM生命周期内不会被改变\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了,它们都是一部分Region (不需要连续)的集合。\"),a(\"strong\",[t._v(\"通过Region的动态分配方式实现逻辑上的连续。\")])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00269e5e4dcf463da7ff2eb0b8368fc3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"一个region有可能属于Eden， Survivor 或者0ld/Tenured 内存区域。但是\"),a(\"strong\",[t._v(\"一个region只可能属于一个角色\")]),t._v(\"。图中的E表示该region属于Eden内存区域，s表示属于Survivor内存区域，o表示属于old内存区域。图中空白的表示未使用的内存空间。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"G1垃圾收集器还增加了一种新的内存区域，叫做\"),a(\"strong\",[t._v(\"Humongous内存区域\")]),t._v(\"，如图中的H块。主要用于存储大对象，如果\"),a(\"strong\",[t._v(\"超过1.5个region, 就放到H\")]),t._v(\"。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"设置H的原因:\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"strong\",[t._v(\"对于堆中的大对象，默认直接会被分配到老年代\")]),t._v(\"，但是如果它是\"),a(\"strong\",[t._v(\"一个短期存在的大对象，就会对垃圾收集器造成负面影响\")]),t._v(\"。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对\"),a(\"strong\",[t._v(\"如果一个H区装不下一个大对象，那么G1会寻找连续的H区来\\n存储\")]),t._v(\"。为了能找到连续的H区，有时候不得不启动Full GC。 G1的大多数行为都把H区 作为老年代的一部分来看待。\")])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"G1回收器垃圾回收过程\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"①. G1 GC的垃圾回收过程主要包括如下三个环节：\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"年轻代GC (Young GC)\")]),t._v(\" \"),a(\"li\",[t._v(\"老年代并发标记过程 (Concurrent Marking)\")]),t._v(\" \"),a(\"li\",[t._v(\"混合回收(Mixed GC)\")])]),t._v(\" \"),a(\"p\",[t._v(\"(如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它\\n针对GC的评估失败提供了-种失败保护机制，即强力回收。)\")]),t._v(\" \"),a(\"p\",[t._v(\"顺时针young gc -> young gc + concurrent mark-> Mixed GC顺序,进行垃圾回收\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9034cb2bf76479fb3eb073d11c72dc9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\",alt:\"在这里插入图片描述\"}})]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"②. 应用程序分配内存\")]),t._v(\",\"),a(\"strong\",[t._v(\"当年轻代的Eden区用尽时开始年轻代回收过程；*\"),a(\"em\",[t._v(\"G1的年轻代收集阶段是一个*\"),a(\"em\",[t._v(\"并行(多个垃圾线程)的独占式收集器\")])]),t._v(\"。在年轻代回收期,G1 GC暂停所有应用程序线程,启动多线程执行年轻代回收。然后\")]),t._v(\"从年轻代区间移动存活对象到Survivor区间或者老年区间,也有可能是两个区间都会涉及**\")]),t._v(\" \"),a(\"p\",[t._v(\"③. \"),a(\"strong\",[t._v(\"当堆内存使用达到一定值(默认45%)时,开始老年代并发标记过程\")])]),t._v(\" \"),a(\"p\",[t._v(\"④. \"),a(\"strong\",[t._v(\"标记完成马上开始混合回收过程\")]),t._v(\"。对于一个混合回收期,G1 GC从老年区间移动存活对象到空闲区间,这些空闲区间也就成为了老年代的一部分。和年轻代不同,老年代的G1回收器和其他GC不同,\"),a(\"strong\",[t._v(\"G1的老年代回收器不需要整个老年代被回收,一次只需要扫描/回收一小部分老年代的Region就可以了\")]),t._v(\"。同时,这个\"),a(\"strong\",[t._v(\"老年代Region是和年轻代一起被回收的。\")])]),t._v(\" \"),a(\"p\",[t._v(\"⑤. 举个例子：一个Web服务器,Java进程最大堆内存为4G,每分钟响应1500个请求,每45秒钟会新分配大约2G的内存。G1会每45秒钟进\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_39-springboot的类加载过程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_39-springboot的类加载过程\"}},[t._v(\"#\")]),t._v(\" 39.SpringBoot的类加载过程\")]),t._v(\" \"),a(\"p\",[t._v(\"（java本身的双亲委派模型以及maven中jar包或者jdbc驱动这样的SPI服务提供接口这样的SPI机制）\")]),t._v(\" \"),a(\"p\",[t._v(\"Spring的类加载器实现原理是基于Java的类加载机制，并且使用了双亲委派模式。在Spring中，类加载器的实现主要涉及到两个方面：双亲委派加载机制和SPI机制。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先，Spring使用双亲委派加载机制来加载类。这种机制是指系统启动后，应用类加载器会加载应用类，然后发起双亲委派机制，让上级扩展类加载器去加载，如果扩展类加载器加载不到，则让应用类加载器加载。这样可以保证类的加载顺序和一致性，避免重复加载和冲突。[1]\")]),t._v(\" \"),a(\"p\",[t._v(\"其次，Spring还使用了SPI（Service Provider Interface）机制来加载第三方jar包中的类。SPI机制是指第三方jar包通过ServiceLoader.load方法进行加载，首先通过双亲委派机制，Bootstrap类加载器加载到了ServiceLoader类，然后在Spring中通过ServiceLoader去加载第三方jar中的类时，由于类加载器的传递性，只能通过Bootstrap类加载器去加载第三方jar，然后顶级类加载器加载不了这个jar，所以只能通过当前线程上下文中的类加载器去加载第三方jar包的类。这里就打破了双亲委派。[3]\")]),t._v(\" \"),a(\"p\",[t._v(\"综上所述，Spring的类加载器实现原理是基于Java的类加载机制，使用了双亲委派加载机制和SPI机制。这样可以保证类的加载顺序和一致性，并且能够加载第三方jar包中的类。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_40-类加载过程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_40-类加载过程\"}},[t._v(\"#\")]),t._v(\" 40.类加载过程\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"加载-验证-准备-解析-初始化\")])]),t._v(\" \"),a(\"p\",[t._v(\"​\\t类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：\"),a(\"strong\",[t._v(\"加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化\")]),t._v(\"（Initialization）、使用（Using）和卸载（Unloading）。其中，验证、准备和解析这三个阶段可以统称为连接（Linking）。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"加载\")]),t._v(\"时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"通过一个类的全限定名来获取其定义的二进制字节流。\")]),t._v(\" \"),a(\"li\",[t._v(\"将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\")]),t._v(\" \"),a(\"li\",[t._v(\"在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"http://8.130.25.175:8080/img/java_jvm_classload_1.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"相对于类加载的其他阶段而言，\"),a(\"em\",[t._v(\"加载阶段(准确地说，是加载阶段获取类的二进制字节流的动作)是可控性最强的阶段\")]),t._v(\"，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。\")]),t._v(\" \"),a(\"p\",[t._v(\"加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个\"),a(\"code\",[t._v(\"java.lang.Class\")]),t._v(\"类的对象，这样便可以通过该对象访问方法区中的这些数据。\")]),t._v(\" \"),a(\"p\",[t._v(\"类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(LinkageError错误)如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"加载.class文件的方式\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"从本地系统中直接加载\")]),t._v(\" \"),a(\"li\",[t._v(\"通过网络下载.class文件\")]),t._v(\" \"),a(\"li\",[t._v(\"从zip，jar等归档文件中加载.class文件\")]),t._v(\" \"),a(\"li\",[t._v(\"从专有数据库中提取.class文件\")]),t._v(\" \"),a(\"li\",[t._v(\"将Java源文件动态编译为.class文件\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"链接的三个步骤\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"验证: 确保被加载的类的正确性\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"准备: 为类的静态变量分配内存，并将其初始化为默认值\")]),t._v(\"，准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，\"),a(\"strong\",[t._v(\"这些内存都将在方法区中分配\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"解析: 把类中的符号引用转换为直接引用\")]),t._v(\"符号引用就是一组符号来描述目标，可以是任何字面量。\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"直接引用\")]),t._v(\"就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"初始化\")])]),t._v(\" \"),a(\"p\",[t._v(\"初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"声明类变量是指定初始值\")]),t._v(\" \"),a(\"li\",[t._v(\"使用静态代码块为类变量指定初始值\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"JVM初始化步骤\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"假如这个类还没有被加载和连接，则程序先加载并连接该类\")]),t._v(\" \"),a(\"li\",[t._v(\"假如该类的直接父类还没有被初始化，则先初始化其直接父类\")]),t._v(\" \"),a(\"li\",[t._v(\"假如类中有初始化语句，则系统依次执行这些初始化语句\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"类初始化时机\")]),t._v(\": 只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"创建类的实例，也就是new的方式\")]),t._v(\" \"),a(\"li\",[t._v(\"访问某个类或接口的静态变量，或者对该静态变量赋值\")]),t._v(\" \"),a(\"li\",[t._v(\"调用类的静态方法\")]),t._v(\" \"),a(\"li\",[t._v('反射(如Class.forName(\"com.pdai.jvm.Test\"))')]),t._v(\" \"),a(\"li\",[t._v(\"初始化某个类的子类，则其父类也会被初始化\")]),t._v(\" \"),a(\"li\",[t._v(\"Java虚拟机启动时被标明为启动类的类(Java Test)，直接使用java.exe命令来运行某个主类\")])]),t._v(\" \"),a(\"p\",[t._v(\"使用\")]),t._v(\" \"),a(\"p\",[t._v(\"类访问方法区内的数据结构的接口， 对象是Heap区的数据。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[t._v(\"#\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_41-java类加载初始化顺序-重在顺序\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_41-java类加载初始化顺序-重在顺序\"}},[t._v(\"#\")]),t._v(\" 41.java类加载初始化顺序（重在顺序）\")]),t._v(\" \"),a(\"p\",[t._v(\"程序首先加载类，然后再对类进行初始化。\")]),t._v(\" \"),a(\"p\",[t._v(\"加载类的顺序为：先加载基类，基类加载完毕后再加载子类。\")]),t._v(\" \"),a(\"p\",[t._v(\"初始化的顺序为：先初始化基类，基类初始化完毕后再初始化子类。\")]),t._v(\" \"),a(\"p\",[t._v(\"最后得出类加载顺序为：先按照声明顺序初始化基类静态变量和静态代码块，接着按照声明顺序初始化子类静态变量和静态代码块，而后按照声明顺序初始化基类普通变量和普通代码块，然后执行基类构造函数，接着按照声明顺序初始化子类普通变量和普通代码块，最后执行子类构造函数。\")]),t._v(\" \"),a(\"p\",[t._v(\"对于本测试中的执行顺序为：先初始化static的变量，在执行main()方法之前就需要进行加载。再执行main方法，如果new一个对象，则先对这个对象类的基本成员变量进行初始化（非方法），包括构造代码块，这两种是按照编写顺序按序执行的，再调用构造函数。 关于继承的初始化机制，首先执行含有main方法的类，观察到Zi类含有基类Fu，即先加载Fu类的static变量，再加载Zi类的static变量。加载完static变量之后，调用main()方法，new Zi()则先初始化基类的基本变量和构造代码块，再调用基类的构造方法。然后再初始化子类Zi的基本变量和构造代码块，再执行子类的构造函数。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_42-jvm运行时内存结构-五个分区\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_42-jvm运行时内存结构-五个分区\"}},[t._v(\"#\")]),t._v(\" 42.JVM运行时内存结构（五个分区）\")]),t._v(\" \"),a(\"p\",[t._v(\"方法区的垃圾收集主要回收两部分内容：\"),a(\"strong\",[t._v(\"常量池中废弃的常量和不再使用的类型\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为 final 的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"类和接口的全限定名\")]),t._v(\" \"),a(\"li\",[t._v(\"字段的名称和描述符\")]),t._v(\" \"),a(\"li\",[t._v(\"方法的名称和描述符\")])]),t._v(\" \"),a(\"p\",[t._v(\"HotSpot 虚拟机对\"),a(\"strong\",[t._v(\"常量池\")]),t._v(\"的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收\")]),t._v(\" \"),a(\"p\",[t._v(\"判定一个类型是否属于“不再被使用的类”，需要同时满足三个条件：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常很难达成\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_43-逃逸分析\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_43-逃逸分析\"}},[t._v(\"#\")]),t._v(\" 43.逃逸分析\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"逃逸分析(Escape Analysis)*\"),a(\"em\",[t._v(\"是目前 Java 虚拟机中比较前沿的优化技术*\")]),t._v(\"。这是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法\")]),t._v(\"。通过逃逸分析，Java Hotspot 编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。\")]),t._v(\" \"),a(\"p\",[t._v(\"逃逸分析的基本行为就是分析对象动态作用域：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。\")]),t._v(\" \"),a(\"li\",[t._v(\"当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中，称为方法逃逸。\")])]),t._v(\" \"),a(\"p\",[t._v(\"例如：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuffer\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"craeteStringBuffer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" s1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" s2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuffer\")]),t._v(\" sb \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuffer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   sb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"append\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   sb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"append\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" sb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[a(\"code\",[t._v(\"StringBuffer sb\")]),t._v(\"是一个方法内部变量，上述代码中直接将sb返回，这样这个 StringBuffer 有可能被其他方法所改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，但是其逃逸到了方法外部。\"),a(\"strong\",[t._v(\"甚至还有可能被外部线程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"上述代码如果想要 \"),a(\"code\",[t._v(\"StringBuffer sb\")]),t._v(\"不逃出方法，可以这样写：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"createStringBuffer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" s1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" s2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuffer\")]),t._v(\" sb \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"StringBuffer\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   sb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"append\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   sb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"append\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"s2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" sb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"不直接返回 StringBuffer，那么 StringBuffer 将不会逃逸出方法。（\"),a(\"strong\",[t._v(\"不逃逸才是好事-不逃逸的对象才可能在栈上分配，栈上分配对象更快，且没有GC）\")])]),t._v(\" \"),a(\"p\",[t._v(\"使用逃逸分析，编译器可以对代码做优化：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"栈上分配\")]),t._v(\"：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"同步省略\")]),t._v(\"：如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"分离对象或标量替换\")]),t._v(\"：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而存储在 CPU 寄存器\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"JIT 编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无需进行垃圾回收了。\")])]),t._v(\" \"),a(\"p\",[t._v(\"常见栈上分配的场景：成员变量赋值、方法返回值、实例引用传递\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码优化之同步省略（消除）\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"线程同步的代价是相当高的，同步的后果是降低并发性和性能\")]),t._v(\" \"),a(\"li\",[t._v(\"在动态编译同步块的时候，JIT 编译器可以借助逃逸分析来判断同步块所使用的锁对象是否能够被一个线程访问而没有被发布到其他线程。如果没有，那么 JIT 编译器在编译这个同步块的时候就会取消对这个代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫做\"),a(\"strong\",[t._v(\"同步省略，也叫锁消除\")]),t._v(\"。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"代码优化之标量替换\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"标量\")]),t._v(\"（Scalar）是指一个无法再分解成更小的数据的数据。Java 中的原始数据类型就是标量。\")]),t._v(\" \"),a(\"p\",[t._v(\"相对的，那些的还可以分解的数据叫做\"),a(\"strong\",[t._v(\"聚合量\")]),t._v(\"（Aggregate），Java 中的对象就是聚合量，因为其还可以分解成其他聚合量和标量。\")]),t._v(\" \"),a(\"p\",[t._v(\"在 JIT 阶段，通过逃逸分析确定该对象不会被外部访问，并且对象可以被进一步分解时，JVM 不会创建该对象，而会将该对象成员变量分解若干个被这个方法使用的成员变量所代替。这些代替的成员变量在栈帧或寄存器上分配空间。这个过程就是\"),a(\"strong\",[t._v(\"标量替换\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"通过 \"),a(\"code\",[t._v(\"-XX:+EliminateAllocations\")]),t._v(\" 可以开启标量替换，\"),a(\"code\",[t._v(\"-XX:+PrintEliminateAllocations\")]),t._v(\" 查看标量替换情况。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"alloc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"alloc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Point\")]),t._v(\" point \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Point\")]),t._v(\"（\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\"）\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"point.x=\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\"point\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"x\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"; point.y=\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\"point\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"y\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Point\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" x\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" y\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"以上代码中，point 对象并没有逃逸出 \"),a(\"code\",[t._v(\"alloc()\")]),t._v(\" 方法，并且 point 对象是可以拆解成标量的。那么，JIT 就不会直接创建 Point 对象，而是直接使用两个标量 int x ，int y 来替代 Point 对象。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"alloc\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" x \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" y \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n   \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"point.x=\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\"x\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"; point.y=\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\"y\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"代码优化之栈上分配\")])]),t._v(\" \"),a(\"p\",[t._v(\"我们通过 JVM 内存分配可以知道 JAVA 中的对象都是在堆上进行分配，当对象没有被引用的时候，需要依靠 GC 进行回收内存，如果对象数量较多的时候，会给 GC 带来较大压力，也间接影响了应用的性能。为了减少临时对象在堆内分配的数量，JVM 通过逃逸分析确定该对象不会被外部访问。那就通过标量替换将该对象分解在栈上分配内存，这样该对象所占用的内存空间就可以随栈帧出栈而销毁，就减轻了垃圾回收的压力。\")])])}),[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}