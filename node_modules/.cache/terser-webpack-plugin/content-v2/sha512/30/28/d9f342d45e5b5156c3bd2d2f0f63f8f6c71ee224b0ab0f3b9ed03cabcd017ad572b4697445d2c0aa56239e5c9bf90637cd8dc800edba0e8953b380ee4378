{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{341:function(t,a,s){\"use strict\";s.r(a);var _=s(14),e=Object(_.a)({},(function(){var t=this,a=t._self._c;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"事务隔离级别是怎么实现的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务隔离级别是怎么实现的\"}},[t._v(\"#\")]),t._v(\" 事务隔离级别是怎么实现的？\")]),t._v(\" \"),a(\"p\",[t._v(\"这是我的钱包，共有 100 万元。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/bc8fe6de0e9e466671cd7d335c116de3.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"今天我心情好，我决定给你的转账 100 万，最后的结果肯定是我的余额变为 0 元，你的余额多了 100 万元，是不是想到就很开心？\")]),t._v(\" \"),a(\"p\",[t._v(\"转账这一动作在程序里会涉及到一系列的操作，假设我向你转账 100 万的过程是有下面这几个步骤组成的：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/40b48e0a7c9a57ae6b78b62c3fad4048.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"可以看到这个转账的过程涉及到了两次修改数据库的操作。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设在执行第三步骤之后，服务器忽然掉电了，就会发生一个蛋疼的事情，我的账户扣了 100 万，但是钱并没有到你的账户上，也就是说\"),a(\"strong\",[t._v(\"这 100 万消失了！\")])]),t._v(\" \"),a(\"p\",[t._v(\"要解决这个问题，就要保证转账业务里的所有数据库的操作是不可分割的，要么全部执行成功 ，要么全部失败，不允许出现中间状态的数据。\")]),t._v(\" \"),a(\"p\",[t._v(\"数据库中的「\"),a(\"strong\",[t._v(\"事务（*Transaction*）\")]),t._v(\"」就能达到这样的效果。\")]),t._v(\" \"),a(\"p\",[t._v(\"我们在转账操作前先开启事务，等所有数据库操作执行完成后，才提交事务，对于已经提交的事务来说，该事务对数据库所做的修改将永久生效，如果中途发生发生中断或错误，那么该事务期间对数据库所做的修改将会被回滚到没执行该事务之前的状态。\")]),t._v(\" \"),a(\"p\",[t._v(\"没错，今天就来图解 MySQL 事务啦，开车！\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/eb15d4b6a9d543c1be4f7090479d969c.png\",alt:\"img\"}})]),t._v(\" \"),a(\"hr\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"事务有哪些特性\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务有哪些特性\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E4%BA%8B%E5%8A%A1%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E6%80%A7\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"事务有哪些特性？\")]),t._v(\" \"),a(\"p\",[t._v(\"事务是由 MySQL 的引擎来实现的，我们常见的 InnoDB 引擎它是支持事务的。\")]),t._v(\" \"),a(\"p\",[t._v(\"不过并不是所有的引擎都能支持事务，比如 MySQL 原生的 MyISAM 引擎就不支持事务，也正是这样，所以大多数 MySQL 的引擎都是用 InnoDB。\")]),t._v(\" \"),a(\"p\",[t._v(\"事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"原子性（Atomicity）\")]),t._v(\"：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"一致性（Consistency）\")]),t._v(\"：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"隔离性（Isolation）\")]),t._v(\"：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"持久性（Durability）\")]),t._v(\"：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\")])]),t._v(\" \"),a(\"p\",[t._v(\"InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"持久性是通过 redo log （重做日志）来保证的；\")]),t._v(\" \"),a(\"li\",[t._v(\"原子性是通过 undo log（回滚日志） 来保证的；\")]),t._v(\" \"),a(\"li\",[t._v(\"隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；\")]),t._v(\" \"),a(\"li\",[t._v(\"一致性则是通过持久性+原子性+隔离性来保证；\")])]),t._v(\" \"),a(\"p\",[t._v(\"这次将\"),a(\"strong\",[t._v(\"重点介绍事务的隔离性\")]),t._v(\"，这也是面试时最常问的知识的点。\")]),t._v(\" \"),a(\"p\",[t._v(\"为什么事务要有隔离性，我们就要知道并发事务时会引发什么问题。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"并行事务会引发什么问题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并行事务会引发什么问题\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E5%B9%B6%E8%A1%8C%E4%BA%8B%E5%8A%A1%E4%BC%9A%E5%BC%95%E5%8F%91%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"并行事务会引发什么问题？\")]),t._v(\" \"),a(\"p\",[t._v(\"MySQL 服务端是允许多个客户端连接的，这意味着 MySQL 会出现同时处理多个事务的情况。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么\"),a(\"strong\",[t._v(\"在同时处理多个事务的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来，通过举例子给大家说明，这些问题是如何发生的。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"脏读\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#脏读\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E8%84%8F%E8%AF%BB\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"脏读\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。\")])]),t._v(\" \"),a(\"p\",[t._v(\"举个栗子。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后再执行更新操作，如果此时事务 A 还没有提交事务，而此时正好事务 B 也从数据库中读取小林的余额数据，那么事务 B 读取到的余额数据是刚才事务 A 更新后的数据，即使没有提交事务。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/10b513008ea35ee880c592a88adcb12f.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，\"),a(\"strong\",[t._v(\"如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"不可重复读\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不可重复读\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"不可重复读\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。\")])]),t._v(\" \"),a(\"p\",[t._v(\"举个栗子。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库中读取小林的余额数据，然后继续执行代码逻辑处理，\"),a(\"strong\",[t._v(\"在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为不可重复读。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/f5b4f8f0c0adcf044b34c1f300a95abf.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"幻读\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#幻读\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E5%B9%BB%E8%AF%BB\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"幻读\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。\")])]),t._v(\" \"),a(\"p\",[t._v(\"举个栗子。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设有 A 和 B 这两个事务同时在处理，事务 A 先开始从数据库查询账户余额大于 100 万的记录，发现共有 5 条，然后事务 B 也按相同的搜索条件也是查询出了 5 条记录。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/d19a1019dc35dfe8cfe7fbff8cd97e31.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"接下来，事务 A 插入了一条余额超过 100 万的账号，并提交了事务，此时数据库超过 100 万余额的账号个数就变为 6。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后事务 B 再次查询账户余额大于 100 万的记录，此时查询到的记录数量有 6 条，\"),a(\"strong\",[t._v(\"发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"事务的隔离级别有哪些\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务的隔离级别有哪些\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%9C%89%E5%93%AA%E4%BA%9B\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"事务的隔离级别有哪些？\")]),t._v(\" \"),a(\"p\",[t._v(\"前面我们提到，当多个事务并发执行时可能会遇到「脏读、不可重复读、幻读」的现象，这些现象会对事务的一致性产生不同程序的影响。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"脏读：读到其他事务未提交的数据；\")]),t._v(\" \"),a(\"li\",[t._v(\"不可重复读：前后读取的数据不一致；\")]),t._v(\" \"),a(\"li\",[t._v(\"幻读：前后读取的记录数量不一致。\")])]),t._v(\" \"),a(\"p\",[t._v(\"这三个现象的严重性排序如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/d37bfa1678eb71ae7e33dc8f211d1ec1.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"读未提交（*read uncommitted*）\")]),t._v(\"，指一个事务还没提交时，它做的变更就能被其他事务看到；\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"读提交（*read committed*）\")]),t._v(\"，指一个事务提交之后，它做的变更才能被其他事务看到；\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"可重复读（*repeatable read*）\")]),t._v(\"，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，\"),a(\"strong\",[t._v(\"MySQL InnoDB 引擎的默认隔离级别\")]),t._v(\"；\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"串行化（*serializable* ）\")]),t._v(\"；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\")])]),t._v(\" \"),a(\"p\",[t._v(\"按隔离水平高低排序如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/cce766a69dea725cd8f19b90db2d0430.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"针对不同的隔离级别，并发事务时可能发生的现象也会不同。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/4e98ea2e60923b969790898565b4d643.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"也就是说：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；\")]),t._v(\" \"),a(\"li\",[t._v(\"在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；\")]),t._v(\" \"),a(\"li\",[t._v(\"在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；\")]),t._v(\" \"),a(\"li\",[t._v(\"在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。\")])]),t._v(\" \"),a(\"p\",[t._v(\"所以，要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\")]),t._v(\" \"),a(\"p\",[t._v(\"不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，\"),a(\"strong\",[t._v(\"我们讨论的 MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"MySQL 在「可重复读」隔离级别下，可以很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了，详见这篇\"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"文章 (opens new window)\"),a(\"OutboundLink\")],1),t._v(\"）\")]),t._v(\"，解决的方案有两种：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"快照读\")]),t._v(\"（普通 select 语句），是\"),a(\"strong\",[t._v(\"通过 MVCC 方式解决了幻读\")]),t._v(\"，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"当前读\")]),t._v(\"（select ... for update 等语句），是\"),a(\"strong\",[t._v(\"通过 next-key lock（记录锁+间隙锁）方式解决了幻读\")]),t._v(\"，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\")])]),t._v(\" \"),a(\"p\",[t._v(\"接下来，举个具体的例子来说明这四种隔离级别，有一张账户余额表，里面有一条账户余额为 100 万的记录。然后有两个并发的事务，事务 A 只负责查询余额，事务 B 则会将我的余额改成 200 万，下面是按照时间顺序执行两个事务的行为：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/d5de450e901ed926d0b5278c8b65b9fe.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"在不同隔离级别下，事务 A 执行过程中查询到的余额可能会不同：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"在「读未提交」隔离级别下，事务 B 修改余额后，虽然没有提交事务，但是此时的余额已经可以被事务 A 看见了，于是事务 A 中余额 V1 查询的值是 200 万，余额 V2、V3 自然也是 200 万了；\")]),t._v(\" \"),a(\"li\",[t._v(\"在「读提交」隔离级别下，事务 B 修改余额后，因为没有提交事务，所以事务 A 中余额 V1 的值还是 100 万，等事务 B 提交完后，最新的余额数据才能被事务 A 看见，因此额 V2、V3 都是 200 万；\")]),t._v(\" \"),a(\"li\",[t._v(\"在「可重复读」隔离级别下，事务 A 只能看见启动事务时的数据，所以余额 V1、余额 V2 的值都是 100 万，当事务 A 提交事务后，就能看见最新的余额数据了，所以余额 V3 的值是 200 万；\")]),t._v(\" \"),a(\"li\",[t._v(\"在「串行化」隔离级别下，事务 B 在执行将余额 100 万修改为 200 万时，由于此前事务 A 执行了读操作，这样就发生了读写冲突，于是就会被锁住，直到事务 A 提交后，事务 B 才可以继续执行，所以从 A 的角度看，余额 V1、V2 的值是 100 万，余额 V3 的值是 200万。\")])]),t._v(\" \"),a(\"p\",[t._v(\"这四种隔离级别具体是如何实现的呢？\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；\")]),t._v(\" \"),a(\"li\",[t._v(\"对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；\")]),t._v(\" \"),a(\"li\",[t._v(\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 \"),a(\"strong\",[t._v(\"Read View *\"),a(\"em\",[t._v(\"来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。*\")]),t._v(\"「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View\")]),t._v(\"。\")])]),t._v(\" \"),a(\"p\",[t._v(\"注意，执行「开始事务」命令，并不意味着启动了事务。在 MySQL 有两种开启事务的命令，分别是：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"第一种：begin/start transaction 命令；\")]),t._v(\" \"),a(\"li\",[t._v(\"第二种：start transaction with consistent snapshot 命令；\")])]),t._v(\" \"),a(\"p\",[t._v(\"这两种开启事务的命令，事务的启动时机是不同的：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"执行了 begin/start transaction 命令后，并不代表事务启动了。只有在执行这个命令后，执行了增删查改操作的 SQL 语句，才是事务真正启动的时机；\")]),t._v(\" \"),a(\"li\",[t._v(\"执行了 start transaction with consistent snapshot 命令，就会马上启动事务。\")])]),t._v(\" \"),a(\"p\",[t._v(\"接下来详细说下，Read View 在 MVCC 里如何工作的？\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"read-view-在-mvcc-里如何工作的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#read-view-在-mvcc-里如何工作的\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#read-view-%E5%9C%A8-mvcc-%E9%87%8C%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"Read View 在 MVCC 里如何工作的？\")]),t._v(\" \"),a(\"p\",[t._v(\"我们需要了解两个知识：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Read View 中四个字段作用；\")]),t._v(\" \"),a(\"li\",[t._v(\"聚簇索引记录中两个跟事务有关的隐藏列；\")])]),t._v(\" \"),a(\"p\",[t._v(\"那 Read View 到底是个什么东西？\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/readview%E7%BB%93%E6%9E%84.drawio.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"Read View 有四个重要的字段：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"m_ids ：指的是在创建 Read View 时，当前数据库中「活跃事务」的\"),a(\"strong\",[t._v(\"事务 id 列表\")]),t._v(\"，注意是一个列表，\"),a(\"strong\",[t._v(\"“活跃事务”指的就是，启动了但还没提交的事务\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"min_trx_id ：指的是在创建 Read View 时，当前数据库中「活跃事务」中事务 \"),a(\"strong\",[t._v(\"id 最小的事务\")]),t._v(\"，也就是 m_ids 的最小值。\")]),t._v(\" \"),a(\"li\",[t._v(\"max_trx_id ：这个并不是 m_ids 的最大值，而是\"),a(\"strong\",[t._v(\"创建 Read View 时当前数据库中应该给下一个事务的 id 值\")]),t._v(\"，也就是全局事务中最大的事务 id 值 + 1；\")]),t._v(\" \"),a(\"li\",[t._v(\"creator_trx_id ：指的是\"),a(\"strong\",[t._v(\"创建该 Read View 的事务的事务 id\")]),t._v(\"。\")])]),t._v(\" \"),a(\"p\",[t._v(\"知道了 Read View 的字段，我们还需要了解聚簇索引记录中的两个隐藏列。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设在账户余额表插入一条小林余额为 100 万的记录，然后我把这两个隐藏列也画出来，该记录的整个示意图如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/f595d13450878acd04affa82731f76c5.png\",alt:\"图片\"}})]),t._v(\" \"),a(\"p\",[t._v(\"对于使用 InnoDB 存储引擎的数据库表，它的聚簇索引记录中都包含下面两个隐藏列：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"trx_id，当一个事务对某条聚簇索引记录进行改动时，就会\"),a(\"strong\",[t._v(\"把该事务的事务 id 记录在 trx_id 隐藏列里\")]),t._v(\"；\")]),t._v(\" \"),a(\"li\",[t._v(\"roll_pointer，每次对某条聚簇索引记录进行改动时，都会把旧版本的记录写入到 undo 日志中，然后\"),a(\"strong\",[t._v(\"这个隐藏列是个指针，指向每一个旧版本记录\")]),t._v(\"，于是就可以通过它找到修改前的记录。\")])]),t._v(\" \"),a(\"p\",[t._v(\"在创建 Read View 后，我们可以将记录中的 trx_id 划分这三种情况：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/ReadView.drawio.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"一个事务去访问记录的时候，除了自己的更新记录总是可见之外，还有这几种情况：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"如果记录的 trx_id 值小于 Read View 中的 \"),a(\"code\",[t._v(\"min_trx_id\")]),t._v(\" 值，表示这个版本的记录是在创建 Read View \"),a(\"strong\",[t._v(\"前\")]),t._v(\"已经提交的事务生成的，所以该版本的记录对当前事务\"),a(\"strong\",[t._v(\"可见\")]),t._v(\"。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如果记录的 trx_id 值大于等于 Read View 中的 \"),a(\"code\",[t._v(\"max_trx_id\")]),t._v(\" 值，表示这个版本的记录是在创建 Read View \"),a(\"strong\",[t._v(\"后\")]),t._v(\"才启动的事务生成的，所以该版本的记录对当前事务\"),a(\"strong\",[t._v(\"不可见\")]),t._v(\"。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"如果记录的 trx_id 值在 Read View 的\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"min_trx_id\\n\")])])]),a(\"p\",[t._v(\"和\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"max_trx_id\\n\")])])]),a(\"p\",[t._v(\"之间，需要判断 trx_id 是否在 m_ids 列表中：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"如果记录的 trx_id \"),a(\"strong\",[t._v(\"在\")]),t._v(\" \"),a(\"code\",[t._v(\"m_ids\")]),t._v(\" 列表中，表示生成该版本记录的活跃事务依然活跃着（还没提交事务），所以该版本的记录对当前事务\"),a(\"strong\",[t._v(\"不可见\")]),t._v(\"。\")]),t._v(\" \"),a(\"li\",[t._v(\"如果记录的 trx_id \"),a(\"strong\",[t._v(\"不在\")]),t._v(\" \"),a(\"code\",[t._v(\"m_ids\")]),t._v(\"列表中，表示生成该版本记录的活跃事务已经被提交，所以该版本的记录对当前事务\"),a(\"strong\",[t._v(\"可见\")]),t._v(\"。\")])])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"这种通过「版本链」来控制并发事务访问同一个记录时的行为就叫 MVCC（多版本并发控制）。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"可重复读是如何工作的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可重复读是如何工作的\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"可重复读是如何工作的？\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"可重复读隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设事务 A （事务 id 为51）启动后，紧接着事务 B （事务 id 为52）也启动了，那这两个事务创建的 Read View 如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/%E4%BA%8B%E5%8A%A1ab%E7%9A%84%E8%A7%86%E5%9B%BE-new.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"事务 A 和 事务 B 的 Read View 具体内容如下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"在事务 A 的 Read View 中，它的事务 id 是 51，由于它是第一个启动的事务，所以此时活跃事务的事务 id 列表就只有 51，活跃事务的事务 id 列表中最小的事务 id 是事务 A 本身，下一个事务 id 则是 52。\")]),t._v(\" \"),a(\"li\",[t._v(\"在事务 B 的 Read View 中，它的事务 id 是 52，由于事务 A 是活跃的，所以此时活跃事务的事务 id 列表是 51 和 52，\"),a(\"strong\",[t._v(\"活跃的事务 id 中最小的事务 id 是事务 A\")]),t._v(\"，下一个事务 id 应该是 53。\")])]),t._v(\" \"),a(\"p\",[t._v(\"接着，在可重复读隔离级别下，事务 A 和事务 B 按顺序执行了以下操作：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"事务 B 读取小林的账户余额记录，读到余额是 100 万；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 A 将小林的账户余额记录修改成 200 万，并没有提交事务；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 B 读取小林的账户余额记录，读到余额还是 100 万；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 A 提交事务；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 B 读取小林的账户余额记录，读到余额依然还是 100 万；\")])]),t._v(\" \"),a(\"p\",[t._v(\"接下来，跟大家具体分析下。\")]),t._v(\" \"),a(\"p\",[t._v(\"事务 B 第一次读小林的账户余额记录，在找到记录后，它会先看这条记录的 trx_id，此时\"),a(\"strong\",[t._v(\"发现 trx_id 为 50，比事务 B 的 Read View 中的 min_trx_id 值（51）还小，这意味着修改这条记录的事务早就在事务 B 启动前提交过了，所以该版本的记录对事务 B 可见的\")]),t._v(\"，也就是事务 B 可以获取到这条记录。\")]),t._v(\" \"),a(\"p\",[t._v(\"接着，事务 A 通过 update 语句将这条记录修改了（还未提交事务），将小林的余额改成 200 万，这时 MySQL 会记录相应的 undo log，并以链表的方式串联起来，形成\"),a(\"strong\",[t._v(\"版本链\")]),t._v(\"，如下图：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/%E4%BA%8B%E5%8A%A1ab%E7%9A%84%E8%A7%86%E5%9B%BE2.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"你可以在上图的「记录的字段」看到，由于事务 A 修改了该记录，以前的记录就变成旧版本记录了，于是最新记录和旧版本记录通过链表的方式串起来，而且最新记录的 trx_id 是事务 A 的事务 id（trx_id = 51）。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后事务 B 第二次去读取该记录，\"),a(\"strong\",[t._v(\"发现这条记录的 trx_id 值为 51，在事务 B 的 Read View 的 min_trx_id 和 max_trx_id 之间，则需要判断 trx_id 值是否在 m_ids 范围内，判断的结果是在的，那么说明这条记录是被还未提交的事务修改的，这时事务 B 并不会读取这个版本的记录。而是沿着 undo log 链条往下找旧版本的记录，直到找到 trx_id 「小于」事务 B 的 Read View 中的 min_trx_id 值的第一条记录\")]),t._v(\"，所以事务 B 能读取到的是 trx_id 为 50 的记录，也就是小林余额是 100 万的这条记录。\")]),t._v(\" \"),a(\"p\",[t._v(\"最后，当事物 A 提交事务后，\"),a(\"strong\",[t._v(\"由于隔离级别时「可重复读」，所以事务 B 再次读取记录时，还是基于启动事务时创建的 Read View 来判断当前版本的记录是否可见。所以，即使事物 A 将小林余额修改为 200 万并提交了事务， 事务 B 第三次读取记录时，读到的记录都是小林余额是 100 万的这条记录\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"就是通过这样的方式实现了，「可重复读」隔离级别下在事务期间读到的记录都是事务启动前的记录。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"读提交是如何工作的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#读提交是如何工作的\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E8%AF%BB%E6%8F%90%E4%BA%A4%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"读提交是如何工作的？\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"读提交隔离级别是在每次读取数据时，都会生成一个新的 Read View\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"也意味着，事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务。\")]),t._v(\" \"),a(\"p\",[t._v(\"那读提交隔离级别是怎么工作呢？我们还是以前面的例子来聊聊。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设事务 A （事务 id 为51）启动后，紧接着事务 B （事务 id 为52）也启动了，接着按顺序执行了以下操作：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"事务 B 读取数据（创建 Read View），小林的账户余额为 100 万；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 A 修改数据（还没提交事务），将小林的账户余额从 100 万修改成了 200 万；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 B 读取数据（创建 Read View），小林的账户余额为 100 万；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 A 提交事务；\")]),t._v(\" \"),a(\"li\",[t._v(\"事务 B 读取数据（创建 Read View），小林的账户余额为 200 万；\")])]),t._v(\" \"),a(\"p\",[t._v(\"那具体怎么做到的呢？我们重点看事务 B 每次读取数据时创建的 Read View。前两次 事务 B 读取数据时创建的 Read View 如下图：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/%E8%AF%BB%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"我们来分析下为什么事务 B 第二次读数据时，读不到事务 A （还未提交事务）修改的数据？\")]),t._v(\" \"),a(\"p\",[t._v(\"事务 B 在找到小林这条记录时，会看这条记录的 trx_id 是 51，在事务 B 的 Read View 的 min_trx_id 和 max_trx_id 之间，接下来需要判断 trx_id 值是否在 m_ids 范围内，判断的结果是在的，那么说明\"),a(\"strong\",[t._v(\"这条记录是被还未提交的事务修改的，这时事务 B 并不会读取这个版本的记录\")]),t._v(\"。而是，沿着 undo log 链条往下找旧版本的记录，直到找到 trx_id 「小于」事务 B 的 Read View 中的 min_trx_id 值的第一条记录，所以事务 B 能读取到的是 trx_id 为 50 的记录，也就是小林余额是 100 万的这条记录。\")]),t._v(\" \"),a(\"p\",[t._v(\"我们来分析下为什么事务 A 提交后，事务 B 就可以读到事务 A 修改的数据？\")]),t._v(\" \"),a(\"p\",[t._v(\"在事务 A 提交后，\"),a(\"strong\",[t._v(\"由于隔离级别是「读提交」，所以事务 B 在每次读数据的时候，会重新创建 Read View\")]),t._v(\"，此时事务 B 第三次读取数据时创建的 Read View 如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/%E8%AF%BB%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A12.drawio.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"事务 B 在找到小林这条记录时，\"),a(\"strong\",[t._v(\"会发现这条记录的 trx_id 是 51，比事务 B 的 Read View 中的 min_trx_id 值（52）还小，这意味着修改这条记录的事务早就在创建 Read View 前提交过了，所以该版本的记录对事务 B 是可见的\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"正是因为在读提交隔离级别下，事务每次读数据时都重新创建 Read View，那么在事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"总结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html#%E6%80%BB%E7%BB%93\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"总结\")]),t._v(\" \"),a(\"p\",[t._v(\"事务是在 MySQL 引擎层实现的，我们常见的 InnoDB 引擎是支持事务的，事务的四大特性是原子性、一致性、隔离性、持久性，我们这次主要讲的是隔离性。\")]),t._v(\" \"),a(\"p\",[t._v(\"当多个事务并发执行的时候，会引发脏读、不可重复读、幻读这些问题，那为了避免这些问题，SQL 提出了四种隔离级别，分别是读未提交、读已提交、可重复读、串行化，从左往右隔离级别顺序递增，隔离级别越高，意味着性能越差，InnoDB 引擎的默认隔离级别是可重复读。\")]),t._v(\" \"),a(\"p\",[t._v(\"要解决脏读现象，就要将隔离级别升级到读已提交以上的隔离级别，要解决不可重复读现象，就要将隔离级别升级到可重复读以上的隔离级别。\")]),t._v(\" \"),a(\"p\",[t._v(\"而对于幻读现象，不建议将隔离级别升级为串行化，因为这会导致数据库并发时性能很差。MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了，详见这篇\"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"文章 (opens new window)\"),a(\"OutboundLink\")],1),t._v(\"），解决的方案有两种：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"快照读\")]),t._v(\"（普通 select 语句），是\"),a(\"strong\",[t._v(\"通过 MVCC 方式解决了幻读\")]),t._v(\"，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"当前读\")]),t._v(\"（select ... for update 等语句），是\"),a(\"strong\",[t._v(\"通过 next-key lock（记录锁+间隙锁）方式解决了幻读\")]),t._v(\"，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\")])]),t._v(\" \"),a(\"p\",[t._v(\"对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"「读提交」隔离级别是在每个 select 都会生成一个新的 Read View，也意味着，事务期间的多次读取同一条数据，前后两次读的数据可能会出现不一致，因为可能这期间另外一个事务修改了该记录，并提交了事务。\")]),t._v(\" \"),a(\"li\",[t._v(\"「可重复读」隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View，这样就保证了在事务期间读到的数据都是事务启动前的记录。\")])]),t._v(\" \"),a(\"p\",[t._v(\"这两个隔离级别实现是通过「事务的 Read View 里的字段」和「记录中的两个隐藏列」的比对，来控制并发事务访问同一个记录时的行为，这就叫 MVCC（多版本并发控制）。\")]),t._v(\" \"),a(\"p\",[t._v(\"在可重复读隔离级别中，普通的 select 语句就是基于 MVCC 实现的快照读，也就是不会加锁的。而 select .. for update 语句就不是快照读了，而是当前读了，也就是每次读都是拿到最新版本的数据，但是它会对读到的记录加上 next-key lock 锁。\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"mysql-可重复读隔离级别-完全解决幻读了吗\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql-可重复读隔离级别-完全解决幻读了吗\"}},[t._v(\"#\")]),t._v(\" MySQL 可重复读隔离级别，完全解决幻读了吗？\")]),t._v(\" \"),a(\"p\",[t._v(\"大家好，我是小林。\")]),t._v(\" \"),a(\"p\",[t._v(\"我在\"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/mvcc.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"上一篇文章 (opens new window)\"),a(\"OutboundLink\")],1),t._v(\"提到，MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了），解决的方案有两种：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"快照读\")]),t._v(\"（普通 select 语句），是\"),a(\"strong\",[t._v(\"通过 MVCC 方式解决了幻读\")]),t._v(\"，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"当前读\")]),t._v(\"（select ... for update 等语句），是\"),a(\"strong\",[t._v(\"通过 next-key lock（记录锁+间隙锁）方式解决了幻读\")]),t._v(\"，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\")])]),t._v(\" \"),a(\"p\",[t._v(\"这两个解决方案是很大程度上解决了幻读现象，但是还是有个别的情况造成的幻读现象是无法解决的。\")]),t._v(\" \"),a(\"p\",[t._v(\"这次，就跟大家好好聊这个问题。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"什么是幻读\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是幻读\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BB%E8%AF%BB\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"什么是幻读？\")]),t._v(\" \"),a(\"p\",[t._v(\"首先来看看 MySQL 文档是怎么定义幻读（Phantom Read）的:\")]),t._v(\" \"),a(\"p\",[a(\"em\",[a(\"strong\",[t._v(\"The so-called phantom problem occurs within a transaction when the same query produces different sets of rows at different times. For example, if a SELECT is executed twice, but returns a row the second time that was not returned the first time, the row is a “phantom” row.\")])])]),t._v(\" \"),a(\"p\",[t._v(\"翻译：当同一个查询在不同的时间产生不同的结果集时，事务中就会出现所谓的幻象问题。例如，如果 SELECT 执行了两次，但第二次返回了第一次没有返回的行，则该行是“幻像”行。\")]),t._v(\" \"),a(\"p\",[t._v(\"举个例子，假设一个事务在 T1 时刻和 T2 时刻分别执行了下面查询语句，途中没有执行其他任何语句：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"SELECT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"FROM\")]),t._v(\" t_test \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"WHERE\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"100\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"只要 T1 和 T2 时刻执行产生的结果集是不相同的，那就发生了幻读的问题，比如：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"T1 时间执行的结果是有 5 条行记录，而 T2 时间执行的结果是有 6 条行记录，那就发生了幻读的问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"T1 时间执行的结果是有 5 条行记录，而 T2 时间执行的结果是有 4 条行记录，也是发生了幻读的问题。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"快照读是如何避免幻读的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#快照读是如何避免幻读的\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html#%E5%BF%AB%E7%85%A7%E8%AF%BB%E6%98%AF%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%B9%BB%E8%AF%BB%E7%9A%84\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"快照读是如何避免幻读的？\")]),t._v(\" \"),a(\"p\",[t._v(\"可重复读隔离级是由 MVCC（多版本并发控制）实现的，实现的方式是开始事务后（执行 begin 语句后），在执行第一个查询语句后，会创建一个 Read View，\"),a(\"strong\",[t._v(\"后续的查询语句利用这个 Read View，通过这个 Read View 就可以在 undo log 版本链找到事务开始时的数据，所以事务过程中每次查询的数据都是一样的\")]),t._v(\"，即使中途有其他事务插入了新纪录，是查询不出来这条数据的，所以就很好了避免幻读问题。\")]),t._v(\" \"),a(\"p\",[t._v(\"做个实验，数据库表 t_stu 如下，其中 id 为主键。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/7f9df142b3594daeaaca495abb7133f5.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"然后在可重复读隔离级别下，有两个事务的执行顺序如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/e576e047dccc47d5a59636ea342750b8.png\",alt:\"在这里插入图片描述\"}})]),t._v(\" \"),a(\"p\",[t._v(\"从这个实验结果可以看到，即使事务 B 中途插入了一条记录，事务 A 前后两次查询的结果集都是一样的，并没有出现所谓的幻读现象。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"当前读是如何避免幻读的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#当前读是如何避免幻读的\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html#%E5%BD%93%E5%89%8D%E8%AF%BB%E6%98%AF%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%B9%BB%E8%AF%BB%E7%9A%84\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"当前读是如何避免幻读的？\")]),t._v(\" \"),a(\"p\",[t._v(\"MySQL 里除了普通查询是快照读，其他都是\"),a(\"strong\",[t._v(\"当前读\")]),t._v(\"，比如 update、insert、delete，这些语句执行前都会查询最新版本的数据，然后再做进一步的操作。\")]),t._v(\" \"),a(\"p\",[t._v(\"这很好理解，假设你要 update 一个记录，另一个事务已经 delete 这条记录并且提交事务了，这样不是会产生冲突吗，所以 update 的时候肯定要知道最新的数据。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外，\"),a(\"code\",[t._v(\"select ... for update\")]),t._v(\" 这种查询语句是当前读，每次执行的时候都是读取最新的数据。\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来，我们假设\"),a(\"code\",[t._v(\"select ... for update\")]),t._v(\"当前读是不会加锁的（实际上是会加锁的），在做一遍实验。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/1f872ff92b644b5f81cee2dd9188b199.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"这时候，事务 B 插入的记录，就会被事务 A 的第二条查询语句查询到（因为是当前读），这样就会出现前后两次查询的结果集合不一样，这就出现了幻读。\")]),t._v(\" \"),a(\"p\",[t._v(\"所以，\"),a(\"strong\",[t._v(\"Innodb 引擎为了解决「可重复读」隔离级别使用「当前读」而造成的幻读问题，就引出了间隙锁\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/gap%E9%94%81.drawio.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"举个具体例子，场景如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/3af285a8e70f4d4198318057eb955520.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"事务 A 执行了这面这条锁定读语句后，就在对表中的记录加上 id 范围为 (2, +∞] 的 next-key lock（next-key lock 是间隙锁+记录锁的组合）。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后，事务 B 在执行插入语句的时候，判断到插入的位置被事务 A 加了 next-key lock，于是事物 B 会生成一个插入意向锁，同时进入等待状态，直到事务 A 提交了事务。这就避免了由于事务 B 插入新记录而导致事务 A 发生幻读的现象。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"幻读被完全解决了吗\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#幻读被完全解决了吗\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html#%E5%B9%BB%E8%AF%BB%E8%A2%AB%E5%AE%8C%E5%85%A8%E8%A7%A3%E5%86%B3%E4%BA%86%E5%90%97\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"幻读被完全解决了吗？\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"可重复读隔离级别下虽然很大程度上避免了幻读，但是还是没有能完全解决幻读\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"我举例一个可重复读隔离级别发生幻读现象的场景。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"第一个发生幻读现象的场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第一个发生幻读现象的场景\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html#%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%91%E7%94%9F%E5%B9%BB%E8%AF%BB%E7%8E%B0%E8%B1%A1%E7%9A%84%E5%9C%BA%E6%99%AF\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"第一个发生幻读现象的场景\")]),t._v(\" \"),a(\"p\",[t._v(\"还是以这张表作为例子：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com//mysql/other/7f9df142b3594daeaaca495abb7133f5-20230309222119359.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"事务 A 执行查询 id = 5 的记录，此时表中是没有该记录的，所以查询不出来。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 事务 A\")]),t._v(\"\\nmysql\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"begin\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nQuery OK\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"rows\")]),t._v(\" affected \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.00\")]),t._v(\" sec\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\nmysql\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"select\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"from\")]),t._v(\" t_stu \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"where\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nEmpty \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"set\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.01\")]),t._v(\" sec\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"然后事务 B 插入一条 id = 5 的记录，并且提交了事务。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 事务 B\")]),t._v(\"\\nmysql\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"begin\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nQuery OK\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"rows\")]),t._v(\" affected \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.00\")]),t._v(\" sec\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\nmysql\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"insert\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"into\")]),t._v(\" t_stu \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"values\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'小美'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"18\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nQuery OK\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"row\")]),t._v(\" affected \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.00\")]),t._v(\" sec\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\\nmysql\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"commit\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nQuery OK\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"rows\")]),t._v(\" affected \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.00\")]),t._v(\" sec\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"此时，\"),a(\"strong\",[t._v(\"事务 A 更新 id = 5 这条记录，对没错，事务 A 看不到 id = 5 这条记录，但是他去更新了这条记录，这场景确实很违和，然后再次查询 id = 5 的记录，事务 A 就能看到事务 B 插入的纪录了，幻读就是发生在这种违和的场景\")]),t._v(\"。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-sql extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 事务 A\")]),t._v(\"\\nmysql\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"update\")]),t._v(\" t_stu \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"set\")]),t._v(\" name \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'小林coding'\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"where\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nQuery OK\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"row\")]),t._v(\" affected \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.01\")]),t._v(\" sec\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"Rows\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"matched\")]),t._v(\": \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"  Changed: \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"Warnings\")]),t._v(\": \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"\\n\\nmysql\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"select\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"from\")]),t._v(\" t_stu \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"where\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"----+--------------+------+\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" id \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" name         \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" age  \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"----+--------------+------+\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" 小林coding   \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\"   \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"18\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"----+--------------+------+\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"row\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"in\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"set\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.00\")]),t._v(\" sec\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"整个发生幻读的时序图如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E9%94%81/%E5%B9%BB%E8%AF%BB%E5%8F%91%E7%94%9F.drawio.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"在可重复读隔离级别下，事务 A 第一次执行普通的 select 语句时生成了一个 ReadView，之后事务 B 向表中新插入了一条 id = 5 的记录并提交。接着，事务 A 对 id = 5 这条记录进行了更新操作，在这个时刻，这条新记录的 trx_id 隐藏列的值就变成了事务 A 的事务 id，之后事务 A 再使用普通 select 语句去查询这条记录时就可以看到这条记录了，于是就发生了幻读。\")]),t._v(\" \"),a(\"p\",[t._v(\"因为这种特殊现象的存在，所以我们认为 \"),a(\"strong\",[t._v(\"MySQL Innodb 中的 MVCC 并不能完全避免幻读现象\")]),t._v(\"。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"第二个发生幻读现象的场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第二个发生幻读现象的场景\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%91%E7%94%9F%E5%B9%BB%E8%AF%BB%E7%8E%B0%E8%B1%A1%E7%9A%84%E5%9C%BA%E6%99%AF\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"第二个发生幻读现象的场景\")]),t._v(\" \"),a(\"p\",[t._v(\"除了上面这一种场景会发生幻读现象之外，还有下面这个场景也会发生幻读现象。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"T1 时刻：事务 A 先执行「快照读语句」：select * from t_test where id > 100 得到了 3 条记录。\")]),t._v(\" \"),a(\"li\",[t._v(\"T2 时刻：事务 B 往插入一个 id= 200 的记录并提交；\")]),t._v(\" \"),a(\"li\",[t._v(\"T3 时刻：事务 A 再执行「当前读语句」 select * from t_test where id > 100 for update 就会得到 4 条记录，此时也发生了幻读现象。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select ... for update 这类当前读的语句\")]),t._v(\"，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"总结-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结-2\"}},[t._v(\"#\")]),t._v(\" \"),a(\"a\",{attrs:{href:\"https://xiaolincoding.com/mysql/transaction/phantom.html#%E6%80%BB%E7%BB%93\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"#\"),a(\"OutboundLink\")],1),t._v(\"总结\")]),t._v(\" \"),a(\"p\",[t._v(\"MySQL InnoDB 引擎的可重复读隔离级别（默认隔离级），根据不同的查询方式，分别提出了避免幻读的方案：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"快照读\")]),t._v(\"（普通 select 语句），是通过 MVCC 方式解决了幻读。\")]),t._v(\" \"),a(\"li\",[t._v(\"针对\"),a(\"strong\",[t._v(\"当前读\")]),t._v(\"（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读。\")])]),t._v(\" \"),a(\"p\",[t._v(\"我举例了两个发生幻读场景的例子。\")]),t._v(\" \"),a(\"p\",[t._v(\"第一个例子：对于快照读， MVCC 并不能完全避免幻读现象。因为当事务 A 更新了一条事务 B 插入的记录，那么事务 A 前后两次查询的记录条目就不一样了，所以就发生幻读。\")]),t._v(\" \"),a(\"p\",[t._v(\"第二个例子：对于当前读，如果事务开启后，并没有执行当前读，而是先快照读，然后这期间如果其他事务插入了一条记录，那么事务后续使用当前读进行查询的时候，就会发现两次查询的记录条目就不一样了，所以就发生幻读。\")]),t._v(\" \"),a(\"p\",[t._v(\"所以，\"),a(\"strong\",[t._v(\"MySQL 可重复读隔离级别并没有彻底解决幻读，只是很大程度上避免了幻读现象的发生。\")])]),t._v(\" \"),a(\"p\",[t._v(\"要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select ... for update 这类当前读的语句，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"xa事务-分布式事务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#xa事务-分布式事务\"}},[t._v(\"#\")]),t._v(\" XA事务（分布式事务）\")]),t._v(\" \"),a(\"p\",[t._v(\"https://juejin.cn/post/6844903647197806605\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"什么是分布式事务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是分布式事务\"}},[t._v(\"#\")]),t._v(\" 什么是分布式事务\")]),t._v(\" \"),a(\"p\",[t._v(\"分布式事务就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"分布式事务产生的原因\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式事务产生的原因\"}},[t._v(\"#\")]),t._v(\" 分布式事务产生的原因\")]),t._v(\" \"),a(\"p\",[t._v(\"从上面本地事务来看，我们可以看为两块，一个是service产生多个节点，另一个是resource产生多个节点。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"service多个节点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#service多个节点\"}},[t._v(\"#\")]),t._v(\" service多个节点\")]),t._v(\" \"),a(\"p\",[t._v(\"随着互联网快速发展，微服务，SOA等服务架构模式正在被大规模的使用，举个简单的例子，一个公司之内，用户的资产可能分为好多个部分，比如余额，积分，优惠券等等。在公司内部有可能积分功能由一个微服务团队维护，优惠券又是另外的团队维护\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/26/164d6783a9e3f959~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"这样的话就无法保证积分扣减了之后，优惠券能否扣减成功。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"resource多个节点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#resource多个节点\"}},[t._v(\"#\")]),t._v(\" resource多个节点\")]),t._v(\" \"),a(\"p\",[t._v(\"同样的，互联网发展得太快了，我们的Mysql一般来说装千万级的数据就得进行分库分表，对于一个支付宝的转账业务来说，你给的朋友转钱，有可能你的数据库是在北京，而你的朋友的钱是存在上海，所以我们依然无法保证他们能同时成功。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/26/164d67e0c6026ac4~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"h2\",{attrs:{id:\"分布式事务的基础\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式事务的基础\"}},[t._v(\"#\")]),t._v(\" 分布式事务的基础\")]),t._v(\" \"),a(\"p\",[t._v(\"从上面来看分布式事务是随着互联网高速发展应运而生的，这是一个必然的我们之前说过数据库的ACID四大特性，已经无法满足我们分布式事务，这个时候又有一些新的大佬提出一些新的理论:\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"cap\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cap\"}},[t._v(\"#\")]),t._v(\" CAP\")]),t._v(\" \"),a(\"p\",[t._v(\"CAP定理，又被叫作布鲁尔定理。对于设计分布式系统来说(不仅仅是分布式事务)的架构师来说，CAP就是你的入门理论。\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"C (一致性):对某个指定的客户端来说，读操作能返回最新的写操作。对于数据分布在不同节点上的数据上来说，如果在某个节点更新了数据，那么在其他节点如果都能读取到这个最新的数据，那么就称为强一致，如果有某个节点没有读取到，那就是分布式不一致。\")]),t._v(\" \"),a(\"li\",[t._v(\"A (可用性)：非故障的节点在合理的时间内返回合理的响应(不是错误和超时的响应)。可用性的两个关键一个是合理的时间，一个是合理的响应。合理的时间指的是请求不能无限被阻塞，应该在合理的时间给出返回。合理的响应指的是系统应该明确返回结果并且结果是正确的，这里的正确指的是比如应该返回50，而不是返回40。\")]),t._v(\" \"),a(\"li\",[t._v(\"P (分区容错性):当出现网络分区后，系统能够继续工作。打个比方，这里个集群有多台机器，有台机器网络出现了问题，但是这个集群仍然可以正常工作。\")])]),t._v(\" \"),a(\"p\",[t._v(\"熟悉CAP的人都知道，三者不能共有，如果感兴趣可以搜索CAP的证明，在分布式系统中，网络无法100%可靠，分区其实是一个必然现象，如果我们选择了CA而放弃了P，那么当发生分区现象时，为了保证一致性，这个时候必须拒绝请求，但是A又不允许，所以分布式系统理论上不可能选择CA架构，只能选择CP或者AP架构。\")]),t._v(\" \"),a(\"p\",[t._v(\"对于CP来说，放弃可用性，追求一致性和分区容错性，我们的zookeeper其实就是追求的强一致。\")]),t._v(\" \"),a(\"p\",[t._v(\"对于AP来说，放弃一致性(这里说的一致性是强一致性)，追求分区容错性和可用性，这是很多分布式系统设计时的选择，后面的BASE也是根据AP来扩展。\")]),t._v(\" \"),a(\"p\",[t._v(\"顺便一提，CAP理论中是忽略网络延迟，也就是当事务提交时，从节点A复制到节点B，但是在现实中这个是明显不可能的，所以总会有一定的时间是不一致。同时CAP中选择两个，比如你选择了CP，并不是叫你放弃A。因为P出现的概率实在是太小了，大部分的时间你仍然需要保证CA。就算分区出现了你也要为后来的A做准备，比如通过一些日志的手段，是其他机器回复至可用。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"base\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#base\"}},[t._v(\"#\")]),t._v(\" BASE\")]),t._v(\" \"),a(\"p\",[t._v(\"BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写。是对CAP中AP的一个扩展\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"基本可用:分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。\")]),t._v(\" \"),a(\"li\",[t._v(\"软状态:允许系统中存在中间状态，这个状态不影响系统可用性，这里指的是CAP中的不一致。\")]),t._v(\" \"),a(\"li\",[t._v(\"最终一致:最终一致是指经过一段时间后，所有节点数据都将会达到一致。\")])]),t._v(\" \"),a(\"p\",[t._v(\"BASE解决了CAP中理论没有网络延迟，在BASE中用软状态和最终一致，保证了延迟后的一致性。BASE和 ACID 是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"分布式事务解决方案\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式事务解决方案\"}},[t._v(\"#\")]),t._v(\" 分布式事务解决方案\")]),t._v(\" \"),a(\"p\",[t._v(\"有了上面的理论基础后，这里介绍开始介绍几种常见的分布式事务的解决方案。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"是否真的要分布式事务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#是否真的要分布式事务\"}},[t._v(\"#\")]),t._v(\" 是否真的要分布式事务\")]),t._v(\" \"),a(\"p\",[t._v(\"在说方案之前，首先你一定要明确你是否真的需要分布式事务？\")]),t._v(\" \"),a(\"p\",[t._v(\"上面说过出现分布式事务的两个原因，其中有个原因是因为微服务过多。我见过太多团队一个人维护几个微服务，太多团队过度设计，搞得所有人疲劳不堪，而微服务过多就会引出分布式事务，这个时候我不会建议你去采用下面任何一种方案，而是请把需要事务的微服务聚合成一个单机服务，使用数据库的本地事务。因为不论任何一种方案都会增加你系统的复杂度，这样的成本实在是太高了，千万不要因为追求某些设计，而引入不必要的成本和复杂度。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果你确定需要引入分布式事务可以看看下面几种常见的方案。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_2pc\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2pc\"}},[t._v(\"#\")]),t._v(\" 2PC\")]),t._v(\" \"),a(\"p\",[t._v(\"说到2PC就不得不聊数据库分布式事务中的 XA Transactions。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/26/164d73624b63e17a~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"在XA协议中分为两阶段:\")]),t._v(\" \"),a(\"p\",[t._v(\"第一阶段：事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.\")]),t._v(\" \"),a(\"p\",[t._v(\"第二阶段：事务协调器要求每个数据库提交数据，或者回滚数据。\")]),t._v(\" \"),a(\"p\",[t._v(\"优点： 尽量保证了数据的强一致，实现成本较低，在各大主流数据库都有自己实现，对于MySQL是从5.5开始支持。\")]),t._v(\" \"),a(\"p\",[t._v(\"缺点:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"单点问题:事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。\")]),t._v(\" \"),a(\"li\",[t._v(\"同步阻塞:在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。\")]),t._v(\" \"),a(\"li\",[t._v(\"数据不一致:两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。\")])]),t._v(\" \"),a(\"p\",[t._v(\"总的来说，XA协议比较简单，成本较低，但是其单点问题，以及不能支持高并发(由于同步阻塞)依然是其最大的弱点。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"tcc\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcc\"}},[t._v(\"#\")]),t._v(\" TCC\")]),t._v(\" \"),a(\"p\",[t._v(\"关于TCC（Try-Confirm-Cancel）的概念，最早是由Pat Helland于2007年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。 TCC事务机制相比于上面介绍的XA，解决了其几个缺点: 1.解决了协调者单点，由主业务方发起并完成这个业务活动。业务活动管理器也变成多点，引入集群。 2.同步阻塞:引入超时，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻辑形式，粒度变小。 3.数据一致性，有了补偿机制之后，由业务活动管理器控制一致性\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/26/164d74a2293772d5~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"对于TCC的解释:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Try阶段：尝试执行,完成所有业务检查（一致性）,预留必须业务资源（准隔离性）\")]),t._v(\" \"),a(\"li\",[t._v(\"Confirm阶段：确认执行真正执行业务，不作任何业务检查，只使用Try阶段预留的业务资源，Confirm操作满足幂等性。要求具备幂等设计，Confirm失败后需要进行重试。\")]),t._v(\" \"),a(\"li\",[t._v(\"Cancel阶段：取消执行，释放Try阶段预留的业务资源 Cancel操作满足幂等性Cancel阶段的异常和Confirm阶段异常处理方案基本上一致。\")])]),t._v(\" \"),a(\"p\",[t._v(\"举个简单的例子如果你用100元买了一瓶水， Try阶段:你需要向你的钱包检查是否够100元并锁住这100元，水也是一样的。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果有一个失败，则进行cancel(释放这100元和这一瓶水)，如果cancel失败不论什么失败都进行重试cancel，所以需要保持幂等。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果都成功，则进行confirm,确认这100元扣，和这一瓶水被卖，如果confirm失败无论什么失败则重试(会依靠活动日志进行重试)\")]),t._v(\" \"),a(\"p\",[t._v(\"对于TCC来说适合一些:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"强隔离性，严格一致性要求的活动业务。\")]),t._v(\" \"),a(\"li\",[t._v(\"执行时间较短的业务\")])]),t._v(\" \"),a(\"p\",[t._v(\"实现参考:ByteTCC:\"),a(\"a\",{attrs:{href:\"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fliuyangming%2FByteTCC%2F\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"github.com/liuyangming…\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h2\",{attrs:{id:\"本地消息表\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#本地消息表\"}},[t._v(\"#\")]),t._v(\" 本地消息表\")]),t._v(\" \"),a(\"p\",[t._v(\"本地消息表这个方案最初是ebay提出的 ebay的完整方案https://queue.acm.org/detail.cfm?id=1394128。\")]),t._v(\" \"),a(\"p\",[t._v(\"此方案的核心是将需要分布式处理的任务通过消息日志的方式来异步执行。消息日志可以存储到本地文本、数据库或消息队列，再通过业务规则自动或人工发起重试。人工重试更多的是应用于支付场景，通过对账系统对事后问题的处理。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/27/164d75fd59779f74~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"对于本地消息队列来说核心是把大事务转变为小事务。还是举上面用100元去买一瓶水的例子。\")]),t._v(\" \"),a(\"p\",[t._v(\"1.当你扣钱的时候，你需要在你扣钱的服务器上新增加一个本地消息表，你需要把你扣钱和写入减去水的库存到本地消息表放入同一个事务(依靠数据库本地事务保证一致性。\")]),t._v(\" \"),a(\"p\",[t._v(\"2.这个时候有个定时任务去轮询这个本地事务表，把没有发送的消息，扔给商品库存服务器，叫他减去水的库存，到达商品服务器之后这个时候得先写入这个服务器的事务表，然后进行扣减，扣减成功后，更新事务表中的状态。\")]),t._v(\" \"),a(\"p\",[t._v(\"3.商品服务器通过定时任务扫描消息表或者直接通知扣钱服务器，扣钱服务器本地消息表进行状态更新。\")]),t._v(\" \"),a(\"p\",[t._v(\"4.针对一些异常情况，定时扫描未成功处理的消息，进行重新发送，在商品服务器接到消息之后，首先判断是否是重复的，如果已经接收，在判断是否执行，如果执行在马上又进行通知事务，如果未执行，需要重新执行需要由业务保证幂等，也就是不会多扣一瓶水。\")]),t._v(\" \"),a(\"p\",[t._v(\"本地消息队列是BASE理论，是最终一致模型，适用于对一致性要求不高的。实现这个模型时需要注意重试的幂等。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"mq事务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mq事务\"}},[t._v(\"#\")]),t._v(\" MQ事务\")]),t._v(\" \"),a(\"p\",[t._v(\"在RocketMQ中实现了分布式事务，实际上其实是对本地消息表的一个封装，将本地消息表移动到了MQ内部，下面简单介绍一下MQ事务，如果想对其详细了解可以参考: \"),a(\"a\",{attrs:{href:\"https://link.juejin.cn?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F453c6e7ff81c%E3%80%82\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"www.jianshu.com/p/453c6e7ff…\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/27/164d773728eb2d4d~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"基本流程如下: 第一阶段Prepared消息，会拿到消息的地址。\")]),t._v(\" \"),a(\"p\",[t._v(\"第二阶段执行本地事务。\")]),t._v(\" \"),a(\"p\",[t._v(\"第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。消息接受者就能使用这个消息。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果确认消息失败，在RocketMq Broker中提供了定时扫描没有更新状态的消息，如果有消息没有得到确认，会向消息发送者发送消息，来判断是否提交，在rocketmq中是以listener的形式给发送者，用来处理。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/27/164d77389afdfd6b~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"如果消费超时，则需要一直重试，消息接收端需要保证幂等。如果消息消费失败，这个就需要人工进行处理，因为这个概率较低，如果为了这种小概率时间而设计这个复杂的流程反而得不偿失\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"saga事务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#saga事务\"}},[t._v(\"#\")]),t._v(\" Saga事务\")]),t._v(\" \"),a(\"p\",[t._v(\"Saga是30年前一篇数据库伦理提到的一个概念。其核心思想是将长事务拆分为多个本地短事务，由Saga事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。 Saga的组成：\")]),t._v(\" \"),a(\"p\",[t._v(\"每个Saga由一系列sub-transaction Ti 组成 每个Ti 都有对应的补偿动作Ci，补偿动作用于撤销Ti造成的结果,这里的每个T，都是一个本地事务。 可以看到，和TCC相比，Saga没有“预留 try”动作，它的Ti就是直接提交到库。\")]),t._v(\" \"),a(\"p\",[t._v(\"Saga的执行顺序有两种：\")]),t._v(\" \"),a(\"p\",[t._v(\"T1, T2, T3, ..., Tn\")]),t._v(\" \"),a(\"p\",[t._v(\"T1, T2, ..., Tj, Cj,..., C2, C1，其中0 < j < n Saga定义了两种恢复策略：\")]),t._v(\" \"),a(\"p\",[t._v(\"向后恢复，即上面提到的第二种执行顺序，其中j是发生错误的sub-transaction，这种做法的效果是撤销掉之前所有成功的sub-transation，使得整个Saga的执行结果撤销。 向前恢复，适用于必须要成功的场景，执行顺序是类似于这样的：T1, T2, ..., Tj(失败), Tj(重试),..., Tn，其中j是发生错误的sub-transaction。该情况下不需要Ci。\")]),t._v(\" \"),a(\"p\",[t._v(\"这里要注意的是，在saga模式中不能保证隔离性，因为没有锁住资源，其他事务依然可以覆盖或者影响当前事务。\")]),t._v(\" \"),a(\"p\",[t._v(\"还是拿100元买一瓶水的例子来说，这里定义\")]),t._v(\" \"),a(\"p\",[t._v(\"T1=扣100元 T2=给用户加一瓶水 T3=减库存一瓶水\")]),t._v(\" \"),a(\"p\",[t._v(\"C1=加100元 C2=给用户减一瓶水 C3=给库存加一瓶水\")]),t._v(\" \"),a(\"p\",[t._v(\"我们一次进行T1,T2，T3如果发生问题，就执行发生问题的C操作的反向。 上面说到的隔离性的问题会出现在，如果执行到T3这个时候需要执行回滚，但是这个用户已经把水喝了(另外一个事务)，回滚的时候就会发现，无法给用户减一瓶水了。这就是事务之间没有隔离性的问题\")]),t._v(\" \"),a(\"p\",[t._v(\"可以看见saga模式没有隔离性的影响还是较大，可以参照华为的解决方案:从业务层面入手加入一 Session 以及锁的机制来保证能够串行化操作资源。也可以在业务层面通过预先冻结资金的方式隔离这部分资源， 最后在业务操作的过程中可以通过及时读取当前状态的方式获取到最新的更新。\")]),t._v(\" \"),a(\"p\",[t._v(\"具体实例:可以参考华为的servicecomb\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"最后\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最后\"}},[t._v(\"#\")]),t._v(\" 最后\")]),t._v(\" \"),a(\"p\",[t._v(\"还是那句话，能不用分布式事务就不用，如果非得使用的话，结合自己的业务分析，看看自己的业务比较适合哪一种，是在乎强一致，还是最终一致即可。上面对解决方案只是一些简单介绍，如果真正的想要落地，其实每种方案需要思考的地方都非常多，复杂度都比较大，所以最后再次提醒一定要判断好是否使用分布式事务。最后在总结一些问题,大家可以下来自己从文章找寻答案:\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"ACID和CAP的 CA是一样的吗？\")]),t._v(\" \"),a(\"li\",[t._v(\"分布式事务常用的解决方案的优缺点是什么？适用于什么场景？\")]),t._v(\" \"),a(\"li\",[t._v(\"分布式事务出现的原因？用来解决什么痛点？\")])]),t._v(\" \"),a(\"p\",[t._v(\"03-MySQL-XA事务状态流转\")]),t._v(\" \"),a(\"p\",[t._v(\"XA事务在MySQL内部共有五种状态，如下:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"XA_NOTR   //未开始\")]),t._v(\" \"),a(\"li\",[t._v(\"XA_ACTIVE 活跃状态\")]),t._v(\" \"),a(\"li\",[t._v(\"XA_IDLE //空闲状态\")]),t._v(\" \"),a(\"li\",[t._v(\"XA_PREPARED //准备提交状态\")]),t._v(\" \"),a(\"li\",[t._v(\"XA_ROLLBACK_ONLY /只能回滚\")])]),t._v(\" \"),a(\"p\",[t._v(\"状态流转图：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/wechatSpider/modb_20191220_114907.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/wechatSpider/modb_20191220_114908.png\",alt:\"img\"}})]),t._v(\" \"),a(\"p\",[t._v(\"事务状态流转受到InnoDB参数innodb_rollback_on_timeout的影响，这一点会在下一篇文章中解释，关于MySQL XA事务处理的内部细节，也会放在后续的文章中。\")])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}